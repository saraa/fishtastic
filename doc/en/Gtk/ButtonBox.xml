<Type Name="ButtonBox" FullName="Gtk.ButtonBox">
  <TypeSignature Language="C#" Value="public class ButtonBox : Gtk.Box, Implementor, IWrapper, IWrapper, IDisposable" Maintainer="Lee Mallabone" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>ButtonBox is a container for laying out <see cref="T:Gtk.Button" /> widgets.</summary>
    <remarks>
      <para>A button box should be used to provide a consistent layout of buttons throughout your application. Specific button boxes are <see cref="T:Gtk.HButtonBox" /> for horizontal groups of buttons, and <see cref="T:Gtk.VButtonBox" /> for vertical button groups.</para>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gtk.Box</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Atk.Implementor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="SetChildSecondary">
      <MemberSignature Language="C#" Value="public void SetChildSecondary (Gtk.Widget child, bool is_secondary);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Gtk.Widget" />
        <Parameter Name="is_secondary" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>Sets whether <paramref name="child" /> should appear in a secondary group of children. A typical use of a secondary child is the help button in a dialog.</summary>
        <param name="child">A widget that is already packed into this button box</param>
        <param name="is_secondary">
          <see langword="true" /> if <paramref name="child" /> should be placed in a secondary group, <see langword="false" /> otherwise.</param>
        <remarks>
          <para>A secondary group appears after the other children if the style is <see cref="P:Gtk.ButtonBoxStyle.Start" />, <see cref="P:Gtk.ButtonBoxStyle.Spread" /> or <see cref="P:Gtk.ButtonBoxStyle.Edge" />, and before the the other children if the style is <see cref="P:Gtk.ButtonBoxStyle.End" />. For horizontal button boxes, the definition of before/after depends on direction of the widget (see <see cref="P:Gtk.Widget.Direction" />). If the style is <see cref="P:Gtk.ButtonBoxStyle.Start" /> or <see cref="P:Gtk.ButtonBoxStyle.End" />, then the secondary children are aligned at the other end of the button box from the main children. For the other styles, they appear immediately next to the main children.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ButtonBox (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of ButtonBox, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ButtonBox ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Internal constructor</summary>
        <returns />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The GLib Type for Gtk.ButtonBox</summary>
        <returns>The GLib Type for the Gtk.ButtonBox class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public Gtk.ButtonBoxStyle Layout { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ButtonBoxStyle</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>Alter the way the buttons in this box are arranged.</summary>
        <param name="value">the new style to arrange the buttons in.</param>
        <returns>The style that the child widgets are currently arranged in.</returns>
        <remarks>See <see cref="T:Gtk.ButtonBoxStyle" /> for more information about the styles of button boxes.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutStyle">
      <MemberSignature Language="C#" Value="public Gtk.ButtonBoxStyle LayoutStyle { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ButtonBoxStyle</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>See <see cref="P:Gtk.ButtonBox.Layout" /></summary>
        <param name="value" />
        <returns />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ButtonBox (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">GLib type for the type</param>
        <returns>Creates a new instance of ButtonBox, using the GLib-provided type</returns>
        <remarks>
          <para>This is a constructor used by derivative types of <see cref="T:Gtk.ButtonBox" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>