<Type Name="TextMark" FullName="Gtk.TextMark">
  <TypeSignature Language="C#" Value="public class TextMark : GLib.Object, IWrapper, IDisposable" Maintainer="duncan" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>
      A GtkTextMark is like a bookmark in a text buffer; it preserves a position in the text.
    </summary>
    <remarks>
      <para>
        A GtkTextMark is like a bookmark in a text buffer; it
        preserves a position in the text. You can convert the mark to
        an <see cref="T:Gtk.TextIter" /> iterator using <see cref="M:Gtk.TextBuffer.GetIterAtMark(Gtk.TextMark)" />. Unlike
        iterators, marks remain valid across buffer mutations, because
        their behavior is defined when text is inserted or
        deleted. When text containing a mark is deleted, the mark
        remains in the position originally occupied by the deleted
        text. When text is inserted at a mark, a mark with left
        gravity will be moved to the beginning of the newly-inserted
        text, and a mark with right gravity will be moved to the
        end.
      </para>
      <para>
        Marks optionally have names; these can be convenient to avoid
        passing the <see cref="T:Gtk.TextMark" /> object around.
      </para>
      <para>
        Marks are typically created using the
        <see cref="M:Gtk.TextMark.CreateMark(Gtk.TextMark)" /> function.
      </para>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>GLib.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected virtual void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextMark (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of TextMark, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextMark ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'Gtk.TextMark'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The GLib Type for Gtk.TextMark</summary>
        <returns>The GLib Type for the Gtk.TextMark class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the mark</summary>
        <returns>
          Returns the name of the mark and <see langword="null" /> if
          it's an anonymous mark
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public bool Deleted { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether of not the mark has been removed</summary>
        <returns>Returns <see langword="true" /> if the mark has been removed from its buffer.</returns>
        <remarks>
          <para>
            Returns <see langword="true" /> if the mark has been
            removed from its buffer with <see cref="M:Gtk.TextBuffer.DeleteMark(Gtk.TextMark)" />. Marks
            can't be used once they are deleted.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftGravity">
      <MemberSignature Language="C#" Value="public bool LeftGravity { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether or not the mark has left gravity</summary>
        <returns>
          <see langword="true" /> if the mark has left gravity,
          <see langword="false" /> otherwise.
        </returns>
        <remarks>
          "left" and "right" here refer to logical direction (left is
          the toward the start of the buffer); in some languages such
          as Hebrew the logically-leftmost text is not actually on the
          left when displayed.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>The visibility of the mark</summary>
        <param name="value">The visibility of the mark</param>
        <returns>
          <see langword="true" /> if the mark is visible (i.e. a cursor is displayed for it)</returns>
        <remarks>
          <para>
            The insertion point is normally visible, i.e. you can see
            it as a vertical bar. Also, the text widget uses a visible
            mark to indicate where a drop will occur when
            dragging-and-dropping text. Most other marks are not
            visible. Marks are not visible by default.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public Gtk.TextBuffer Buffer { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.TextBuffer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          Gets the buffer where this mark is located
        </summary>
        <returns>The buffer where this mark is applied</returns>
        <remarks>
          <see langword="null" /> is returned if the mark has been deleted.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextMark (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">GLib type for the type</param>
        <returns>Creates a new instance of TextMark, using the GLib-provided type</returns>
        <remarks>
          <para>This is a constructor used by derivative types of <see cref="T:Gtk.TextMark" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>