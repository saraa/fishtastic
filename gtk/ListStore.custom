// Gtk.ListStore.Custom - Gtk ListStore class customizations
//
// Author: Kristian Rietveld <kris@gtk.org>
//
// (c) 2002 Kristian Rietveld
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern bool gtk_tree_model_iter_children (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent);
		public bool IterChildren (out Gtk.TreeIter iter) 
		{
			bool raw_ret = gtk_tree_model_iter_children (Handle, out iter, IntPtr.Zero);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern int gtk_tree_model_iter_n_children (IntPtr raw, IntPtr iter);
		public int IterNChildren () 
		{
			int raw_ret = gtk_tree_model_iter_n_children (Handle, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern bool gtk_tree_model_iter_nth_child (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent, int n);
		public bool IterNthChild (out Gtk.TreeIter iter, int n) 
		{
			bool raw_ret = gtk_tree_model_iter_nth_child (Handle, out iter, IntPtr.Zero, n);
			bool ret = raw_ret;
			return ret;
		}

		public void SetValue (Gtk.TreeIter iter, int column, bool value) 
		{
			GLib.Value val = new GLib.Value (value);
			SetValue (iter, column, val);
			val.Dispose ();
		}

		public void SetValue (Gtk.TreeIter iter, int column, double value) 
		{
			GLib.Value val = new GLib.Value (value);
			SetValue (iter, column, val);
			val.Dispose ();
		}

		public void SetValue (Gtk.TreeIter iter, int column, int value) 
		{
			GLib.Value val = new GLib.Value (value);
			SetValue (iter, column, val);
			val.Dispose ();
		}

		public void SetValue (Gtk.TreeIter iter, int column, string value) 
		{
			GLib.Value val = new GLib.Value (value);
			SetValue (iter, column, val);
			val.Dispose ();
		}

		public void SetValue (Gtk.TreeIter iter, int column, float value) 
		{
			GLib.Value val = new GLib.Value (value);
			SetValue (iter, column, val);
			val.Dispose ();
		}

		public void SetValue (Gtk.TreeIter iter, int column, uint value) 
		{
			GLib.Value val = new GLib.Value (value);
			SetValue (iter, column, val);
			val.Dispose ();
		}
		
		public void SetValue (Gtk.TreeIter iter, int column, object value) 
		{
			GLib.Value val = new GLib.Value (value);
			SetValue (iter, column, val);
			val.Dispose ();
		}

		public Gtk.TreeIter AppendValues (Array values) 
		{
			Gtk.TreeIter iter = Append();

			int col = 0;
			foreach (object value in values) {
				if (value != null) {
					GLib.Value val = new GLib.Value (value);
					SetValue (iter, col, val);
					val.Dispose ();
				}
				col++;
			}

			return iter;
		}
		
		public Gtk.TreeIter AppendValues (params object[] values) 
		{
			return AppendValues ((Array) values);
		}

		public ListStore (params GLib.GType[] types) : base (IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
			ColumnTypes = types;
		}

		public ListStore (params Type[] types) : base (IntPtr.Zero)
		{
			GLib.GType[] gtypes = new GLib.GType[types.Length];
			int i = 0;
			foreach (Type type in types) {
				GLib.GType ctype = GLib.TypeConverter.LookupType (type);
				if (ctype == GLib.GType.Invalid)
					throw new Exception ("Unknown type");
				gtypes[i] = ctype;
				i++;
			}
			
			CreateNativeObject (new string [0], new GLib.Value [0]);
			ColumnTypes = gtypes;
		}

		[Obsolete ("Replaced by ColumnTypes property.")]
		public void SetColumnTypes (GLib.GType[] types)
		{
			ColumnTypes = types;
		}

		public object GetValue(Gtk.TreeIter iter, int column) 
		{
			GLib.Value val = GLib.Value.Empty;
			GetValue (iter, column, ref val);
			object ret = val.Val;
			val.Dispose ();
			return ret;
		}

		[Obsolete ("Replaced by SetSortFunc (int, TreeIterCompareFunc) overload.")]
		public void SetSortFunc (int sort_column_id, TreeIterCompareFunc sort_func, IntPtr user_data, Gtk.DestroyNotify destroy) 
		{
			SetSortFunc (sort_column_id, sort_func);
		}

		[Obsolete ("Replaced by DefaultSortFunc property.")]
		public void SetDefaultSortFunc (TreeIterCompareFunc sort_func, IntPtr user_data, Gtk.DestroyNotify destroy) 
		{
			DefaultSortFunc = sort_func;
		}
