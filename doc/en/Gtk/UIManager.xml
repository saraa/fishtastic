<Type Name="UIManager" FullName="Gtk.UIManager">
  <TypeSignature Language="C#" Maintainer="auto" Value="public class UIManager : GLib.Object" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 71 EB 6C 55 75 52 9C BF 72 44 F7 A6 EA 05 62 84 F9 EA E0 3B CF F2 CC 13 2C 9C 49 0A B3 09 EA B0 B5 6B CE 44 9D F5 03 D9 C0 A8 1E 52 05 85 CD BE 70 E2 FB 90 43 4B AC 04 FA 62 22 A8 00 98 B7 A1 A7 B3 AF 99 1A 41 23 24 BB 43 25 F6 B8 65 BB 64 EB F6 D1 C2 06 D5 73 2D DF BC 70 A7 38 9E E5 3E 0C 24 6E 32 79 74 1A D0 05 03 E4 98 42 E1 9B F3 7B 19 8B 40 21 26 CB 36 89 C2 EA 64 96 A4 7C B4]</AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Constructs menus and toolbars from an XML description</summary>
    <remarks>
      <para>
A <see cref="T:Gtk.UIManager" /> constructs a user interface (menus and toolbars) from one or more UI definitions, which reference actions from one or more action groups.
<para>
TODO: all the xml stuff 
</para><para>
UI Merging</para><para>
The most remarkable feature of GtkUIManager is that it can overlay a set of menuitems and toolitems over another one, and demerge them later.
</para><para>
Merging is done based on the names of the XML elements. Each element is identified by a path which consists of the names of its anchestors, separated by slashes. For example, the menuitem named "Left" in the example above has the path /ui/menubar/JustifyMenu/Left and the toolitem with the same name has path /ui/toolbar1/JustifyToolItems/Left.
</para><para>
Accelerators
</para><para>
Every action has an accelerator path. Accelerators are installed together with menuitem proxies, but they can also be explicitly added with &lt;accelerator&gt; elements in the UI definition. This makes it possible to have accelerators for actions even if they have no visible proxies.
<para>
Smart Separators
</para></para><para>
The separators created by GtkUIManager are "smart", i.e. they do not show up in the UI unless they end up between two visible menu or tool items. Separators which are located at the very beginning or end of the menu or toolbar containing them, or multiple separators next to each other, are hidden. This is a useful feature, since the merging of UI elements from multiple sources can make it hard or impossible to determine in advance whether a separator will end up in such an unfortunate position.
</para><para>
Empty Menus
</para><para>
Submenus pose similar problems to separators inconnection with merging. It is impossible to know in advance whether they will end up empty after merging. GtkUIManager offers two ways to treat empty submenus:

<list type="bullet"><item><term>make them disappear by hiding the menu item they're attached to</term></item><item><term>add an insensitive "Empty" item</term></item></list>

The behaviour is chosen based on the "is_important" property of the action to which the submenu is associated.
</para></para>
    </remarks>
    <since version="Gtk# 2.4" />
  </Docs>
  <Base>
    <BaseTypeName>GLib.Object</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Members>
    <Member MemberName="OnActionsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnActionsChanged ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.UIManager.ActionsChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.UIManager.ActionsChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnPreActivate (Gtk.Action action);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Gtk.Action" />
      </Parameters>
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.UIManager.PreActivate" /> event.</summary>
        <param name="action">a <see cref="T:Gtk.Action" /></param>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.UIManager.PreActivate" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAddWidget">
      <MemberSignature Language="C#" Value="protected virtual void OnAddWidget (Gtk.Widget widget);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widget" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.UIManager.AddWidget" /> event.</summary>
        <param name="widget">a <see cref="T:Gtk.Widget" /></param>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.UIManager.AddWidget" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnConnectProxy">
      <MemberSignature Language="C#" Value="protected virtual void OnConnectProxy (Gtk.Action action, Gtk.Widget proxy);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Gtk.Action" />
        <Parameter Name="proxy" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.UIManager.ConnectProxy" /> event.</summary>
        <param name="action">a <see cref="T:Gtk.Action" /></param>
        <param name="proxy">a <see cref="T:Gtk.Widget" /></param>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.UIManager.ConnectProxy" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisconnectProxy">
      <MemberSignature Language="C#" Value="protected virtual void OnDisconnectProxy (Gtk.Action action, Gtk.Widget proxy);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Gtk.Action" />
        <Parameter Name="proxy" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.UIManager.DisconnectProxy" /> event.</summary>
        <param name="action">a <see cref="T:Gtk.Action" /></param>
        <param name="proxy">a <see cref="T:Gtk.Widget" /></param>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.UIManager.DisconnectProxy" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPostActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnPostActivate (Gtk.Action action);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Gtk.Action" />
      </Parameters>
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.UIManager.PostActivate" /> event.</summary>
        <param name="action">a <see cref="T:Gtk.Action" /></param>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.UIManager.PostActivate" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveActionGroup">
      <MemberSignature Language="C#" Value="public void RemoveActionGroup (Gtk.ActionGroup action_group);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action_group" Type="Gtk.ActionGroup" />
      </Parameters>
      <Docs>
        <summary>emoves an action group from the list of action groups</summary>
        <param name="action_group">a <see cref="T:Gtk.ActionGroup" /></param>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWidget">
      <MemberSignature Language="C#" Value="public Gtk.Widget GetWidget (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Widget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Looks up a widget by following a path.</summary>
        <param name="path">a <see cref="T:System.String" /></param>
        <returns>a <see cref="T:Gtk.Widget" /> found by following the path, or <see langword="null" /> if no widget was found.</returns>
        <remarks>The path consists of the names specified in the XML description of the UI. separated by '/'. Elements which do not have a name or action attribute in the XML (e.g. &lt;popup&gt;) can be addressed by their XML element name (e.g. "popup"). The root element ("/ui") can be omitted in the path.

<block subset="none" type="note"><para>
    The widget found by following a path that ends in a &lt;menu&gt; element is the menuitem to which the menu is attached, not the menu itself.
  </para></block></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUiFromString">
      <MemberSignature Language="C#" Value="public uint AddUiFromString (string buffer);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Parses a string containing a UI definition and merges it with the current contents.</summary>
        <param name="buffer">a <see cref="T:System.String" />  to parse</param>
        <returns>a <see cref="T:System.UInt32" />.  The merge id for the merged UI. The merge id can be used to unmerge the UI with <see cref="M:Gtk.UIManager.RemoveUi()" />. If an error occurred, the return value is 0.</returns>
        <remarks>An enclosing &lt;ui&gt; element is added if it is missing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureUpdate">
      <MemberSignature Language="C#" Value="public void EnsureUpdate ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes sure that all pending updates to the UI have been completed.</summary>
        <remarks>This may occasionally be necessary, since <see cref="T:Gtk.UIManager" /> updates the UI in an idle function.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUi">
      <MemberSignature Language="C#" Value="public void AddUi (uint merge_id, string path, string name, string action, Gtk.UIManagerItemType type, bool top);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="merge_id" Type="System.UInt32" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="type" Type="Gtk.UIManagerItemType" />
        <Parameter Name="top" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>Adds a UI element to the current contents.</summary>
        <param name="merge_id">a <see cref="T:System.UInt32" />, the merge id for the merged UI</param>
        <param name="path">a <see cref="T:System.String" /></param>
        <param name="name">a <see cref="T:System.String" />,  the name for the added UI element</param>
        <param name="action">a <see cref="T:System.String" />,  the name of the action to be proxied, or <see langword="null" /> to add a separator</param>
        <param name="type">a <see cref="T:Gtk.UIManagerItemType" />.  the type of UI element to add.</param>
        <param name="top">a <see cref="T:System.Boolean" />.  If <see langword="true" />, the UI element is added before its siblings, otherwise it is added after its siblings.</param>
        <remarks>If type is <see cref="F:Gtk.UIManager.Auto" />, Gtk inserts a menuitem, toolitem or separator if such an element can be inserted at the place determined by path. Otherwise type must indicate an element that can be inserted at the place determined by path.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUi">
      <MemberSignature Language="C#" Value="public void RemoveUi (uint merge_id);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="merge_id" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <summary>Unmerges the content identified by <paramref name="merge_id" />.</summary>
        <param name="merge_id">a <see cref="T:System.UInt32" /> from when the ui was added.</param>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="InsertActionGroup">
      <MemberSignature Language="C#" Value="public void InsertActionGroup (Gtk.ActionGroup action_group, int pos);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action_group" Type="Gtk.ActionGroup" />
        <Parameter Name="pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <summary>Inserts an action group into the list of action groups associated with this UIManager</summary>
        <param name="action_group">a <see cref="T:Gtk.ActionGroup" /> to be inserted</param>
        <param name="pos">a <see cref="T:System.Int32" />,  the position at which the group will be inserted.</param>
        <remarks>Actions in earlier groups hide actions with the same name in later groups.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUiFromFile">
      <MemberSignature Language="C#" Value="public uint AddUiFromFile (string filename);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Parses a file containing a UI definition and merges it with the current contents.</summary>
        <param name="filename">a <see cref="T:System.String" />,  the name of the file to parse</param>
        <returns>a <see cref="T:System.UInt32" />.   The merge id for the merged UI. The merge id can be used to unmerge the UI with <see cref="M:Gtk.UIManager.RemoveUi()" />. If an error occurred, the return value is 0.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAction">
      <MemberSignature Language="C#" Value="public Gtk.Action GetAction (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Action</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Looks up an action by following a path.</summary>
        <param name="path">a <see cref="T:System.String" /></param>
        <returns>a <see cref="T:Gtk.Action" /> whose proxy widget is found by following the path, or <see langword="null" /> if no widget was found.</returns>
        <remarks>See <see cref="M:Gtk.UIManager.GetWidget()" /> for more information about paths.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUiFromResource">
      <MemberSignature Language="C#" Value="public uint AddUiFromResource (string resource);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Adds a UI element to the current contents from an embedded resource.</summary>
        <param name="resource">a <see cref="T:System.String" /></param>
        <returns>a <see cref="T:System.UInt32" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIManager (GLib.GType gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks />
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIManager (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">a <see cref="T:System.IntPtr" /></param>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIManager ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Default constructor</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GType Property.</summary>
        <value>a <see cref="T:GLib.GType" /></value>
        <remarks>Returns the native <see cref="T:GLib.GType" /> value for <see cref="T:Gtk.UIManager" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ui">
      <MemberSignature Language="C#" Value="public string Ui { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The UI represented in XML.</summary>
        <value>a <see cref="T:System.String" /></value>
        <remarks />
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("ui")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="AddTearoffs">
      <MemberSignature Language="C#" Value="public bool AddTearoffs { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the "add_tearoffs" property, which controls whether menus generated by this <see cref="T:Gtk.UIManager" /> will have tearoff menu items.</summary>
        <value>a <see cref="T:System.Boolean" />,  whether tearoff menu items are added</value>
        <remarks>Note that this only affects regular menus. Generated popup menus never have tearoff menu items.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("add-tearoffs")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="AccelGroup">
      <MemberSignature Language="C#" Value="public Gtk.AccelGroup AccelGroup { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.AccelGroup</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The <see cref="T:Gtk.AccelGroup" /> associated with this UIManager</summary>
        <value>a <see cref="T:Gtk.AccelGroup" /></value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ActionsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ActionsChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The "actions-changed" signal is emitted whenever the set of actions changes.</summary>
        <remarks />
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("actions_changed")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="PreActivate">
      <MemberSignature Language="C#" Value="public event Gtk.PreActivateHandler PreActivate;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.PreActivateHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The PreActivate signal is emitted just before the action is activated.</summary>
        <remarks>This is intended for applications to get notification just before any action is activated.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("pre_activate")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="AddWidget">
      <MemberSignature Language="C#" Value="public event Gtk.AddWidgetHandler AddWidget;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.AddWidgetHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The AddWidget signal is emitted for each generated menubar and toolbar.</summary>
        <remarks>It is not emitted for generated popup menus, which can be obtained by <see cref="M:Gtk.UIManager.GetWidget()" />.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("add_widget")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ConnectProxy">
      <MemberSignature Language="C#" Value="public event Gtk.ConnectProxyHandler ConnectProxy;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ConnectProxyHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The ConnectProxy signal is emitted after connecting a proxy to an action in the group.</summary>
        <remarks>This is intended for simple customizations for which a custom action class would be too clumsy, e.g. showing tooltips for menuitems in the statusbar.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("connect_proxy")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="DisconnectProxy">
      <MemberSignature Language="C#" Value="public event Gtk.DisconnectProxyHandler DisconnectProxy;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.DisconnectProxyHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The DisconnectProxy signal is emitted after disconnecting a proxy from an action in the group.</summary>
        <remarks />
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("disconnect_proxy")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="PostActivate">
      <MemberSignature Language="C#" Value="public event Gtk.PostActivateHandler PostActivate;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.PostActivateHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The PostActivate signal is emitted just after the action is activated.</summary>
        <remarks>This is intended for applications to get notification just after any action is activated.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("post_activate")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="NewMergeId">
      <MemberSignature Language="C#" Value="public uint NewMergeId ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	  Returns an unused merge id, suitable for use with 
	  <see cref="Gtk.UIManager.AddUi" />.
	</summary>
        <returns>a <see cref="T:System.UInt32" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionGroups">
      <MemberSignature Language="C#" Value="public Gtk.ActionGroup[] ActionGroups { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ActionGroup[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The list of action groups associated with this UIManager.</summary>
        <value>a <see cref="T:Gtk.ActionGroup[]" /></value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetToplevels">
      <MemberSignature Language="C#" Value="public Gtk.Widget[] GetToplevels (Gtk.UIManagerItemType types);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Widget[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Gtk.UIManagerItemType" />
      </Parameters>
      <Docs>
        <summary>Obtains a list of all toplevel widgets of the requested types.</summary>
        <param name="types">a <see cref="T:System.Int32" /></param>
        <returns>a <see cref="T:Gtk.Widget[]" /></returns>
        <remarks>Allowed types are <see cref="T:Gtk.UIManager.Menubar" />, <see cref="F:Gtk.UIManager.Toolbar" /> and <see cref="F:GTK.UIManager.Popup" />.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
