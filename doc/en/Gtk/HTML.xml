<Type Name="HTML" FullName="Gtk.HTML">
  <TypeSignature Language="C#" Value="public class HTML : Gtk.Layout, Implementor, IWrapper, IWrapper, IDisposable" Maintainer="Miguel de Icaza" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Lightweight HTML rendering widget.</summary>
    <remarks>
      <para>
	Gtk.HTML is a lightweight HTML rendering widget, as well as as
	simple graphical HTML editor.
      </para>
      <para>
	Developers can also be used as a widget container (<see cref="T:Gtk.Container" />).  It is an easy way for viewing HTML
	documents in your application and for layout UI of your
	application throught HTML.
      </para>
      <para>
	Gtk.HTML does not have support for CSS or JavaScript.
      </para>
      <para>
	The following sample is a very minimal web browser.
      </para>
      <para>
        <example>
          <code lang="C#">
using System;
using System.Net;
using System.IO;
using Gtk;
using GtkSharp;

namespace HtmlTest
{
        class HtmlTest
        {
                HTML html;
                Entry entry;
                string currentUrl;
                
                static void Main (string[] args)
                {
                        new HtmlTest();
                }
                
                HtmlTest()
                {
                        Application.Init ();
                        
                        Window win = new Window ("HtmlTest");
                        win.SetDefaultSize (800, 600);
                        win.DeleteEvent += new DeleteEventHandler (OnWindowDelete);
                        
                        VBox vbox = new VBox (false, 1);
                        win.Add (vbox);
                        
                        HBox hbox = new HBox (false, 1);
                        
                        Label label = new Label ("Address:");
                        
                        entry = new Entry ("");
                        entry.Activated += new EventHandler (OnEntryActivated);
                        
                        Button button = new Button ("Go!");
                        button.Clicked += new EventHandler (OnButtonClicked);
                        
                        hbox.PackStart (label, false, false, 1);
                        hbox.PackStart (entry, true, true, 1);
                        hbox.PackStart (button, false, false, 1);
                        
                        vbox.PackStart (hbox, false, false, 1);
                        
                        ScrolledWindow sw = new ScrolledWindow ();
                        sw.VscrollbarPolicy = PolicyType.Always;
                        sw.HscrollbarPolicy = PolicyType.Always;
                        vbox.PackStart(sw, true, true, 1);
                        
                        html = new HTML ();
                        html.LinkClicked += new LinkClickedHandler (OnLinkClicked);
                        sw.Add (html);
                        
                        win.ShowAll();
                        Application.Run ();
                
                }
                
                void OnWindowDelete (object obj, DeleteEventArgs args)
                {
                        Application.Quit();
                }
                
                void OnButtonClicked (object obj, EventArgs args)
                {
                        currentUrl = entry.Text.Trim();
                        LoadHtml (currentUrl);
                }
                
                void OnEntryActivated (object obj, EventArgs args)
                {
                        OnButtonClicked (obj, args);
                }
                
                void OnLinkClicked (object obj, LinkClickedArgs args)
                {
                        string newUrl;
                        
                        // decide absolute or relative
                        if (args.Url.StartsWith("http://")) 
                                newUrl = args.Url;
                        else
                                newUrl = currentUrl + args.Url;

	                try {
                                LoadHtml (newUrl);
	                } catch { }
                        currentUrl = newUrl;
                }
                
                void LoadHtml (string URL)
                {
                        HttpWebRequest web_request = (HttpWebRequest) WebRequest.Create (URL);
                        HttpWebResponse web_response = (HttpWebResponse) web_request.GetResponse ();
			Stream stream = web_response.GetResponseStream ();
			byte [] buffer = new byte [8192];
			
			HTMLStream html_stream = html.Begin ();
			int count;
			
			while ((count = stream.Read (buffer, 0, 8192)) != 0){
				html_stream.Write (buffer, count);
			}
			html.End (html_stream, HTMLStreamStatus.Ok);
                }
        }
}
	    </code>
        </example>
      </para>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gtk.Layout</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Atk.Implementor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="public static void Construct (Gtk.Widget html);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="html" Type="Gtk.Widget" />
	</Parameters>
      <Docs>
        <summary>Constructs an instance of a Gtk.HTML widget</summary>
        <param name="html">A Gtk.HTML derivative object.</param>
        <remarks>This is a low-level routine, and should only be used
        to initialize an instance of a Gtk.HTML derivative class.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectById">
      <MemberSignature Language="C#" Value="public IntPtr GetObjectById (string id);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="id" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>Locates an object whose id is provided</summary>
        <param name="id">The id assigned to an object in the HTML stream</param>
        <returns>An IntPtr to the internal HTMLObject</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public bool Export (string type, Gtk.HTMLSaveReceiverFn receiver);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="type" Type="System.String" />
		<Parameter Name="receiver" Type="Gtk.HTMLSaveReceiverFn" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="type">To be added: an object of type 'string'</param>
        <param name="receiver">To be added: an object of type 'Gtk.HTMLSaveReceiverFn'</param>
        <returns>To be added: an object of type 'bool'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public void Copy ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Copies the selection to the clipboard.</summary>
        <remarks>Copies the selection into the clipboard.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectWord">
      <MemberSignature Language="C#" Value="public void SelectWord ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Selects the word under the cursor.</summary>
        <remarks>This routine selects the word under the cursor.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleFontStyle">
      <MemberSignature Language="C#" Value="public void ToggleFontStyle (Gtk.HTMLFontStyle style);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="style" Type="Gtk.HTMLFontStyle" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="style">To be added: an object of type 'Gtk.HTMLFontStyle'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParagraph">
      <MemberSignature Language="C#" Value="public void SelectParagraph ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomReset">
      <MemberSignature Language="C#" Value="public void ZoomReset ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (Gtk.HTMLStream handle, string buffer, int size);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="handle" Type="Gtk.HTMLStream" />
		<Parameter Name="buffer" Type="System.String" />
		<Parameter Name="size" Type="System.Int32" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="handle">To be added: an object of type 'Gtk.HTMLStream'</param>
        <param name="buffer">To be added: an object of type 'string'</param>
        <param name="size">To be added: an object of type 'int'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Undoes the last operation.</summary>
        <remarks>If the widget is Editable, this undoes the last operation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cut">
      <MemberSignature Language="C#" Value="public void Cut ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuts the selection into the clipboard.</summary>
        <remarks>If the widget is editable, this cuts the selection
        into the clipboard;  Otherwise it just copies the selection
        into the clipboard.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlBaseRelative">
      <MemberSignature Language="C#" Value="public string GetUrlBaseRelative (string url);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="url" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>Computes url from widget base url.</summary>
        <param name="url">The new component of the url.</param>
        <returns>The new base-relative url.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UpdateStyles">
      <MemberSignature Language="C#" Value="public void UpdateStyles ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public Gtk.HTMLStream Begin ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.HTMLStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts incremental content updating.</summary>
        <returns>A <see cref="T:Gtk.HTMLStream" /> handle to push content.</returns>
        <remarks>
          <para>
	    Use the Begin method to push new HTML content into the
	    widget.  The content type is expected to be in the format
	    defined by <see cref="P:Gtk.HTML.DefaultContentType" />,
	    which by default is "html/text; charset=utf-8".
	  </para>
          <example>
            <code lang="C#">
using System;
using Gtk;

class X {

        static void Main ()
        {
                Application.Init ();
                Window w = new Window ("Sample");
                HTML html = new HTML ();
                w.Add (html);
                w.ShowAll ();

                HTMLStream s = html.Begin ();
                string line;

                while ((line = Console.ReadLine ()) != null)
                        s.Write (line);
	        html.End (s, HTMLStreamStatus.Ok);
                Application.Run ();
        }
}

	    </code>
          </example>
          <para>
	    Compile and run:
	  </para>
          <para>
	    mcs sample.cs -r:gtk-sharp
	  </para>
          <para>
	    echo "<html>
              <body>Hello <b>World</b></body>
            </html>" | mono sample.exe
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImagesRef">
      <MemberSignature Language="C#" Value="public void ImagesRef ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (bool as_cite);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="as_cite" Type="System.Boolean" />
	</Parameters>
      <Docs>
        <summary>Paste clipboard contents into editor</summary>
        <param name="as_cite">Whether to paste as a citation.</param>
        <remarks>
	  If the widget is in editing mode (see <see cref="P:Gtk.HTML.Editable" />), the contents of the clipboard
	  are pasted into the HTML editor.  If the value of <see paramref="as_cite" /> is true, then the contents are pasted
	  as a citation.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadEmpty">
      <MemberSignature Language="C#" Value="public void LoadEmpty ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasUndo">
      <MemberSignature Language="C#" Value="public bool HasUndo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'bool'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public void End (Gtk.HTMLStream handle, Gtk.HTMLStreamStatus status);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="handle" Type="Gtk.HTMLStream" />
		<Parameter Name="status" Type="Gtk.HTMLStreamStatus" />
	</Parameters>
      <Docs>
        <summary>Ends incremental updating</summary>
        <param name="handle">The <see cref="T:Gtk.HTMLStream" /> to close.</param>
        <param name="status">The <see cref="T:Gtk.HTMLStreamStatus" /> representing the state of the stream when closed.</param>
        <remarks>
          <para>
	    Closes the <see cref="Gtk.HTMLStream" /> represented
	    by <see paramref="stream" /> and notifies the HTML widget that
	    it should not expect any more content from that stream.
	  </para>
          <example>
            <code lang="C#">
using System;
using Gtk;

class X {

        static void Main ()
        {
                Application.Init ();
                Window w = new Window ("Sample");
                HTML html = new HTML ();
                w.Add (html);
                w.ShowAll ();

                HTMLStream s = html.Begin ();
                string line;

                while ((line = Console.ReadLine ()) != null)
                        s.Write (line);
	        html.End (s, HTMLStreamStatus.Ok);
                Application.Run ();
        }
}

	    </code>
          </example>
          <para>
	    Compile and run:
	  </para>
          <para>
	    mcs sample.cs -r:gtk-sharp
	  </para>
          <para>
	    echo "<html>
              <body>Hello <b>World</b></body>
            </html>" | mono sample.exe
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Redo">
      <MemberSignature Language="C#" Value="public void Redo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Redoes the last Undone operation</summary>
        <remarks>If the widget is editable, this redoes the last
        undone operation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendHtml">
      <MemberSignature Language="C#" Value="public void AppendHtml (string html_src);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="html_src" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="html_src">To be added: an object of type 'string'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectLine">
      <MemberSignature Language="C#" Value="public void SelectLine ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentPopLevel">
      <MemberSignature Language="C#" Value="public void IndentPopLevel ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectAll">
      <MemberSignature Language="C#" Value="public void SelectAll ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Selects all the contents.</summary>
        <remarks>Selects all of the contents of the HTML widget.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public Gtk.HTMLStream Begin (string target_frame, string content_type, Gtk.HTMLBeginFlags flags);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.HTMLStream</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="target_frame" Type="System.String" />
		<Parameter Name="content_type" Type="System.String" />
		<Parameter Name="flags" Type="Gtk.HTMLBeginFlags" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="target_frame">To be added: an object of type 'string'</param>
        <param name="content_type">To be added: an object of type 'string'</param>
        <param name="flags">To be added: an object of type 'Gtk.HTMLBeginFlags'</param>
        <returns>To be added: an object of type 'Gtk.HTMLStream'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDebug">
      <MemberSignature Language="C#" Value="public void EnableDebug (bool debug);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="debug" Type="System.Boolean" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="debug">To be added: an object of type 'bool'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditMakeCursorVisible">
      <MemberSignature Language="C#" Value="public bool EditMakeCursorVisible ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'bool'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEditorApi">
      <MemberSignature Language="C#" Value="public void SetEditorApi (Gtk.HTMLEditorAPI api, IntPtr data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="api" Type="Gtk.HTMLEditorAPI" />
		<Parameter Name="data" Type="System.IntPtr" />
	</Parameters>
      <Docs>
        <summary>Unsupported in Gtk#.  Installs hooks for the editor.</summary>
        <param name="api">To be added: an object of type 'Gtk.HTMLEditorAPI'</param>
        <param name="data">To be added: an object of type 'IntPtr'</param>
        <remarks>This API is currently not supported.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertGtkHtml">
      <MemberSignature Language="C#" Value="public void InsertGtkHtml (Gtk.HTML to_be_destroyed);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="to_be_destroyed" Type="Gtk.HTML" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="to_be_destroyed">To be added: an object of type 'Gtk.HTML'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomIn">
      <MemberSignature Language="C#" Value="public void ZoomIn ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zooms in.</summary>
        <remarks>Zooms in the view.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertHtml">
      <MemberSignature Language="C#" Value="public void InsertHtml (string html_src);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="html_src" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="html_src">To be added: an object of type 'string'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFontStyle">
      <MemberSignature Language="C#" Value="public void SetFontStyle (Gtk.HTMLFontStyle and_mask, Gtk.HTMLFontStyle or_mask);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="and_mask" Type="Gtk.HTMLFontStyle" />
		<Parameter Name="or_mask" Type="Gtk.HTMLFontStyle" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="and_mask">To be added: an object of type 'Gtk.HTMLFontStyle'</param>
        <param name="or_mask">To be added: an object of type 'Gtk.HTMLFontStyle'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageUnref">
      <MemberSignature Language="C#" Value="public void ImageUnref (string url);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="url" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="url">To be added: an object of type 'string'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRef">
      <MemberSignature Language="C#" Value="public void ImageRef (string url);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="url" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="url">To be added: an object of type 'string'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="JumpToAnchor">
      <MemberSignature Language="C#" Value="public bool JumpToAnchor (string anchor);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="anchor" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>Jumps to an anchor by name, making it visible.</summary>
        <param name="anchor">The anchor to locate.</param>
        <returns>
          <see langword="true" /> if the anchor is found.</returns>
        <remarks>Scroll the document display to show the HTML anchor requested.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImagePreload">
      <MemberSignature Language="C#" Value="public void ImagePreload (string url);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="url" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="url">To be added: an object of type 'string'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestPaste">
      <MemberSignature Language="C#" Value="public int RequestPaste (Gdk.Atom selection, int type, int time, bool as_cite);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="selection" Type="Gdk.Atom" />
		<Parameter Name="type" Type="System.Int32" />
		<Parameter Name="time" Type="System.Int32" />
		<Parameter Name="as_cite" Type="System.Boolean" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="selection">To be added: an object of type 'Gdk.Atom'</param>
        <param name="type">To be added: an object of type 'int'</param>
        <param name="time">To be added: an object of type 'int'</param>
        <param name="as_cite">To be added: an object of type 'bool'</param>
        <returns>To be added: an object of type 'int'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImagesUnref">
      <MemberSignature Language="C#" Value="public void ImagesUnref ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public bool Save (Gtk.HTMLSaveReceiverFn receiver);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="receiver" Type="Gtk.HTMLSaveReceiverFn" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="receiver">To be added: an object of type 'Gtk.HTMLSaveReceiverFn'</param>
        <returns>To be added: an object of type 'bool'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public Gtk.HTMLStream Begin (string content_type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.HTMLStream</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="content_type" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>Starts incremental content updating. With a specific
        content type.</summary>
        <param name="content_type">The content type for the data to be
        streamed.</param>
        <returns>A <see cref="T:Gtk.HTMLStream" /> handle to push content.</returns>
        <remarks>
          <para>
	    Use the Begin method to push new HTML content into the
	    widget.  The content type has to be specified (like this
	    for example: "html/text; charset=utf-8").
	  </para>
          <example>
            <code lang="C#">
using System;
using Gtk;

class X {

        static void Main ()
        {
                Application.Init ();
                Window w = new Window ("Sample");
                HTML html = new HTML ();
                w.Add (html);
                w.ShowAll ();

                HTMLStream s = html.Begin ("text/html; charset=utf-8");
                string line;

                while ((line = Console.ReadLine ()) != null)
                        s.Write (line);
	        html.End (s, HTMLStreamStatus.Ok);
                Application.Run ();
        }
}

	    </code>
          </example>
          <para>
	    Compile and run:
	  </para>
          <para>
	    mcs sample.cs -r:gtk-sharp
	  </para>
          <para>
	    echo "<html>
              <body>Hello <b>World</b></body>
            </html>" | mono sample.exe
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSelection">
      <MemberSignature Language="C#" Value="public void AllowSelection (bool allow);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="allow" Type="System.Boolean" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="allow">To be added: an object of type 'bool'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropUndo">
      <MemberSignature Language="C#" Value="public void DropUndo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Drops all the undo information.</summary>
        <remarks>Drops all the Undo and Redo information from the widget.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParagraphExtended">
      <MemberSignature Language="C#" Value="public void SelectParagraphExtended ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomOut">
      <MemberSignature Language="C#" Value="public void ZoomOut ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zooms out.</summary>
        <remarks>Zooms out the view.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public bool Command (string command_name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="command_name" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="command_name">To be added: an object of type 'string'</param>
        <returns>To be added: an object of type 'bool'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected virtual void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HTML (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
		<Parameter Name="raw" Type="System.IntPtr" />
	</Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of HTML, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HTML ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Creates an empty GtkHTML widget.</summary>
        <returns>The new constructed <see cref="T:Gtk.HTML" /> widget.</returns>
        <remarks>
          <para>
	    It creates an empty <see cref="T:Gtk.HTML" /> widget.  The
	    returned widget is empty, and defaults to not be editable.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The GLib Type for Gtk.HTML</summary>
        <returns>The GLib Type for the Gtk.HTML class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Editable">
      <MemberSignature Language="C#" Value="public bool Editable { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>Whether the contents can be edited.</summary>
        <param name="value">Editing state.</param>
        <returns>
          <see langword="true" /> if the contents are editable,
        <see langword="false" />otherwise. </returns>
        <remarks>
	  Whether this Gtk.HTML instance can be used as an HTML
	  editor.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphIndentation">
      <MemberSignature Language="C#" Value="public uint ParagraphIndentation { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'uint'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'string'</param>
        <returns>To be added: an object of type 'string'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'string'</param>
        <returns>To be added: an object of type 'string'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultContentType">
      <MemberSignature Language="C#" Value="public string DefaultContentType { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'string'</param>
        <returns>To be added: an object of type 'string'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphStyle">
      <MemberSignature Language="C#" Value="public Gtk.HTMLParagraphStyle ParagraphStyle { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.HTMLParagraphStyle</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'Gtk.HTMLParagraphStyle'</param>
        <returns>To be added: an object of type 'Gtk.HTMLParagraphStyle'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Blocking">
      <MemberSignature Language="C#" Value="public bool Blocking { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'bool'</param>
        <returns>To be added: an object of type 'bool'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Magnification">
      <MemberSignature Language="C#" Value="public double Magnification { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'double'</param>
        <returns>To be added: an object of type 'double'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphAlignment">
      <MemberSignature Language="C#" Value="public Gtk.HTMLParagraphAlignment ParagraphAlignment { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.HTMLParagraphAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'Gtk.HTMLParagraphAlignment'</param>
        <returns>To be added: an object of type 'Gtk.HTMLParagraphAlignment'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowFrameset">
      <MemberSignature Language="C#" Value="public bool AllowFrameset { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'bool'</param>
        <returns>To be added: an object of type 'bool'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionFontStyleChanged">
      <MemberSignature Language="C#" Value="public event GtkSharp.InsertionFontStyleChangedHandler InsertionFontStyleChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.InsertionFontStyleChangedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleChanged">
      <MemberSignature Language="C#" Value="public event GtkSharp.TitleChangedHandler TitleChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.TitleChangedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>Occurs when the title changes in HTML</summary>
        <remarks>
	  This event is raised when the HTML parser encounters the
	  &lt;title&gt; tag on the HTML stream.  To get the title, use
	  the <see cref="P:Gtk.HTML.Title" /> property.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBase">
      <MemberSignature Language="C#" Value="public event GtkSharp.SetBaseHandler SetBase;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.SetBaseHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SizeChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>System.EventHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentParagraphStyleChanged">
      <MemberSignature Language="C#" Value="public event GtkSharp.CurrentParagraphStyleChangedHandler CurrentParagraphStyleChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.CurrentParagraphStyleChangedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDone">
      <MemberSignature Language="C#" Value="public event EventHandler LoadDone;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>System.EventHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="CursorMove">
      <MemberSignature Language="C#" Value="public event GtkSharp.CursorMoveHandler CursorMove;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.CursorMoveHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>Occurs when the cursor moves.</summary>
        <remarks>
	  This event is raised when the widget is in editing mode and
	  the cursor has moved.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCommand">
      <MemberSignature Language="C#" Value="public event GtkSharp.OnCommandHandler OnCommand;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.OnCommandHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlRequested">
      <MemberSignature Language="C#" Value="public event GtkSharp.UrlRequestedHandler UrlRequested;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.UrlRequestedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>Occurs when a url is Requested</summary>
        <remarks>
          <para>
	    This event is raised when an URL is requested (typically
	    an image).  
	  </para>
          <para>
	    The following example shows how a simple HTML source that
	    requests an image (hello.png).  If the file is found, then
	    it will be streamed into the HTML widget.  The model
	    allows for data to be delivered as it comes, and when the
	    data has all arrived, the End method can be invoked on the
	    html stream provided by the <see cref="P:GtkSharp.UrlRequestedArgs.Handle" />.
	  </para>
          <example>
            <code lang="C#">
using System;
using System.IO;
using Gtk;
using GtkSharp;

class X {

        static void Main ()
        {
                Application.Init ();
                Window w = new Window ("Sample");
                HTML html = new HTML ();
                html.UrlRequested += new UrlRequestedHandler (LoadFromDisk);
                w.Add (html);
                w.ShowAll ();

                HTMLStream s = html.Begin ();
                s.Write ("&lt;html&gt;&lt;body&gt;My image: &lt;img src=\"hello.png\"&gt;&lt;/body&gt;&lt;/html&gt;");
                html.End (s, HTMLStreamStatus.Ok);
                Application.Run ();
        }

        static void LoadFromDisk (object sender, UrlRequestedArgs args)
        {
	        try {
                	FileStream s = File.OpenRead (args.Url);
                	byte [] buffer = new byte [8192];
                	int n;
			
                	while ((n = s.Read (buffer, 0, 8192)) != 0) {
                	        args.Handle.Write (buffer, n);
                	}
	      		args.Handle.Close (HTMLStreamStatus.Ok);
	        } catch {
	        	// Ignore errors.
	        }
        }
}
	    </code>
          </example>
          <para>
	    Make sure there is a "hello.png" file in your directory to
	    see it, otherwise the sample will show the "broken image
	    link" image.
	  </para>
          <para>
	    mcs sample.cs -r:gtk-sharp
	  </para>
          <para>
	    mono sample.exe
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IframeCreated">
      <MemberSignature Language="C#" Value="public event GtkSharp.IframeCreatedHandler IframeCreated;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.IframeCreatedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event GtkSharp.ScrollHandler Scroll;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.ScrollHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentParagraphIndentationChanged">
      <MemberSignature Language="C#" Value="public event GtkSharp.CurrentParagraphIndentationChangedHandler CurrentParagraphIndentationChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.CurrentParagraphIndentationChangedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentParagraphAlignmentChanged">
      <MemberSignature Language="C#" Value="public event GtkSharp.CurrentParagraphAlignmentChangedHandler CurrentParagraphAlignmentChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.CurrentParagraphAlignmentChangedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionColorChanged">
      <MemberSignature Language="C#" Value="public event GtkSharp.InsertionColorChangedHandler InsertionColorChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.InsertionColorChangedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkClicked">
      <MemberSignature Language="C#" Value="public event GtkSharp.LinkClickedHandler LinkClicked;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.LinkClickedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>Occurs when the user clicks on a hyperlink</summary>
        <remarks>
          <para>
	    This event is raised when the user clicks on a hyperlink
	    in the HTML widget.
	  </para>
          <example>
            <code lang="C#">
using System;
using System.IO;
using Gtk;
using GtkSharp;

class X {

        static void Main ()
        {
                Application.Init ();
                Window w = new Window ("Sample");
                HTML html = new HTML ("&lt;html&gt;&lt;body&gt;Click &lt;a href=\"http://www.go-mono.com\"&gt;me&lt;/a&gt;");
                html.LinkClicked += new LinkClickedHandler (OnLinkClicked);
                w.Add (html);
                w.ShowAll ();
                Application.Run ();
        }

        static void OnLinkClicked (object o, LinkClickedArgs args)
        {
                Console.WriteLine ("The link clicked url is: " + args.Url);
        }
}
	    </code>
          </example>
          <para>
	    mcs sample.cs -r:gtk-sharp
	  </para>
          <para>
	    mono sample.exe
	  </para>
          <para>
	    Click on the "me" link to see the message on the console.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Submit">
      <MemberSignature Language="C#" Value="public event GtkSharp.SubmitHandler Submit;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.SubmitHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Redirect">
      <MemberSignature Language="C#" Value="public event GtkSharp.RedirectHandler Redirect;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.RedirectHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUrl">
      <MemberSignature Language="C#" Value="public event GtkSharp.OnUrlHandler OnUrl;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.OnUrlHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>Occurs when the user hovers over a hyper-link.</summary>
        <remarks>
          <para>
	    This event is raised when the mouse pointer hovers over a
	    hyper link or leaves a link.  In the former case the value
	    of <see cref="P:GtkSharp.OnUrlHandler.Url" /> is the link
	    target, and in the later the empty string.
	  </para>
          <example>
            <code lang="C#">
using System;
using System.IO;
using Gtk;
using GtkSharp;

class X {

        static void Main ()
        {
                Application.Init ();
                Window w = new Window ("Sample");
                HTML html = new HTML ("&lt;html&gt;&lt;body&gt;Click &lt;a href=\"http://www.go-mono.com\"&gt;me&lt;/a&gt;");
                html.OnUrl += new OnUrlHandler (OnUrl);
                w.Add (html);
                w.ShowAll ();
                Application.Run ();
        }

        static void OnUrl (object o, OnUrlArgs args)
        {
                Console.WriteLine ("The mouse is over: " + args.Url);
        }
}
	    </code>
          </example>
          <para>
	    mcs sample.cs -r:gtk-sharp
	  </para>
          <para>
	    mono sample.exe
	  </para>
          <para>
	    Hover in and out of the link to see the effects on the console.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBaseTarget">
      <MemberSignature Language="C#" Value="public event GtkSharp.SetBaseTargetHandler SetBaseTarget;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.SetBaseTargetHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromString">
      <MemberSignature Language="C#" Value="public void LoadFromString (string str);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="str" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="str">To be added: an object of type 'string'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HTML (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
		<Parameter Name="gtype" Type="GLib.Type" />
	</Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">GLib type for the type</param>
        <returns>Creates a new instance of HTML, using the GLib-provided type</returns>
        <remarks>
          <para>This is a constructor used by derivative types of <see cref="T:Gtk.HTML" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HTML (string Astr);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
		<Parameter Name="Astr" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="Astr">To be added: an object of type 'string'</param>
        <returns>To be added: an object of type 'Gtk.HTML'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentBase">
      <MemberSignature Language="C#" Value="public string DocumentBase { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'string'</param>
        <returns>To be added: an object of type 'string'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetBase">
      <MemberSignature Language="C#" Value="public string TargetBase { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">To be added: an object of type 'string'</param>
        <returns>To be added: an object of type 'string'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="MagicLinks">
      <MemberSignature Language="C#" Value="public bool MagicLinks { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="MagicSmileys">
      <MemberSignature Language="C#" Value="public bool MagicSmileys { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Animate">
      <MemberSignature Language="C#" Value="public bool Animate { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="InlineSpelling">
      <MemberSignature Language="C#" Value="public bool InlineSpelling { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
