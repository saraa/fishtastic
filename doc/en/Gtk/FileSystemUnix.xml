<Type Name="FileSystemUnix" FullName="Gtk.FileSystemUnix">
  <TypeSignature Language="C#" Value="public class FileSystemUnix : GLib.Object, FileSystem, IWrapper, IDisposable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 71 EB 6C 55 75 52 9C BF 72 44 F7 A6 EA 05 62 84 F9 EA E0 3B CF F2 CC 13 2C 9C 49 0A B3 09 EA B0 B5 6B CE 44 9D F5 03 D9 C0 A8 1E 52 05 85 CD BE 70 E2 FB 90 43 4B AC 04 FA 62 22 A8 00 98 B7 A1 A7 B3 AF 99 1A 41 23 24 BB 43 25 F6 B8 65 BB 64 EB F6 D1 C2 06 D5 73 2D DF BC 70 A7 38 9E E5 3E 0C 24 6E 32 79 74 1A D0 05 03 E4 98 42 E1 9B F3 7B 19 8B 40 21 26 CB 36 89 C2 EA 64 96 A4 7C B4]</AssemblyPublicKey>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Filesystem interface layer for Unix-style systems.</summary>
    <remarks></remarks>
  </Docs>
  <Base>
    <BaseTypeName>GLib.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gtk.FileSystem</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with this <see cref="T:Gtk.FileSystemUnix" /> object.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListBookmarks">
      <MemberSignature Language="C#" Value="public virtual GLib.SList ListBookmarks ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>GLib.SList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Queries the list of bookmarks in the file system.</summary>
        <returns>a <see cref="T:GLib.SList" />, a list of 
	  <see cref="T:Gtk.FilePath"/> objects, or 
	  <see langword="null"/> if there are no configured bookmarks.</returns>
        <remarks>
	  See also <see cref="M:Gtk.FileSystem.RemoveBookmark"/>.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveBookmark">
      <MemberSignature Language="C#" Value="public virtual bool RemoveBookmark (Gtk.FilePath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
      </Parameters>
      <Docs>
        <summary>
	  Removes a bookmark folder from the user's bookmarks list.  
	</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
	  If the operation succeeds, the 
	  <see cref="E:Gtk.FileSystem.BookmarksChanged"/> 
	  signal will be emitted.  If you try to remove
	  a <paramref name="path"/> which does not exist in the bookmarks 
	  list, the operation will fail and an exception will be thrown.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public virtual bool GetParent (Gtk.FilePath path, Gtk.FilePath parent);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
        <Parameter Name="parent" Type="Gtk.FilePath" />
      </Parameters>
      <Docs>
        <summary>
	  Gets the name of the parent folder of a path. 
	</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <param name="parent">a <see cref="T:Gtk.FilePath" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
	  If the path has no parent, as when you request the parent of a file system root, 
	  then <paramref name="parent"/> will be set to <see langword="null"/>.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakePath">
      <MemberSignature Language="C#" Value="public virtual Gtk.FilePath MakePath (Gtk.FilePath base_path, string display_name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.FilePath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base_path" Type="Gtk.FilePath" />
        <Parameter Name="display_name" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
	  Makes a new path called <paramref name="display_name"/>
	  starting from path <paramref name="base_path"/>.
	</summary>
        <param name="base_path">a <see cref="T:Gtk.FilePath" /></param>
        <param name="display_name">a <see cref="T:System.String" /></param>
        <returns>a <see cref="T:Gtk.FilePath" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFolder">
      <MemberSignature Language="C#" Value="public virtual Gtk.FileFolder GetFolder (Gtk.FilePath path, Gtk.FileInfoType types);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.FileFolder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
        <Parameter Name="types" Type="Gtk.FileInfoType" />
      </Parameters>
      <Docs>
        <summary>Gets an object to represent the folder at path <paramref name="path"/>.</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <param name="types">a <see cref="T:System.Int32" /></param>
        <returns>a <see cref="T:Gtk.FileFolder" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PathToFilename">
      <MemberSignature Language="C#" Value="public virtual string PathToFilename (Gtk.FilePath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
      </Parameters>
      <Docs>
        <summary>Converts <paramref name="path"/> to a filename string.</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <returns>a <see cref="T:System.String" />, or <see langword="null"/>
	if the path is not local.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="UriToPath">
      <MemberSignature Language="C#" Value="public virtual Gtk.FilePath UriToPath (string uri);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.FilePath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Converts a URI to a <see cref="T:Gtk.FilePath" /> object.</summary>
        <param name="uri">a <see cref="T:System.String" /></param>
        <returns>a <see cref="T:Gtk.FilePath" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PathToUri">
      <MemberSignature Language="C#" Value="public virtual string PathToUri (Gtk.FilePath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
      </Parameters>
      <Docs>
        <summary>Converts <paramref name="path"/> to a URI.</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <returns>a <see cref="T:System.String" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVolumeForPath">
      <MemberSignature Language="C#" Value="public virtual Gtk.FileSystemVolume GetVolumeForPath (Gtk.FilePath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.FileSystemVolume</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
      </Parameters>
      <Docs>
        <summary>
	  Determines what volume of the filesystem 
	  <paramref name="path"/> is located on.
	</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <returns>a <see cref="T:Gtk.FileSystemVolume" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilenameToPath">
      <MemberSignature Language="C#" Value="public virtual Gtk.FilePath FilenameToPath (string filename);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.FilePath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Converts <paramref name="filename"/> into a <see cref="T:Gtk.FilePath" />.</summary>
        <param name="filename">a <see cref="T:System.String" /></param>
        <returns>a <see cref="T:Gtk.FilePath" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderIcon">
      <MemberSignature Language="C#" Value="public virtual Gdk.Pixbuf RenderIcon (Gtk.FilePath path, Gtk.Widget widget, int pixel_size);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gdk.Pixbuf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
        <Parameter Name="widget" Type="Gtk.Widget" />
        <Parameter Name="pixel_size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <summary>Returns an icon to represent this filesystem.</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <param name="widget">a <see cref="T:Gtk.Widget" /></param>
        <param name="pixel_size">a <see cref="T:System.Int32" /></param>
        <returns>a <see cref="T:Gdk.Pixbuf" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertBookmark">
      <MemberSignature Language="C#" Value="public virtual bool InsertBookmark (Gtk.FilePath path, int position);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <summary>
	  Adds a path for a folder to the user's bookmarks list.  
	</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <param name="position">a <see cref="T:System.Int32" />, index in 
	  the bookmarks list at which the <paramref name="path"/> should 
	  be inserted; use 0 for the beginning, and -1 or the number of 
	  bookmarks itself for the end of the list.</param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
	  <para>If the operation
	    succeeds, the <see cref="E:Gtk.FileSystem.BookmarksChanged"/>
	    signal will be emitted.  Bookmark paths are
	    unique; if you try to insert a <paramref name="path"/> that 
	    already exists, the operation will fail and an exception will 
	    be thrown.</para>
	  <para>To reorder the list of bookmarks, use
	    <see cref="M:Gtk.FileSystem.RemoveBookmark"/> to
	    remove the path in question, and call 
	    <see cref="M:Gtk.FileSystem.InsertBookmark"/> with
	    the new position for the path.</para>
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathIsLocal">
      <MemberSignature Language="C#" Value="public virtual bool PathIsLocal (Gtk.FilePath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
      </Parameters>
      <Docs>
        <summary>Checks to see whether a path is local; that is,
	whether <see cref="M:Gtk.FileSystem.PathToFilename"/> would
	return non-<see langword="null"/>.</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ListVolumes">
      <MemberSignature Language="C#" Value="public virtual GLib.SList ListVolumes ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>GLib.SList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a list of all the <see cref="T:Gtk.FileSystemVolume"/>s
	on the system.</summary>
        <returns>a <see cref="T:GLib.SList" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual bool Parse (Gtk.FilePath base_path, string str, Gtk.FilePath folder, string file_part);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base_path" Type="Gtk.FilePath" />
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="folder" Type="Gtk.FilePath" />
        <Parameter Name="file_part" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
	  Given a string entered by a user, parse it (possibly using
	  heuristics) into a folder path and a UTF-8 encoded
	  filename part suitable for passing to 
	  <see cref="M:Gtk.FileSystem.MakePath"/>.
	</summary>
        <param name="base_path">a <see cref="T:Gtk.FilePath" />, reference folder with respect to which relative paths should be interpreted.</param>
        <param name="str">a <see cref="T:System.String" />, the string to parse</param>
        <param name="folder">a <see cref="T:Gtk.FilePath" />, a location to store folder portion of result, or <see langword="null"/></param>
        <param name="file_part">a <see cref="T:System.String" />, location to store file portion of result, or <see langword="null"/></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
	  <para>
	    Note that the returned filename point may point to a subfolder
	    of the returned folder. Adding a trailing path separator is needed
	    to enforce the interpretation as a folder name.
	  </para>
	  <para>
	    If parsing fails because the syntax of <paramref name="str"/> is not understood,
	    an exception <see cref="Gtk.FileSystemError.BadFilename"/> will
	    be thrown and <see langword="false"/> returned.
	  </para>
	  <para>
	    If parsing fails because a path was encountered that doesn't
	    exist on the filesystem, then an exception
	    <see cref="Gtk.FileSystemError.Nonexistent"/> will be thrown
	    and <see langword="false"/> returned. 
	    (This only applies to parsing relative paths,
	    not to interpretation of <paramref name="file_part"/>. No check is made as
	    to whether <paramref name="file_part"/> exists.)
	  </para>	</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFolder">
      <MemberSignature Language="C#" Value="public virtual bool CreateFolder (Gtk.FilePath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Gtk.FilePath" />
      </Parameters>
      <Docs>
        <summary>Makes a new folder at <paramref name="path"/>.</summary>
        <param name="path">a <see cref="T:Gtk.FilePath" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVolumesChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVolumesChanged ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.FileSystemUnix.VolumesChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.FileSystemUnix.VolumesChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBookmarksChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBookmarksChanged ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.FileSystemUnix.BookmarksChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.FileSystemUnix.BookmarksChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileSystemUnix (GLib.GType gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>Protected Constructor.</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <returns>a <see cref="T:Gtk.FileSystemUnix" /></returns>
        <remarks>Chain to this constructor if you have manually registered a native <see cref="T:GLib.GType" /> value for your subclass.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemUnix (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">a <see cref="T:System.IntPtr" /></param>
        <returns>a <see cref="T:Gtk.FileSystemUnix" /></returns>
        <remarks>This is not typically used by C# code.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemUnix ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Public constructor.</summary>
        <returns>a <see cref="T:Gtk.FileSystemUnix" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GType Property.</summary>
        <returns>a <see cref="T:GLib.GType" /></returns>
        <remarks>Returns the native <see cref="T:GLib.GType" /> value for <see cref="T:Gtk.FileSystemUnix" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VolumesChanged">
      <MemberSignature Language="C#" Value="public virtual event EventHandler VolumesChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a related <see cref="M:Gtk.FileSystemVolume"/>
	is mounted.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="BookmarksChanged">
      <MemberSignature Language="C#" Value="public virtual event EventHandler BookmarksChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Event fired whenever the bookmarks to particular locations change.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
