<Type Name="DelegateWrapper" FullName="GLib.DelegateWrapper">
  <TypeSignature Language="C#" Value="public class DelegateWrapper" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>glib-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Wrapper class for delegates.</summary>
    <remarks></remarks>
  </Docs>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes />
  <Members>
    <Member MemberName="RemoveIfNotAlive">
      <MemberSignature Language="C#" Value="protected bool RemoveIfNotAlive ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>IMPORTANT: this method must be the first one called from the callback methods that are invoked from unmanaged code.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>If this method returns <see langword="true" />, the object that created the delegate wrapper no longer exists and the instance of the delegate itself is removed from the hash table.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DelegateWrapper (object o);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <summary>The <paramref name="o" /> is the object that creates the instance of the DelegateWrapper derived class or null if created from a static method.</summary>
        <param name="o">a <see cref="T:System.Object" /></param>
        <returns>a <see cref="T:GLib.DelegateWrapper" /></returns>
        <remarks>Note that the instances will never be disposed if they are created in a static method.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>