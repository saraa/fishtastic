//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("gtksharpglue")]
		private static extern int gtksharp_gtk_selection_data_get_format (IntPtr selection_data);

		public int Format {
			get {
				return gtksharp_gtk_selection_data_get_format (Handle);
			}
		}

		[DllImport("gtksharpglue")]
		private static extern int gtksharp_gtk_selection_data_get_length (IntPtr selection_data);

		public int Length {
			get {
				return gtksharp_gtk_selection_data_get_length (Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		private static extern IntPtr gtk_selection_data_get_text (IntPtr selection_data);

		[DllImport("libgtk-win32-2.0-0.dll")]
		private static extern void gtk_selection_data_set_text (IntPtr selection_data, string str, int len);

		public string Text {
			get {
				IntPtr text = gtk_selection_data_get_text (Handle);
				if (text == IntPtr.Zero)
					return null;
				return GLib.Marshaller.PtrToStringGFree (text);
			}
			set {
				gtk_selection_data_set_text (Handle, value, value.Length);
			}
		}

		[DllImport("gtksharpglue")]
		private static extern IntPtr gtksharp_gtk_selection_data_get_data_pointer (IntPtr selection_data);

		public byte[] Data {
			get {
				IntPtr data_ptr = gtksharp_gtk_selection_data_get_data_pointer (Handle);
				byte[] result = new byte [Length];
				Marshal.Copy (data_ptr, result, 0, Length);
				return result;
			}
		}

		public void Set(Gdk.Atom type, int format, byte[] data) {
			Set(type, format, data, data.Length);
		}

