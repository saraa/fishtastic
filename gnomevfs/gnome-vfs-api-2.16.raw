<?xml version="1.0"?>
<api>
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="GnomeVFS" library="gnomevfs-2">
    <enum name="DvdArgumentType" cname="DvdArgumentType" type="enum">
      <member cname="DVD_TYPE_LAST" name="Last" value="-1" />
      <member cname="DVD_TYPE_URI" name="Uri" />
      <member cname="DVD_TYPE_STRING" name="String" />
      <member cname="DVD_TYPE_INT32" name="Int32" />
      <member cname="DVD_TYPE_INT64" name="Int64" />
      <member cname="DVD_TYPE_UINT64" name="Uint64" />
      <member cname="DVD_TYPE_FILE_INFO" name="FileInfo" />
      <member cname="DVD_TYPE_BOOL" name="Bool" />
      <member cname="DVD_TYPE_BYTE_ARRAY" name="ByteArray" />
    </enum>
    <enum name="DNSSDServiceStatus" cname="GnomeVFSDNSSDServiceStatus" type="enum">
      <member cname="GNOME_VFS_DNS_SD_SERVICE_ADDED" name="Added" />
      <member cname="GNOME_VFS_DNS_SD_SERVICE_REMOVED" name="Removed" />
    </enum>
    <enum name="DeviceType" cname="GnomeVFSDeviceType" type="enum">
      <member cname="GNOME_VFS_DEVICE_TYPE_UNKNOWN" name="Unknown" />
      <member cname="GNOME_VFS_DEVICE_TYPE_AUDIO_CD" name="AudioCd" />
      <member cname="GNOME_VFS_DEVICE_TYPE_VIDEO_DVD" name="VideoDvd" />
      <member cname="GNOME_VFS_DEVICE_TYPE_HARDDRIVE" name="Harddrive" />
      <member cname="GNOME_VFS_DEVICE_TYPE_CDROM" name="Cdrom" />
      <member cname="GNOME_VFS_DEVICE_TYPE_FLOPPY" name="Floppy" />
      <member cname="GNOME_VFS_DEVICE_TYPE_ZIP" name="Zip" />
      <member cname="GNOME_VFS_DEVICE_TYPE_JAZ" name="Jaz" />
      <member cname="GNOME_VFS_DEVICE_TYPE_NFS" name="Nfs" />
      <member cname="GNOME_VFS_DEVICE_TYPE_AUTOFS" name="Autofs" />
      <member cname="GNOME_VFS_DEVICE_TYPE_CAMERA" name="Camera" />
      <member cname="GNOME_VFS_DEVICE_TYPE_MEMORY_STICK" name="MemoryStick" />
      <member cname="GNOME_VFS_DEVICE_TYPE_SMB" name="Smb" />
      <member cname="GNOME_VFS_DEVICE_TYPE_APPLE" name="Apple" />
      <member cname="GNOME_VFS_DEVICE_TYPE_MUSIC_PLAYER" name="MusicPlayer" />
      <member cname="GNOME_VFS_DEVICE_TYPE_WINDOWS" name="Windows" />
      <member cname="GNOME_VFS_DEVICE_TYPE_LOOPBACK" name="Loopback" />
      <member cname="GNOME_VFS_DEVICE_TYPE_NETWORK" name="Network" />
    </enum>
    <enum name="DirectoryVisitOptions" cname="GnomeVFSDirectoryVisitOptions" type="flags">
      <member cname="GNOME_VFS_DIRECTORY_VISIT_DEFAULT" name="Default" />
      <member cname="GNOME_VFS_DIRECTORY_VISIT_SAMEFS" name="Samefs" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_DIRECTORY_VISIT_LOOPCHECK" name="Loopcheck" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="FileFlags" cname="GnomeVFSFileFlags" type="flags">
      <member cname="GNOME_VFS_FILE_FLAGS_NONE" name="None" />
      <member cname="GNOME_VFS_FILE_FLAGS_SYMLINK" name="Symlink" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_FILE_FLAGS_LOCAL" name="Local" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="FileInfoFields" cname="GnomeVFSFileInfoFields" type="flags">
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_NONE" name="None" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_TYPE" name="Type" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_PERMISSIONS" name="Permissions" value="1 &lt;&lt; 1" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_FLAGS" name="Flags" value="1 &lt;&lt; 2" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_DEVICE" name="Device" value="1 &lt;&lt; 3" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_INODE" name="Inode" value="1 &lt;&lt; 4" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_LINK_COUNT" name="LinkCount" value="1 &lt;&lt; 5" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_SIZE" name="Size" value="1 &lt;&lt; 6" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_BLOCK_COUNT" name="BlockCount" value="1 &lt;&lt; 7" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_IO_BLOCK_SIZE" name="IoBlockSize" value="1 &lt;&lt; 8" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_ATIME" name="Atime" value="1 &lt;&lt; 9" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_MTIME" name="Mtime" value="1 &lt;&lt; 10" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_CTIME" name="Ctime" value="1 &lt;&lt; 11" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_SYMLINK_NAME" name="SymlinkName" value="1 &lt;&lt; 12" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_MIME_TYPE" name="MimeType" value="1 &lt;&lt; 13" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_ACCESS" name="Access" value="1 &lt;&lt; 14" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_IDS" name="Ids" value="1 &lt;&lt; 15" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_ACL" name="Acl" value="1 &lt;&lt; 16" />
      <member cname="GNOME_VFS_FILE_INFO_FIELDS_SELINUX_CONTEXT" name="SelinuxContext" value="1 &lt;&lt; 17" />
    </enum>
    <enum name="FileInfoOptions" cname="GnomeVFSFileInfoOptions" type="flags">
      <member cname="GNOME_VFS_FILE_INFO_DEFAULT" name="Default" />
      <member cname="GNOME_VFS_FILE_INFO_GET_MIME_TYPE" name="GetMimeType" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_FILE_INFO_FORCE_FAST_MIME_TYPE" name="ForceFastMimeType" value="1 &lt;&lt; 1" />
      <member cname="GNOME_VFS_FILE_INFO_FORCE_SLOW_MIME_TYPE" name="ForceSlowMimeType" value="1 &lt;&lt; 2" />
      <member cname="GNOME_VFS_FILE_INFO_FOLLOW_LINKS" name="FollowLinks" value="1 &lt;&lt; 3" />
      <member cname="GNOME_VFS_FILE_INFO_GET_ACCESS_RIGHTS" name="GetAccessRights" value="1 &lt;&lt; 4" />
      <member cname="GNOME_VFS_FILE_INFO_NAME_ONLY" name="NameOnly" value="1 &lt;&lt; 5" />
      <member cname="GNOME_VFS_FILE_INFO_GET_ACL" name="GetAcl" value="1 &lt;&lt; 6" />
      <member cname="GNOME_VFS_FILE_INFO_GET_SELINUX_CONTEXT" name="GetSelinuxContext" value="1 &lt;&lt; 7" />
    </enum>
    <enum name="FilePermissions" cname="GnomeVFSFilePermissions" type="flags">
      <member cname="GNOME_VFS_PERM_SUID" name="Suid" value="S_ISUID" />
      <member cname="GNOME_VFS_PERM_SGID" name="Sgid" value="S_ISGID" />
      <member cname="GNOME_VFS_PERM_STICKY" name="Sticky" value="01000" />
      <member cname="GNOME_VFS_PERM_USER_READ" name="UserRead" value="S_IRUSR" />
      <member cname="GNOME_VFS_PERM_USER_WRITE" name="UserWrite" value="S_IWUSR" />
      <member cname="GNOME_VFS_PERM_USER_EXEC" name="UserExec" value="S_IXUSR" />
      <member cname="GNOME_VFS_PERM_USER_ALL" name="UserAll" value="S_IRUSR | S_IWUSR | S_IXUSR" />
      <member cname="GNOME_VFS_PERM_GROUP_READ" name="GroupRead" value="S_IRGRP" />
      <member cname="GNOME_VFS_PERM_GROUP_WRITE" name="GroupWrite" value="S_IWGRP" />
      <member cname="GNOME_VFS_PERM_GROUP_EXEC" name="GroupExec" value="S_IXGRP" />
      <member cname="GNOME_VFS_PERM_GROUP_ALL" name="GroupAll" value="S_IRGRP | S_IWGRP | S_IXGRP" />
      <member cname="GNOME_VFS_PERM_OTHER_READ" name="OtherRead" value="S_IROTH" />
      <member cname="GNOME_VFS_PERM_OTHER_WRITE" name="OtherWrite" value="S_IWOTH" />
      <member cname="GNOME_VFS_PERM_OTHER_EXEC" name="OtherExec" value="S_IXOTH" />
      <member cname="GNOME_VFS_PERM_OTHER_ALL" name="OtherAll" value="S_IROTH | S_IWOTH | S_IXOTH" />
      <member cname="GNOME_VFS_PERM_ACCESS_READABLE" name="AccessReadable" value="1 &lt;&lt; 16" />
      <member cname="GNOME_VFS_PERM_ACCESS_WRITABLE" name="AccessWritable" value="1 &lt;&lt; 17" />
      <member cname="GNOME_VFS_PERM_ACCESS_EXECUTABLE" name="AccessExecutable" value="1 &lt;&lt; 18" />
    </enum>
    <enum name="FileType" cname="GnomeVFSFileType" type="enum">
      <member cname="GNOME_VFS_FILE_TYPE_UNKNOWN" name="Unknown" />
      <member cname="GNOME_VFS_FILE_TYPE_REGULAR" name="Regular" />
      <member cname="GNOME_VFS_FILE_TYPE_DIRECTORY" name="Directory" />
      <member cname="GNOME_VFS_FILE_TYPE_FIFO" name="Fifo" />
      <member cname="GNOME_VFS_FILE_TYPE_SOCKET" name="Socket" />
      <member cname="GNOME_VFS_FILE_TYPE_CHARACTER_DEVICE" name="CharacterDevice" />
      <member cname="GNOME_VFS_FILE_TYPE_BLOCK_DEVICE" name="BlockDevice" />
      <member cname="GNOME_VFS_FILE_TYPE_SYMBOLIC_LINK" name="SymbolicLink" />
    </enum>
    <enum name="FindDirectoryKind" cname="GnomeVFSFindDirectoryKind" type="enum">
      <member cname="GNOME_VFS_DIRECTORY_KIND_DESKTOP" name="Desktop" value="1000" />
      <member cname="GNOME_VFS_DIRECTORY_KIND_TRASH" name="Trash" value="1001" />
    </enum>
    <enum name="MakeURIDirs" cname="GnomeVFSMakeURIDirs" type="flags">
      <member cname="GNOME_VFS_MAKE_URI_DIR_NONE" name="None" />
      <member cname="GNOME_VFS_MAKE_URI_DIR_HOMEDIR" name="Homedir" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_MAKE_URI_DIR_CURRENT" name="Current" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="MimeActionType" cname="GnomeVFSMimeActionType" deprecated="1" type="enum">
      <member cname="GNOME_VFS_MIME_ACTION_TYPE_NONE" name="None" />
      <member cname="GNOME_VFS_MIME_ACTION_TYPE_APPLICATION" name="Application" />
      <member cname="GNOME_VFS_MIME_ACTION_TYPE_COMPONENT" name="Component" />
    </enum>
    <enum name="MimeApplicationArgumentType" cname="GnomeVFSMimeApplicationArgumentType" type="enum">
      <member cname="GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS" name="Uris" />
      <member cname="GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_PATHS" name="Paths" />
      <member cname="GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS_FOR_NON_FILES" name="UrisForNonFiles" />
    </enum>
    <enum name="MimeEquivalence" cname="GnomeVFSMimeEquivalence" type="enum">
      <member cname="GNOME_VFS_MIME_UNRELATED" name="Unrelated" />
      <member cname="GNOME_VFS_MIME_IDENTICAL" name="Identical" />
      <member cname="GNOME_VFS_MIME_PARENT" name="Parent" />
    </enum>
    <enum name="ModuleCallbackAuthenticationAuthType" cname="GnomeVFSModuleCallbackAuthenticationAuthType" deprecated="1" type="enum">
      <member cname="_AuthTypeBasic" name="Authtypebasic" />
      <member cname="_AuthTypeDigest" name="Authtypedigest" />
    </enum>
    <enum name="ModuleCallbackFullAuthenticationFlags" cname="GnomeVFSModuleCallbackFullAuthenticationFlags" type="flags">
      <member cname="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_PREVIOUS_ATTEMPT_FAILED" name="PreviousAttemptFailed" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_NEED_PASSWORD" name="NeedPassword" value="1 &lt;&lt; 1" />
      <member cname="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_NEED_USERNAME" name="NeedUsername" value="1 &lt;&lt; 2" />
      <member cname="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_NEED_DOMAIN" name="NeedDomain" value="1 &lt;&lt; 3" />
      <member cname="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_SAVING_SUPPORTED" name="SavingSupported" value="1 &lt;&lt; 4" />
      <member cname="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_ANON_SUPPORTED" name="AnonSupported" value="1 &lt;&lt; 5" />
    </enum>
    <enum name="ModuleCallbackFullAuthenticationOutFlags" cname="GnomeVFSModuleCallbackFullAuthenticationOutFlags" type="flags">
      <member cname="GNOME_VFS_MODULE_CALLBACK_FULL_AUTHENTICATION_OUT_ANON_SELECTED" name="Selected" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="MonitorEventType" cname="GnomeVFSMonitorEventType" type="enum">
      <member cname="GNOME_VFS_MONITOR_EVENT_CHANGED" name="Changed" />
      <member cname="GNOME_VFS_MONITOR_EVENT_DELETED" name="Deleted" />
      <member cname="GNOME_VFS_MONITOR_EVENT_STARTEXECUTING" name="Startexecuting" />
      <member cname="GNOME_VFS_MONITOR_EVENT_STOPEXECUTING" name="Stopexecuting" />
      <member cname="GNOME_VFS_MONITOR_EVENT_CREATED" name="Created" />
      <member cname="GNOME_VFS_MONITOR_EVENT_METADATA_CHANGED" name="MetadataChanged" />
    </enum>
    <enum name="MonitorType" cname="GnomeVFSMonitorType" type="enum">
      <member cname="GNOME_VFS_MONITOR_FILE" name="File" />
      <member cname="GNOME_VFS_MONITOR_DIRECTORY" name="Directory" />
    </enum>
    <enum name="OpenMode" cname="GnomeVFSOpenMode" type="flags">
      <member cname="GNOME_VFS_OPEN_NONE" name="None" />
      <member cname="GNOME_VFS_OPEN_READ" name="Read" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_OPEN_WRITE" name="Write" value="1 &lt;&lt; 1" />
      <member cname="GNOME_VFS_OPEN_RANDOM" name="Random" value="1 &lt;&lt; 2" />
      <member cname="GNOME_VFS_OPEN_TRUNCATE" name="Truncate" value="1 &lt;&lt; 3" />
    </enum>
    <enum name="Result" cname="GnomeVFSResult" type="enum">
      <member cname="GNOME_VFS_OK" name="Ok" />
      <member cname="GNOME_VFS_ERROR_NOT_FOUND" name="ErrorNotFound" />
      <member cname="GNOME_VFS_ERROR_GENERIC" name="ErrorGeneric" />
      <member cname="GNOME_VFS_ERROR_INTERNAL" name="ErrorInternal" />
      <member cname="GNOME_VFS_ERROR_BAD_PARAMETERS" name="ErrorBadParameters" />
      <member cname="GNOME_VFS_ERROR_NOT_SUPPORTED" name="ErrorNotSupported" />
      <member cname="GNOME_VFS_ERROR_IO" name="ErrorIo" />
      <member cname="GNOME_VFS_ERROR_CORRUPTED_DATA" name="ErrorCorruptedData" />
      <member cname="GNOME_VFS_ERROR_WRONG_FORMAT" name="ErrorWrongFormat" />
      <member cname="GNOME_VFS_ERROR_BAD_FILE" name="ErrorBadFile" />
      <member cname="GNOME_VFS_ERROR_TOO_BIG" name="ErrorTooBig" />
      <member cname="GNOME_VFS_ERROR_NO_SPACE" name="ErrorNoSpace" />
      <member cname="GNOME_VFS_ERROR_READ_ONLY" name="ErrorReadOnly" />
      <member cname="GNOME_VFS_ERROR_INVALID_URI" name="ErrorInvalidUri" />
      <member cname="GNOME_VFS_ERROR_NOT_OPEN" name="ErrorNotOpen" />
      <member cname="GNOME_VFS_ERROR_INVALID_OPEN_MODE" name="ErrorInvalidOpenMode" />
      <member cname="GNOME_VFS_ERROR_ACCESS_DENIED" name="ErrorAccessDenied" />
      <member cname="GNOME_VFS_ERROR_TOO_MANY_OPEN_FILES" name="ErrorTooManyOpenFiles" />
      <member cname="GNOME_VFS_ERROR_EOF" name="ErrorEof" />
      <member cname="GNOME_VFS_ERROR_NOT_A_DIRECTORY" name="ErrorNotADirectory" />
      <member cname="GNOME_VFS_ERROR_IN_PROGRESS" name="ErrorInProgress" />
      <member cname="GNOME_VFS_ERROR_INTERRUPTED" name="ErrorInterrupted" />
      <member cname="GNOME_VFS_ERROR_FILE_EXISTS" name="ErrorFileExists" />
      <member cname="GNOME_VFS_ERROR_LOOP" name="ErrorLoop" />
      <member cname="GNOME_VFS_ERROR_NOT_PERMITTED" name="ErrorNotPermitted" />
      <member cname="GNOME_VFS_ERROR_IS_DIRECTORY" name="ErrorIsDirectory" />
      <member cname="GNOME_VFS_ERROR_NO_MEMORY" name="ErrorNoMemory" />
      <member cname="GNOME_VFS_ERROR_HOST_NOT_FOUND" name="ErrorHostNotFound" />
      <member cname="GNOME_VFS_ERROR_INVALID_HOST_NAME" name="ErrorInvalidHostName" />
      <member cname="GNOME_VFS_ERROR_HOST_HAS_NO_ADDRESS" name="ErrorHostHasNoAddress" />
      <member cname="GNOME_VFS_ERROR_LOGIN_FAILED" name="ErrorLoginFailed" />
      <member cname="GNOME_VFS_ERROR_CANCELLED" name="ErrorCancelled" />
      <member cname="GNOME_VFS_ERROR_DIRECTORY_BUSY" name="ErrorDirectoryBusy" />
      <member cname="GNOME_VFS_ERROR_DIRECTORY_NOT_EMPTY" name="ErrorDirectoryNotEmpty" />
      <member cname="GNOME_VFS_ERROR_TOO_MANY_LINKS" name="ErrorTooManyLinks" />
      <member cname="GNOME_VFS_ERROR_READ_ONLY_FILE_SYSTEM" name="ErrorReadOnlyFileSystem" />
      <member cname="GNOME_VFS_ERROR_NOT_SAME_FILE_SYSTEM" name="ErrorNotSameFileSystem" />
      <member cname="GNOME_VFS_ERROR_NAME_TOO_LONG" name="ErrorNameTooLong" />
      <member cname="GNOME_VFS_ERROR_SERVICE_NOT_AVAILABLE" name="ErrorServiceNotAvailable" />
      <member cname="GNOME_VFS_ERROR_SERVICE_OBSOLETE" name="ErrorServiceObsolete" />
      <member cname="GNOME_VFS_ERROR_PROTOCOL_ERROR" name="ErrorProtocolError" />
      <member cname="GNOME_VFS_ERROR_NO_MASTER_BROWSER" name="ErrorNoMasterBrowser" />
      <member cname="GNOME_VFS_ERROR_NO_DEFAULT" name="ErrorNoDefault" />
      <member cname="GNOME_VFS_ERROR_NO_HANDLER" name="ErrorNoHandler" />
      <member cname="GNOME_VFS_ERROR_PARSE" name="ErrorParse" />
      <member cname="GNOME_VFS_ERROR_LAUNCH" name="ErrorLaunch" />
      <member cname="GNOME_VFS_ERROR_TIMEOUT" name="ErrorTimeout" />
      <member cname="GNOME_VFS_ERROR_NAMESERVER" name="ErrorNameserver" />
      <member cname="GNOME_VFS_ERROR_LOCKED" name="ErrorLocked" />
      <member cname="GNOME_VFS_ERROR_DEPRECATED_FUNCTION" name="ErrorDeprecatedFunction" />
      <member cname="GNOME_VFS_NUM_ERRORS" name="NumErrors" />
    </enum>
    <enum name="SeekPosition" cname="GnomeVFSSeekPosition" type="enum">
      <member cname="GNOME_VFS_SEEK_START" name="Start" />
      <member cname="GNOME_VFS_SEEK_CURRENT" name="Current" />
      <member cname="GNOME_VFS_SEEK_END" name="End" />
    </enum>
    <enum name="SetFileInfoMask" cname="GnomeVFSSetFileInfoMask" type="flags">
      <member cname="GNOME_VFS_SET_FILE_INFO_NONE" name="None" />
      <member cname="GNOME_VFS_SET_FILE_INFO_NAME" name="Name" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_SET_FILE_INFO_PERMISSIONS" name="Permissions" value="1 &lt;&lt; 1" />
      <member cname="GNOME_VFS_SET_FILE_INFO_OWNER" name="Owner" value="1 &lt;&lt; 2" />
      <member cname="GNOME_VFS_SET_FILE_INFO_TIME" name="Time" value="1 &lt;&lt; 3" />
      <member cname="GNOME_VFS_SET_FILE_INFO_ACL" name="Acl" value="1 &lt;&lt; 4" />
      <member cname="GNOME_VFS_SET_FILE_INFO_SELINUX_CONTEXT" name="SelinuxContext" value="1 &lt;&lt; 5" />
    </enum>
    <enum name="URIHideOptions" cname="GnomeVFSURIHideOptions" type="flags">
      <member cname="GNOME_VFS_URI_HIDE_NONE" name="None" />
      <member cname="GNOME_VFS_URI_HIDE_USER_NAME" name="UserName" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_URI_HIDE_PASSWORD" name="Password" value="1 &lt;&lt; 1" />
      <member cname="GNOME_VFS_URI_HIDE_HOST_NAME" name="HostName" value="1 &lt;&lt; 2" />
      <member cname="GNOME_VFS_URI_HIDE_HOST_PORT" name="HostPort" value="1 &lt;&lt; 3" />
      <member cname="GNOME_VFS_URI_HIDE_TOPLEVEL_METHOD" name="ToplevelMethod" value="1 &lt;&lt; 4" />
      <member cname="GNOME_VFS_URI_HIDE_FRAGMENT_IDENTIFIER" name="FragmentIdentifier" value="1 &lt;&lt; 8" />
    </enum>
    <enum name="VolumeType" cname="GnomeVFSVolumeType" type="enum">
      <member cname="GNOME_VFS_VOLUME_TYPE_MOUNTPOINT" name="Mountpoint" />
      <member cname="GNOME_VFS_VOLUME_TYPE_VFS_MOUNT" name="VfsMount" />
      <member cname="GNOME_VFS_VOLUME_TYPE_CONNECTED_SERVER" name="ConnectedServer" />
    </enum>
    <enum name="XferErrorAction" cname="GnomeVFSXferErrorAction" type="enum">
      <member cname="GNOME_VFS_XFER_ERROR_ACTION_ABORT" name="Abort" />
      <member cname="GNOME_VFS_XFER_ERROR_ACTION_RETRY" name="Retry" value="1" />
      <member cname="GNOME_VFS_XFER_ERROR_ACTION_SKIP" name="Skip" value="2" />
    </enum>
    <enum name="XferErrorMode" cname="GnomeVFSXferErrorMode" type="enum">
      <member cname="GNOME_VFS_XFER_ERROR_MODE_ABORT" name="Abort" />
      <member cname="GNOME_VFS_XFER_ERROR_MODE_QUERY" name="Query" value="1" />
    </enum>
    <enum name="XferOptions" cname="GnomeVFSXferOptions" type="flags">
      <member cname="GNOME_VFS_XFER_DEFAULT" name="Default" />
      <member cname="GNOME_VFS_XFER_UNUSED_1" name="Unused1" value="1 &lt;&lt; 0" />
      <member cname="GNOME_VFS_XFER_FOLLOW_LINKS" name="FollowLinks" value="1 &lt;&lt; 1" />
      <member cname="GNOME_VFS_XFER_UNUSED_2" name="Unused2" value="1 &lt;&lt; 2" />
      <member cname="GNOME_VFS_XFER_RECURSIVE" name="Recursive" value="1 &lt;&lt; 3" />
      <member cname="GNOME_VFS_XFER_SAMEFS" name="Samefs" value="1 &lt;&lt; 4" />
      <member cname="GNOME_VFS_XFER_DELETE_ITEMS" name="DeleteItems" value="1 &lt;&lt; 5" />
      <member cname="GNOME_VFS_XFER_EMPTY_DIRECTORIES" name="EmptyDirectories" value="1 &lt;&lt; 6" />
      <member cname="GNOME_VFS_XFER_NEW_UNIQUE_DIRECTORY" name="NewUniqueDirectory" value="1 &lt;&lt; 7" />
      <member cname="GNOME_VFS_XFER_REMOVESOURCE" name="Removesource" value="1 &lt;&lt; 8" />
      <member cname="GNOME_VFS_XFER_USE_UNIQUE_NAMES" name="UseUniqueNames" value="1 &lt;&lt; 9" />
      <member cname="GNOME_VFS_XFER_LINK_ITEMS" name="LinkItems" value="1 &lt;&lt; 10" />
      <member cname="GNOME_VFS_XFER_FOLLOW_LINKS_RECURSIVE" name="FollowLinksRecursive" value="1 &lt;&lt; 11" />
      <member cname="GNOME_VFS_XFER_TARGET_DEFAULT_PERMS" name="TargetDefaultPerms" value="1 &lt;&lt; 12" />
    </enum>
    <enum name="XferOverwriteAction" cname="GnomeVFSXferOverwriteAction" type="enum">
      <member cname="GNOME_VFS_XFER_OVERWRITE_ACTION_ABORT" name="Abort" />
      <member cname="GNOME_VFS_XFER_OVERWRITE_ACTION_REPLACE" name="Replace" value="1" />
      <member cname="GNOME_VFS_XFER_OVERWRITE_ACTION_REPLACE_ALL" name="ReplaceAll" value="2" />
      <member cname="GNOME_VFS_XFER_OVERWRITE_ACTION_SKIP" name="Skip" value="3" />
      <member cname="GNOME_VFS_XFER_OVERWRITE_ACTION_SKIP_ALL" name="SkipAll" value="4" />
    </enum>
    <enum name="XferOverwriteMode" cname="GnomeVFSXferOverwriteMode" type="enum">
      <member cname="GNOME_VFS_XFER_OVERWRITE_MODE_ABORT" name="Abort" />
      <member cname="GNOME_VFS_XFER_OVERWRITE_MODE_QUERY" name="Query" value="1" />
      <member cname="GNOME_VFS_XFER_OVERWRITE_MODE_REPLACE" name="Replace" value="2" />
      <member cname="GNOME_VFS_XFER_OVERWRITE_MODE_SKIP" name="Skip" value="3" />
    </enum>
    <enum name="XferPhase" cname="GnomeVFSXferPhase" type="enum">
      <member cname="GNOME_VFS_XFER_PHASE_INITIAL" name="PhaseInitial" />
      <member cname="GNOME_VFS_XFER_CHECKING_DESTINATION" name="CheckingDestination" />
      <member cname="GNOME_VFS_XFER_PHASE_COLLECTING" name="PhaseCollecting" />
      <member cname="GNOME_VFS_XFER_PHASE_READYTOGO" name="PhaseReadytogo" />
      <member cname="GNOME_VFS_XFER_PHASE_OPENSOURCE" name="PhaseOpensource" />
      <member cname="GNOME_VFS_XFER_PHASE_OPENTARGET" name="PhaseOpentarget" />
      <member cname="GNOME_VFS_XFER_PHASE_COPYING" name="PhaseCopying" />
      <member cname="GNOME_VFS_XFER_PHASE_MOVING" name="PhaseMoving" />
      <member cname="GNOME_VFS_XFER_PHASE_READSOURCE" name="PhaseReadsource" />
      <member cname="GNOME_VFS_XFER_PHASE_WRITETARGET" name="PhaseWritetarget" />
      <member cname="GNOME_VFS_XFER_PHASE_CLOSESOURCE" name="PhaseClosesource" />
      <member cname="GNOME_VFS_XFER_PHASE_CLOSETARGET" name="PhaseClosetarget" />
      <member cname="GNOME_VFS_XFER_PHASE_DELETESOURCE" name="PhaseDeletesource" />
      <member cname="GNOME_VFS_XFER_PHASE_SETATTRIBUTES" name="PhaseSetattributes" />
      <member cname="GNOME_VFS_XFER_PHASE_FILECOMPLETED" name="PhaseFilecompleted" />
      <member cname="GNOME_VFS_XFER_PHASE_CLEANUP" name="PhaseCleanup" />
      <member cname="GNOME_VFS_XFER_PHASE_COMPLETED" name="PhaseCompleted" />
      <member cname="GNOME_VFS_XFER_NUM_PHASES" name="NumPhases" />
    </enum>
    <enum name="XferProgressStatus" cname="GnomeVFSXferProgressStatus" type="enum">
      <member cname="GNOME_VFS_XFER_PROGRESS_STATUS_OK" name="Ok" />
      <member cname="GNOME_VFS_XFER_PROGRESS_STATUS_VFSERROR" name="Vfserror" value="1" />
      <member cname="GNOME_VFS_XFER_PROGRESS_STATUS_OVERWRITE" name="Overwrite" value="2" />
      <member cname="GNOME_VFS_XFER_PROGRESS_STATUS_DUPLICATE" name="Duplicate" value="3" />
    </enum>
    <enum name="XdgGlobType" cname="XdgGlobType" type="enum">
      <member cname="XDG_GLOB_LITERAL" name="Literal" />
      <member cname="XDG_GLOB_SIMPLE" name="Simple" />
      <member cname="XDG_GLOB_FULL" name="Full" />
    </enum>
    <callback name="AsyncCallback" cname="GnomeVFSAsyncCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncCloseCallback" cname="GnomeVFSAsyncCloseCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncCreateAsChannelCallback" cname="GnomeVFSAsyncCreateAsChannelCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GIOChannel*" name="channel" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncCreateCallback" cname="GnomeVFSAsyncCreateCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncDirectoryLoadCallback" cname="GnomeVFSAsyncDirectoryLoadCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="GList*" name="list" />
        <parameter type="guint" name="entries_read" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncFileControlCallback" cname="GnomeVFSAsyncFileControlCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="operation_data" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncFindDirectoryCallback" cname="GnomeVFSAsyncFindDirectoryCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GList*" name="results" />
        <parameter type="gpointer" name="data" />
      </parameters>
    </callback>
    <callback name="AsyncGetFileInfoCallback" cname="GnomeVFSAsyncGetFileInfoCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GList*" name="results" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncModuleCallback" cname="GnomeVFSAsyncModuleCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="gconstpointer" name="in" />
        <parameter type="gsize" name="in_size" />
        <parameter type="gpointer" name="out" />
        <parameter type="gsize" name="out_size" />
        <parameter type="gpointer" name="callback_data" />
        <parameter type="GnomeVFSModuleCallbackResponse" name="response" />
        <parameter type="gpointer" name="response_data" />
      </parameters>
    </callback>
    <callback name="AsyncOpenAsChannelCallback" cname="GnomeVFSAsyncOpenAsChannelCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GIOChannel*" name="channel" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncOpenCallback" cname="GnomeVFSAsyncOpenCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncReadCallback" cname="GnomeVFSAsyncReadCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="buffer" />
        <parameter type="GnomeVFSFileSize" name="bytes_requested" />
        <parameter type="GnomeVFSFileSize" name="bytes_read" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncSeekCallback" cname="GnomeVFSAsyncSeekCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncSetFileInfoCallback" cname="GnomeVFSAsyncSetFileInfoCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="GnomeVFSFileInfo*" name="file_info" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncWriteCallback" cname="GnomeVFSAsyncWriteCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="gconstpointer" name="buffer" />
        <parameter type="GnomeVFSFileSize" name="bytes_requested" />
        <parameter type="GnomeVFSFileSize" name="bytes_written" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="AsyncXferProgressCallback" cname="GnomeVFSAsyncXferProgressCallback">
      <return-type type="gint" />
      <parameters>
        <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        <parameter type="GnomeVFSXferProgressInfo*" name="info" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DNSSDBrowseCallback" cname="GnomeVFSDNSSDBrowseCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSDNSSDBrowseHandle*" name="handle" />
        <parameter type="GnomeVFSDNSSDServiceStatus" name="status" />
        <parameter type="const-GnomeVFSDNSSDService*" name="service" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="DNSSDResolveCallback" cname="GnomeVFSDNSSDResolveCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSDNSSDResolveHandle*" name="handle" />
        <parameter type="GnomeVFSResult" name="result" />
        <parameter type="const-GnomeVFSDNSSDService*" name="service" />
        <parameter type="const-char*" name="host" />
        <parameter type="int" name="port" />
        <parameter type="const-GHashTable*" name="text" />
        <parameter type="int" name="text_raw_len" />
        <parameter type="const-char*" name="text_raw" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="DirectoryVisitFunc" cname="GnomeVFSDirectoryVisitFunc">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="const-gchar*" name="rel_path" />
        <parameter type="GnomeVFSFileInfo*" name="info" />
        <parameter type="gboolean" name="recursing_will_loop" />
        <parameter type="gpointer" name="user_data" />
        <parameter type="gboolean*" name="recurse" />
      </parameters>
    </callback>
    <callback name="ModuleCallback" cname="GnomeVFSModuleCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="gconstpointer" name="in" />
        <parameter type="gsize" name="in_size" />
        <parameter type="gpointer" name="out" />
        <parameter type="gsize" name="out_size" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="ModuleCallbackResponse" cname="GnomeVFSModuleCallbackResponse">
      <return-type type="void" />
      <parameters>
        <parameter type="gpointer" name="response_data" />
      </parameters>
    </callback>
    <callback name="MonitorCallback" cname="GnomeVFSMonitorCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GnomeVFSMonitorHandle*" name="handle" />
        <parameter type="const-gchar*" name="monitor_uri" />
        <parameter type="const-gchar*" name="info_uri" />
        <parameter type="GnomeVFSMonitorEventType" name="event_type" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="SniffBufferReadCall" cname="GnomeVFSSniffBufferReadCall">
      <return-type type="GnomeVFSResult" />
      <parameters>
        <parameter type="gpointer" name="context" />
        <parameter type="gpointer" name="buffer" />
        <parameter type="GnomeVFSFileSize" name="bytes" />
        <parameter type="GnomeVFSFileSize*" name="bytes_read" />
      </parameters>
    </callback>
    <callback name="SniffBufferSeekCall" cname="GnomeVFSSniffBufferSeekCall">
      <return-type type="GnomeVFSResult" />
      <parameters>
        <parameter type="gpointer" name="context" />
        <parameter type="GnomeVFSSeekPosition" name="whence" />
        <parameter type="GnomeVFSFileOffset" name="offset" />
      </parameters>
    </callback>
    <callback name="SocketCloseFunc" cname="GnomeVFSSocketCloseFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="gpointer" name="connection" />
        <parameter type="GnomeVFSCancellation*" name="cancellation" />
      </parameters>
    </callback>
    <callback name="SocketReadFunc" cname="GnomeVFSSocketReadFunc">
      <return-type type="GnomeVFSResult" />
      <parameters>
        <parameter type="gpointer" name="connection" />
        <parameter type="gpointer" name="buffer" />
        <parameter type="GnomeVFSFileSize" name="bytes" />
        <parameter type="GnomeVFSFileSize*" name="bytes_read_out" />
        <parameter type="GnomeVFSCancellation*" name="cancellation" />
      </parameters>
    </callback>
    <callback name="SocketSetTimeoutFunc" cname="GnomeVFSSocketSetTimeoutFunc">
      <return-type type="GnomeVFSResult" />
      <parameters>
        <parameter type="gpointer" name="connection" />
        <parameter type="GTimeVal*" name="timeout" />
        <parameter type="GnomeVFSCancellation*" name="cancellation" />
      </parameters>
    </callback>
    <callback name="SocketWriteFunc" cname="GnomeVFSSocketWriteFunc">
      <return-type type="GnomeVFSResult" />
      <parameters>
        <parameter type="gpointer" name="connection" />
        <parameter type="gconstpointer" name="buffer" />
        <parameter type="GnomeVFSFileSize" name="bytes" />
        <parameter type="GnomeVFSFileSize*" name="bytes_written_out" />
        <parameter type="GnomeVFSCancellation*" name="cancellation" />
      </parameters>
    </callback>
    <callback name="UnixMountCallback" cname="GnomeVFSUnixMountCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="VolumeOpCallback" cname="GnomeVFSVolumeOpCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="gboolean" name="succeeded" />
        <parameter type="char*" name="error" />
        <parameter type="char*" name="detailed_error" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="XferProgressCallback" cname="GnomeVFSXferProgressCallback">
      <return-type type="gint" />
      <parameters>
        <parameter type="GnomeVFSXferProgressInfo*" name="info" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="XdgMimeCallback" cname="XdgMimeCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="void*" name="user_data" />
      </parameters>
    </callback>
    <callback name="XdgMimeDestroy" cname="XdgMimeDestroy">
      <return-type type="void" />
      <parameters>
        <parameter type="void*" name="user_data" />
      </parameters>
    </callback>
    <object name="MIMEMonitor" cname="GnomeVFSMIMEMonitor" parent="GObject">
      <field name="Priv" cname="priv" type="GnomeVFSMIMEMonitorPrivate*" />
      <signal name="DataChanged" cname="data_changed" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSMIMEMonitor*" name="monitor" />
        </parameters>
      </signal>
      <method name="Get" cname="gnome_vfs_mime_monitor_get" shared="true">
        <return-type type="GnomeVFSMIMEMonitor*" />
      </method>
      <method name="GetType" cname="gnome_vfs_mime_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="ACE" cname="GnomeVFSACE" parent="GObject">
      <field name="Priv" cname="priv" type="GnomeVFSACEPrivate*" />
      <property name="" cname="" type="" />
      <property name="" cname="" type="" />
      <property name="" cname="" type="" />
      <property name="" cname="" type="" />
      <property name="" cname="" type="" />
      <method name="AddPerm" cname="gnome_vfs_ace_add_perm">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSACLPerm" name="perm" />
        </parameters>
      </method>
      <method name="CheckPerm" cname="gnome_vfs_ace_check_perm">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GnomeVFSACLPerm" name="perm" />
        </parameters>
      </method>
      <method name="CopyPerms" cname="gnome_vfs_ace_copy_perms">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSACE*" name="dest" />
        </parameters>
      </method>
      <method name="DelPerm" cname="gnome_vfs_ace_del_perm">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSACLPerm" name="perm" />
        </parameters>
      </method>
      <method name="Equal" cname="gnome_vfs_ace_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GnomeVFSACE*" name="entry_b" />
        </parameters>
      </method>
      <method name="GetId" cname="gnome_vfs_ace_get_id">
        <return-type type="const-char*" />
      </method>
      <method name="GetInherit" cname="gnome_vfs_ace_get_inherit">
        <return-type type="gboolean" />
      </method>
      <method name="GetKind" cname="gnome_vfs_ace_get_kind">
        <return-type type="GnomeVFSACLKind" />
      </method>
      <method name="GetNegative" cname="gnome_vfs_ace_get_negative">
        <return-type type="gboolean" />
      </method>
      <method name="GetPerms" cname="gnome_vfs_ace_get_perms">
        <return-type type="const-GnomeVFSACLPerm*" />
      </method>
      <method name="GetType" cname="gnome_vfs_ace_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="gnome_vfs_ace_new">
        <parameters>
          <parameter type="GnomeVFSACLKind" name="kind" />
          <parameter type="const-char*" name="id" />
          <parameter type="GnomeVFSACLPerm*" name="perms" />
        </parameters>
      </constructor>
      <method name="SetId" cname="gnome_vfs_ace_set_id">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="id" />
        </parameters>
      </method>
      <method name="SetInherit" cname="gnome_vfs_ace_set_inherit">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="inherit" />
        </parameters>
      </method>
      <method name="SetKind" cname="gnome_vfs_ace_set_kind">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSACLKind" name="kind" />
        </parameters>
      </method>
      <method name="SetNegative" cname="gnome_vfs_ace_set_negative">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="negative" />
        </parameters>
      </method>
      <method name="SetPerms" cname="gnome_vfs_ace_set_perms">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSACLPerm*" name="perms" />
        </parameters>
      </method>
    </object>
    <object name="ACL" cname="GnomeVFSACL" parent="GObject">
      <field name="Priv" cname="priv" type="GnomeVFSACLPrivate*" />
      <method name="Clear" cname="gnome_vfs_acl_clear">
        <return-type type="void" />
      </method>
      <method name="FreeAceList" cname="gnome_vfs_acl_free_ace_list" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="ace_list" />
        </parameters>
      </method>
      <method name="GetAceList" cname="gnome_vfs_acl_get_ace_list">
        <return-type type="GList*" />
      </method>
      <method name="GetType" cname="gnome_vfs_acl_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="KindToString" cname="gnome_vfs_acl_kind_to_string" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="GnomeVFSACLKind" name="kind" />
        </parameters>
      </method>
      <constructor cname="gnome_vfs_acl_new" />
      <method name="PermToString" cname="gnome_vfs_acl_perm_to_string" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="GnomeVFSACLPerm" name="perm" />
        </parameters>
      </method>
      <method name="Set" cname="gnome_vfs_acl_set">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSACE*" name="ace" />
        </parameters>
      </method>
      <method name="Unset" cname="gnome_vfs_acl_unset">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSACE*" name="ace" />
        </parameters>
      </method>
    </object>
    <object name="Drive" cname="GnomeVFSDrive" parent="GObject">
      <field name="Priv" cname="priv" type="GnomeVFSDrivePrivate*" />
      <signal name="VolumeMounted" cname="volume_mounted" when="FIRST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSDrive*" name="drive" />
          <parameter type="GnomeVFSVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="VolumePreUnmount" cname="volume_pre_unmount" when="FIRST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSDrive*" name="drive" />
          <parameter type="GnomeVFSVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="VolumeUnmounted" cname="volume_unmounted" when="FIRST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSDrive*" name="drive" />
          <parameter type="GnomeVFSVolume*" name="volume" />
        </parameters>
      </signal>
      <method name="Compare" cname="gnome_vfs_drive_compare">
        <return-type type="gint" />
        <parameters>
          <parameter type="GnomeVFSDrive*" name="b" />
        </parameters>
      </method>
      <method name="Eject" cname="gnome_vfs_drive_eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeOpCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="GetActivationUri" cname="gnome_vfs_drive_get_activation_uri">
        <return-type type="char*" />
      </method>
      <method name="GetDevicePath" cname="gnome_vfs_drive_get_device_path">
        <return-type type="char*" />
      </method>
      <method name="GetDeviceType" cname="gnome_vfs_drive_get_device_type">
        <return-type type="GnomeVFSDeviceType" />
      </method>
      <method name="GetDisplayName" cname="gnome_vfs_drive_get_display_name">
        <return-type type="char*" />
      </method>
      <method name="GetHalUdi" cname="gnome_vfs_drive_get_hal_udi">
        <return-type type="char*" />
      </method>
      <method name="GetIcon" cname="gnome_vfs_drive_get_icon">
        <return-type type="char*" />
      </method>
      <method name="GetId" cname="gnome_vfs_drive_get_id">
        <return-type type="gulong" />
      </method>
      <method name="GetMountedVolume" cname="gnome_vfs_drive_get_mounted_volume" deprecated="1">
        <return-type type="GnomeVFSVolume*" />
      </method>
      <method name="GetMountedVolumes" cname="gnome_vfs_drive_get_mounted_volumes">
        <return-type type="GList*" />
      </method>
      <method name="GetType" cname="gnome_vfs_drive_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsConnected" cname="gnome_vfs_drive_is_connected">
        <return-type type="gboolean" />
      </method>
      <method name="IsMounted" cname="gnome_vfs_drive_is_mounted">
        <return-type type="gboolean" />
      </method>
      <method name="IsUserVisible" cname="gnome_vfs_drive_is_user_visible">
        <return-type type="gboolean" />
      </method>
      <method name="Mount" cname="gnome_vfs_drive_mount">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeOpCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="Ref" cname="gnome_vfs_drive_ref">
        <return-type type="GnomeVFSDrive*" />
      </method>
      <method name="Unmount" cname="gnome_vfs_drive_unmount">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeOpCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="Unref" cname="gnome_vfs_drive_unref">
        <return-type type="void" />
      </method>
      <method name="VolumeListFree" cname="gnome_vfs_drive_volume_list_free" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="volumes" />
        </parameters>
      </method>
    </object>
    <object name="Volume" cname="GnomeVFSVolume" parent="GObject">
      <field name="Priv" cname="priv" type="GnomeVFSVolumePrivate*" />
      <method name="Compare" cname="gnome_vfs_volume_compare">
        <return-type type="gint" />
        <parameters>
          <parameter type="GnomeVFSVolume*" name="b" />
        </parameters>
      </method>
      <method name="Eject" cname="gnome_vfs_volume_eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeOpCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="GetActivationUri" cname="gnome_vfs_volume_get_activation_uri">
        <return-type type="char*" />
      </method>
      <method name="GetDevicePath" cname="gnome_vfs_volume_get_device_path">
        <return-type type="char*" />
      </method>
      <method name="GetDeviceType" cname="gnome_vfs_volume_get_device_type">
        <return-type type="GnomeVFSDeviceType" />
      </method>
      <method name="GetDisplayName" cname="gnome_vfs_volume_get_display_name">
        <return-type type="char*" />
      </method>
      <method name="GetDrive" cname="gnome_vfs_volume_get_drive">
        <return-type type="GnomeVFSDrive*" />
      </method>
      <method name="GetFilesystemType" cname="gnome_vfs_volume_get_filesystem_type">
        <return-type type="char*" />
      </method>
      <method name="GetHalUdi" cname="gnome_vfs_volume_get_hal_udi">
        <return-type type="char*" />
      </method>
      <method name="GetIcon" cname="gnome_vfs_volume_get_icon">
        <return-type type="char*" />
      </method>
      <method name="GetId" cname="gnome_vfs_volume_get_id">
        <return-type type="gulong" />
      </method>
      <method name="GetType" cname="gnome_vfs_volume_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVolumeType" cname="gnome_vfs_volume_get_volume_type">
        <return-type type="GnomeVFSVolumeType" />
      </method>
      <method name="HandlesTrash" cname="gnome_vfs_volume_handles_trash">
        <return-type type="gboolean" />
      </method>
      <method name="IsMounted" cname="gnome_vfs_volume_is_mounted">
        <return-type type="gboolean" />
      </method>
      <method name="IsReadOnly" cname="gnome_vfs_volume_is_read_only">
        <return-type type="gboolean" />
      </method>
      <method name="IsUserVisible" cname="gnome_vfs_volume_is_user_visible">
        <return-type type="gboolean" />
      </method>
      <method name="Ref" cname="gnome_vfs_volume_ref">
        <return-type type="GnomeVFSVolume*" />
      </method>
      <method name="Unmount" cname="gnome_vfs_volume_unmount">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeOpCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="Unref" cname="gnome_vfs_volume_unref">
        <return-type type="void" />
      </method>
    </object>
    <object name="VolumeMonitor" cname="GnomeVFSVolumeMonitor" parent="GObject">
      <field name="Priv" cname="priv" type="GnomeVFSVolumeMonitorPrivate*" />
      <signal name="VolumeMounted" cname="volume_mounted" when="FIRST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeMonitor*" name="volume_monitor" />
          <parameter type="GnomeVFSVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="VolumePreUnmount" cname="volume_pre_unmount" when="FIRST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeMonitor*" name="volume_monitor" />
          <parameter type="GnomeVFSVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="VolumeUnmounted" cname="volume_unmounted" when="FIRST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeMonitor*" name="volume_monitor" />
          <parameter type="GnomeVFSVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="DriveConnected" cname="drive_connected" when="FIRST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeMonitor*" name="volume_monitor" />
          <parameter type="GnomeVFSDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="DriveDisconnected" cname="drive_disconnected" when="FIRST">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeMonitor*" name="volume_monitor" />
          <parameter type="GnomeVFSDrive*" name="drive" />
        </parameters>
      </signal>
      <method name="GetConnectedDrives" cname="gnome_vfs_volume_monitor_get_connected_drives">
        <return-type type="GList*" />
      </method>
      <method name="GetDriveById" cname="gnome_vfs_volume_monitor_get_drive_by_id">
        <return-type type="GnomeVFSDrive*" />
        <parameters>
          <parameter type="gulong" name="id" />
        </parameters>
      </method>
      <method name="GetMountedVolumes" cname="gnome_vfs_volume_monitor_get_mounted_volumes">
        <return-type type="GList*" />
      </method>
      <method name="GetType" cname="gnome_vfs_volume_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVolumeById" cname="gnome_vfs_volume_monitor_get_volume_by_id">
        <return-type type="GnomeVFSVolume*" />
        <parameters>
          <parameter type="gulong" name="id" />
        </parameters>
      </method>
      <method name="GetVolumeForPath" cname="gnome_vfs_volume_monitor_get_volume_for_path">
        <return-type type="GnomeVFSVolume*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </method>
      <method name="Ref" cname="gnome_vfs_volume_monitor_ref">
        <return-type type="GnomeVFSVolumeMonitor*" />
      </method>
      <method name="Unref" cname="gnome_vfs_volume_monitor_unref">
        <return-type type="void" />
      </method>
    </object>
    <object name="VolumeMonitorClient" cname="GnomeVFSVolumeMonitorClient" parent="GnomeVFSVolumeMonitor">
      <field name="IsShutdown" cname="is_shutdown" type="gboolean" />
      <field name="DbusConn" cname="dbus_conn" type="DBusConnection*" />
      <method name="GetType" cname="gnome_vfs_volume_monitor_client_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ShutdownPrivate" cname="gnome_vfs_volume_monitor_client_shutdown_private">
        <return-type type="void" />
      </method>
    </object>
    <object name="VolumeMonitorDaemon" cname="GnomeVFSVolumeMonitorDaemon" parent="GnomeVFSVolumeMonitor">
      <field name="HalCtx" cname="hal_ctx" type="LibHalContext*" />
      <field name="LastFstab" cname="last_fstab" type="GList*" />
      <field name="LastMtab" cname="last_mtab" type="GList*" />
      <field name="LastConnectedServers" cname="last_connected_servers" type="GList*" />
      <field name="GconfClient" cname="gconf_client" type="GConfClient*" />
      <field name="ConnectedId" cname="connected_id" type="guint" />
      <method name="ForceProbe" cname="gnome_vfs_volume_monitor_daemon_force_probe" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSVolumeMonitor*" name="volume_monitor_daemon" />
        </parameters>
      </method>
      <method name="GetType" cname="gnome_vfs_volume_monitor_daemon_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <alias name="ACLKind" cname="GnomeVFSACLKind" type="guint32" />
    <alias name="ACLPerm" cname="GnomeVFSACLPerm" type="guint32" />
    <boxed name="Address" cname="GnomeVFSAddress" opaque="true">
      <method name="Dup" cname="gnome_vfs_address_dup">
        <return-type type="GnomeVFSAddress*" />
      </method>
      <method name="Equal" cname="gnome_vfs_address_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GnomeVFSAddress*" name="b" />
        </parameters>
      </method>
      <method name="Free" cname="gnome_vfs_address_free">
        <return-type type="void" />
      </method>
      <method name="GetFamilyType" cname="gnome_vfs_address_get_family_type">
        <return-type type="int" />
      </method>
      <method name="GetIpv4" cname="gnome_vfs_address_get_ipv4">
        <return-type type="guint32" />
      </method>
      <method name="GetType" cname="gnome_vfs_address_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Match" cname="gnome_vfs_address_match">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GnomeVFSAddress*" name="b" />
          <parameter type="guint" name="prefix" />
        </parameters>
      </method>
      <constructor cname="gnome_vfs_address_new_from_ipv4">
        <parameters>
          <parameter type="guint32" name="ipv4_address" />
        </parameters>
      </constructor>
      <constructor cname="gnome_vfs_address_new_from_sockaddr">
        <parameters>
          <parameter type="sockaddr*" name="sa" />
          <parameter type="int" name="len" />
        </parameters>
      </constructor>
      <constructor cname="gnome_vfs_address_new_from_string">
        <parameters>
          <parameter type="const-char*" name="address" />
        </parameters>
      </constructor>
      <method name="ToString" cname="gnome_vfs_address_to_string">
        <return-type type="char*" />
      </method>
    </boxed>
    <struct name="AsyncHandle" cname="GnomeVFSAsyncHandle" opaque="true" />
    <struct name="Cancellation" cname="GnomeVFSCancellation" opaque="true">
      <method name="Ack" cname="gnome_vfs_cancellation_ack">
        <return-type type="void" />
      </method>
      <method name="Cancel" cname="gnome_vfs_cancellation_cancel">
        <return-type type="void" />
      </method>
      <method name="Check" cname="gnome_vfs_cancellation_check">
        <return-type type="gboolean" />
      </method>
      <method name="Destroy" cname="gnome_vfs_cancellation_destroy">
        <return-type type="void" />
      </method>
      <method name="GetFd" cname="gnome_vfs_cancellation_get_fd">
        <return-type type="gint" />
      </method>
      <constructor cname="gnome_vfs_cancellation_new" />
    </struct>
    <struct name="Context" cname="GnomeVFSContext" opaque="true">
      <method name="CheckCancellationCurrent" cname="gnome_vfs_context_check_cancellation_current" shared="true">
        <return-type type="gboolean" />
      </method>
      <method name="Free" cname="gnome_vfs_context_free">
        <return-type type="void" />
      </method>
      <method name="GetCancellation" cname="gnome_vfs_context_get_cancellation">
        <return-type type="GnomeVFSCancellation*" />
      </method>
      <constructor cname="gnome_vfs_context_new" />
      <method name="PeekCurrent" cname="gnome_vfs_context_peek_current" shared="true">
        <return-type type="const-GnomeVFSContext*" />
      </method>
    </struct>
    <struct name="DNSSDBrowseHandle" cname="GnomeVFSDNSSDBrowseHandle" opaque="true" />
    <struct name="DNSSDResolveHandle" cname="GnomeVFSDNSSDResolveHandle" opaque="true" />
    <struct name="DNSSDService" cname="GnomeVFSDNSSDService">
      <field name="Name" cname="name" type="char*" />
      <field name="Type" cname="type" type="char*" />
      <field name="Domain" cname="domain" type="char*" />
    </struct>
    <struct name="DirectoryHandle" cname="GnomeVFSDirectoryHandle" opaque="true" />
    <struct name="FileInfo" cname="GnomeVFSFileInfo" opaque="true">
      <field name="Name" cname="name" type="char*" access="public" writeable="true" />
      <field name="ValidFields" cname="valid_fields" type="GnomeVFSFileInfoFields" access="public" writeable="true" />
      <field name="Type" cname="type" type="GnomeVFSFileType" access="public" writeable="true" />
      <field name="Permissions" cname="permissions" type="GnomeVFSFilePermissions" access="public" writeable="true" />
      <field name="Flags" cname="flags" type="GnomeVFSFileFlags" access="public" writeable="true" />
      <field name="Device" cname="device" type="dev_t" access="public" writeable="true" />
      <field name="Inode" cname="inode" type="GnomeVFSInodeNumber" access="public" writeable="true" />
      <field name="LinkCount" cname="link_count" type="guint" access="public" writeable="true" />
      <field name="Uid" cname="uid" type="guint" access="public" writeable="true" />
      <field name="Gid" cname="gid" type="guint" access="public" writeable="true" />
      <field name="Size" cname="size" type="GnomeVFSFileSize" access="public" writeable="true" />
      <field name="BlockCount" cname="block_count" type="GnomeVFSFileSize" access="public" writeable="true" />
      <field name="IoBlockSize" cname="io_block_size" type="guint" access="public" writeable="true" />
      <field name="Atime" cname="atime" type="time_t" access="public" writeable="true" />
      <field name="Mtime" cname="mtime" type="time_t" access="public" writeable="true" />
      <field name="Ctime" cname="ctime" type="time_t" access="public" writeable="true" />
      <field name="SymlinkName" cname="symlink_name" type="char*" access="public" writeable="true" />
      <field name="MimeType" cname="mime_type" type="char*" access="public" writeable="true" />
      <field name="Refcount" cname="refcount" type="guint" access="public" writeable="true" />
      <field name="Acl" cname="acl" type="GnomeVFSACL*" access="public" writeable="true" />
      <field name="SelinuxContext" cname="selinux_context" type="char*" access="public" writeable="true" />
      <field name="Reserved1" cname="reserved1" type="void*" access="public" writeable="true" />
      <field name="Reserved2" cname="reserved2" type="void*" access="public" writeable="true" />
      <field name="Reserved3" cname="reserved3" type="void*" access="public" writeable="true" />
      <method name="Clear" cname="gnome_vfs_file_info_clear">
        <return-type type="void" />
      </method>
      <method name="Copy" cname="gnome_vfs_file_info_copy">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GnomeVFSFileInfo*" name="src" />
        </parameters>
      </method>
      <method name="Dup" cname="gnome_vfs_file_info_dup">
        <return-type type="GnomeVFSFileInfo*" />
      </method>
      <method name="GetMimeType" cname="gnome_vfs_file_info_get_mime_type">
        <return-type type="const-char*" />
      </method>
      <method name="GetType" cname="gnome_vfs_file_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ListCopy" cname="gnome_vfs_file_info_list_copy" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="ListFree" cname="gnome_vfs_file_info_list_free" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="ListRef" cname="gnome_vfs_file_info_list_ref" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="ListUnref" cname="gnome_vfs_file_info_list_unref" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="Matches" cname="gnome_vfs_file_info_matches">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GnomeVFSFileInfo*" name="b" />
        </parameters>
      </method>
      <constructor cname="gnome_vfs_file_info_new" />
      <method name="Ref" cname="gnome_vfs_file_info_ref">
        <return-type type="void" />
      </method>
      <method name="Unref" cname="gnome_vfs_file_info_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="FindDirectoryResult" cname="GnomeVFSFindDirectoryResult">
      <field name="Uri" cname="uri" type="GnomeVFSURI*" />
      <field name="Result" cname="result" type="GnomeVFSResult" />
      <field name="Reserved1" cname="reserved1" type="void*" access="private" />
      <field name="Reserved2" cname="reserved2" type="void*" access="private" />
      <method name="Dup" cname="gnome_vfs_find_directory_result_dup">
        <return-type type="GnomeVFSFindDirectoryResult*" />
      </method>
      <method name="Free" cname="gnome_vfs_find_directory_result_free">
        <return-type type="void" />
      </method>
      <method name="GetType" cname="gnome_vfs_find_directory_result_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </struct>
    <struct name="GetFileInfoResult" cname="GnomeVFSGetFileInfoResult">
      <field name="Uri" cname="uri" type="GnomeVFSURI*" />
      <field name="Result" cname="result" type="GnomeVFSResult" />
      <field name="FileInfo" cname="file_info" type="GnomeVFSFileInfo*" />
      <method name="Dup" cname="gnome_vfs_get_file_info_result_dup">
        <return-type type="GnomeVFSGetFileInfoResult*" />
      </method>
      <method name="Free" cname="gnome_vfs_get_file_info_result_free">
        <return-type type="void" />
      </method>
      <method name="GetType" cname="gnome_vfs_get_file_info_result_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </struct>
    <struct name="Handle" cname="GnomeVFSHandle" opaque="true" />
    <struct name="InetConnection" cname="GnomeVFSInetConnection" opaque="true">
      <method name="Create" cname="gnome_vfs_inet_connection_create">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-gchar*" name="host_name" />
          <parameter type="guint" name="host_port" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="CreateFromAddress" cname="gnome_vfs_inet_connection_create_from_address">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSAddress*" name="address" />
          <parameter type="guint" name="host_port" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Destroy" cname="gnome_vfs_inet_connection_destroy">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Free" cname="gnome_vfs_inet_connection_free">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="GetAddress" cname="gnome_vfs_inet_connection_get_address">
        <return-type type="GnomeVFSAddress*" />
      </method>
      <method name="GetFd" cname="gnome_vfs_inet_connection_get_fd">
        <return-type type="int" />
      </method>
      <method name="GetIp" cname="gnome_vfs_inet_connection_get_ip">
        <return-type type="char*" />
      </method>
      <method name="ToSocket" cname="gnome_vfs_inet_connection_to_socket">
        <return-type type="GnomeVFSSocket*" />
      </method>
      <method name="ToSocketBuffer" cname="gnome_vfs_inet_connection_to_socket_buffer">
        <return-type type="GnomeVFSSocketBuffer*" />
      </method>
    </struct>
    <alias name="InodeNumber" cname="GnomeVFSInodeNumber" type="GnomeVFSFileSize" />
    <alias name="MethodHandle" cname="GnomeVFSMethodHandle" type="gpointer" />
    <struct name="MimeAction" cname="GnomeVFSMimeAction" deprecated="1">
      <field name="ActionType" cname="action_type" type="GnomeVFSMimeActionType" />
      <field name="Component" cname="component" type="void*" />
      <field name="Reserved1" cname="reserved1" type="void*" access="private" />
      <method name="Free" cname="gnome_vfs_mime_action_free" deprecated="1">
        <return-type type="void" />
      </method>
      <method name="Launch" cname="gnome_vfs_mime_action_launch" deprecated="1">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GList*" name="uris" />
        </parameters>
      </method>
      <method name="LaunchWithEnv" cname="gnome_vfs_mime_action_launch_with_env" deprecated="1">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GList*" name="uris" />
          <parameter type="char**" name="envp" />
        </parameters>
      </method>
    </struct>
    <struct name="MimeApplication" cname="GnomeVFSMimeApplication" opaque="true">
      <field name="Id" cname="id" type="char*" access="public" writeable="true" />
      <field name="Name" cname="name" type="char*" access="public" writeable="true" />
      <field name="Command" cname="command" type="char*" access="public" writeable="true" />
      <field name="CanOpenMultipleFiles" cname="can_open_multiple_files" type="gboolean" access="public" writeable="true" />
      <field name="ExpectsUris" cname="expects_uris" type="GnomeVFSMimeApplicationArgumentType" access="public" writeable="true" />
      <field name="SupportedUriSchemes" cname="supported_uri_schemes" type="GList*" access="public" writeable="true" />
      <field name="Command" cname="_command" type="char*" access="public" writeable="true" />
      <field name="CanOpenMultipleFiles" cname="_can_open_multiple_files" type="gboolean" access="public" writeable="true" />
      <field name="ExpectsUris" cname="_expects_uris" type="GnomeVFSMimeApplicationArgumentType" access="public" writeable="true" />
      <field name="SupportedUriSchemes" cname="_supported_uri_schemes" type="GList*" access="public" writeable="true" />
      <field name="RequiresTerminal" cname="requires_terminal" type="gboolean" access="public" writeable="true" />
      <field name="Reserved1" cname="reserved1" type="void*" access="public" writeable="true" />
      <field name="Priv" cname="priv" type="GnomeVFSMimeApplicationPrivate*" access="public" writeable="true" />
      <method name="Copy" cname="gnome_vfs_mime_application_copy">
        <return-type type="GnomeVFSMimeApplication*" owned="true" />
      </method>
      <method name="Equal" cname="gnome_vfs_mime_application_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GnomeVFSMimeApplication*" name="app_b" />
        </parameters>
      </method>
      <method name="Free" cname="gnome_vfs_mime_application_free">
        <return-type type="void" />
      </method>
      <method name="GetBinaryName" cname="gnome_vfs_mime_application_get_binary_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetDesktopFilePath" cname="gnome_vfs_mime_application_get_desktop_file_path">
        <return-type type="const-char*" />
      </method>
      <method name="GetDesktopId" cname="gnome_vfs_mime_application_get_desktop_id">
        <return-type type="const-char*" />
      </method>
      <method name="GetExec" cname="gnome_vfs_mime_application_get_exec">
        <return-type type="const-char*" />
      </method>
      <method name="GetGenericName" cname="gnome_vfs_mime_application_get_generic_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetIcon" cname="gnome_vfs_mime_application_get_icon">
        <return-type type="const-char*" />
      </method>
      <method name="GetName" cname="gnome_vfs_mime_application_get_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetStartupWmClass" cname="gnome_vfs_mime_application_get_startup_wm_class">
        <return-type type="const-char*" />
      </method>
      <method name="Launch" cname="gnome_vfs_mime_application_launch">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GList*" name="uris" />
        </parameters>
      </method>
      <method name="LaunchWithEnv" cname="gnome_vfs_mime_application_launch_with_env">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GList*" name="uris" />
          <parameter type="char**" name="envp" />
        </parameters>
      </method>
      <method name="ListFree" cname="gnome_vfs_mime_application_list_free" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <constructor cname="gnome_vfs_mime_application_new_from_desktop_id">
        <parameters>
          <parameter type="const-char*" name="id" />
        </parameters>
      </constructor>
      <constructor cname="gnome_vfs_mime_application_new_from_id" deprecated="1">
        <parameters>
          <parameter type="const-char*" name="id" />
        </parameters>
      </constructor>
      <method name="RequiresTerminal" cname="gnome_vfs_mime_application_requires_terminal">
        <return-type type="gboolean" />
      </method>
      <method name="SupportsStartupNotification" cname="gnome_vfs_mime_application_supports_startup_notification">
        <return-type type="gboolean" />
      </method>
      <method name="SupportsUris" cname="gnome_vfs_mime_application_supports_uris">
        <return-type type="gboolean" />
      </method>
    </struct>
    <struct name="MimeSniffBuffer" cname="GnomeVFSMimeSniffBuffer" opaque="true">
      <method name="Free" cname="gnome_vfs_mime_sniff_buffer_free">
        <return-type type="void" />
      </method>
      <constructor cname="gnome_vfs_mime_sniff_buffer_new_from_existing_data">
        <parameters>
          <parameter type="const-guchar*" name="buffer" />
          <parameter type="gssize" name="buffer_size" />
        </parameters>
      </constructor>
    </struct>
    <struct name="ModuleCallbackAdditionalHeadersIn" cname="GnomeVFSModuleCallbackAdditionalHeadersIn">
      <field name="Uri" cname="uri" type="GnomeVFSURI*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackAdditionalHeadersOut" cname="GnomeVFSModuleCallbackAdditionalHeadersOut">
      <field name="Headers" cname="headers" type="GList*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackAuthenticationIn" cname="GnomeVFSModuleCallbackAuthenticationIn">
      <field name="Uri" cname="uri" type="char*" />
      <field name="Realm" cname="realm" type="char*" />
      <field name="PreviousAttemptFailed" cname="previous_attempt_failed" type="gboolean" />
      <field name="AuthType" cname="auth_type" type="GnomeVFSModuleCallbackAuthenticationAuthType" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackAuthenticationOut" cname="GnomeVFSModuleCallbackAuthenticationOut">
      <field name="Username" cname="username" type="char*" />
      <field name="Password" cname="password" type="char*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackFillAuthenticationIn" cname="GnomeVFSModuleCallbackFillAuthenticationIn">
      <field name="Uri" cname="uri" type="char*" />
      <field name="Protocol" cname="protocol" type="char*" />
      <field name="Server" cname="server" type="char*" />
      <field name="Object" cname="object" type="char*" />
      <field name="Port" cname="port" type="int" />
      <field name="Authtype" cname="authtype" type="char*" />
      <field name="Username" cname="username" type="char*" />
      <field name="Domain" cname="domain" type="char*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackFillAuthenticationOut" cname="GnomeVFSModuleCallbackFillAuthenticationOut">
      <field name="Valid" cname="valid" type="gboolean" />
      <field name="Username" cname="username" type="char*" />
      <field name="Domain" cname="domain" type="char*" />
      <field name="Password" cname="password" type="char*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackFullAuthenticationIn" cname="GnomeVFSModuleCallbackFullAuthenticationIn">
      <field name="Flags" cname="flags" type="GnomeVFSModuleCallbackFullAuthenticationFlags" />
      <field name="Uri" cname="uri" type="char*" />
      <field name="Protocol" cname="protocol" type="char*" />
      <field name="Server" cname="server" type="char*" />
      <field name="Object" cname="object" type="char*" />
      <field name="Port" cname="port" type="int" />
      <field name="Authtype" cname="authtype" type="char*" />
      <field name="Username" cname="username" type="char*" />
      <field name="Domain" cname="domain" type="char*" />
      <field name="DefaultUser" cname="default_user" type="char*" />
      <field name="DefaultDomain" cname="default_domain" type="char*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackFullAuthenticationOut" cname="GnomeVFSModuleCallbackFullAuthenticationOut">
      <field name="AbortAuth" cname="abort_auth" type="gboolean" />
      <field name="Username" cname="username" type="char*" />
      <field name="Domain" cname="domain" type="char*" />
      <field name="Password" cname="password" type="char*" />
      <field name="SavePassword" cname="save_password" type="gboolean" />
      <field name="Keyring" cname="keyring" type="char*" />
      <field name="OutFlags" cname="out_flags" type="gsize" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackQuestionIn" cname="GnomeVFSModuleCallbackQuestionIn">
      <field name="PrimaryMessage" cname="primary_message" type="char*" />
      <field name="SecondaryMessage" cname="secondary_message" type="char*" />
      <field name="Choices" cname="choices" type="char**" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackQuestionOut" cname="GnomeVFSModuleCallbackQuestionOut">
      <field name="Answer" cname="answer" type="int" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackReceivedHeadersIn" cname="GnomeVFSModuleCallbackReceivedHeadersIn">
      <field name="Uri" cname="uri" type="GnomeVFSURI*" />
      <field name="Headers" cname="headers" type="GList*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackReceivedHeadersOut" cname="GnomeVFSModuleCallbackReceivedHeadersOut">
      <field name="Dummy" cname="dummy" type="int" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackSaveAuthenticationIn" cname="GnomeVFSModuleCallbackSaveAuthenticationIn">
      <field name="Keyring" cname="keyring" type="char*" />
      <field name="Uri" cname="uri" type="char*" />
      <field name="Protocol" cname="protocol" type="char*" />
      <field name="Server" cname="server" type="char*" />
      <field name="Object" cname="object" type="char*" />
      <field name="Port" cname="port" type="int" />
      <field name="Authtype" cname="authtype" type="char*" />
      <field name="Username" cname="username" type="char*" />
      <field name="Domain" cname="domain" type="char*" />
      <field name="Password" cname="password" type="char*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackSaveAuthenticationOut" cname="GnomeVFSModuleCallbackSaveAuthenticationOut">
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackStatusMessageIn" cname="GnomeVFSModuleCallbackStatusMessageIn">
      <field name="Uri" cname="uri" type="char*" />
      <field name="Message" cname="message" type="char*" />
      <field name="Percentage" cname="percentage" type="int" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="ModuleCallbackStatusMessageOut" cname="GnomeVFSModuleCallbackStatusMessageOut">
      <field name="Dummy" cname="dummy" type="int" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="MonitorHandle" cname="GnomeVFSMonitorHandle" opaque="true" />
    <struct name="ProgressCallbackState" cname="GnomeVFSProgressCallbackState" opaque="true" />
    <struct name="ResolveHandle" cname="GnomeVFSResolveHandle" opaque="true" />
    <struct name="SSL" cname="GnomeVFSSSL" opaque="true">
      <method name="Create" cname="gnome_vfs_ssl_create">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="host" />
          <parameter type="unsigned-int" name="port" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="CreateFromFd" cname="gnome_vfs_ssl_create_from_fd">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gint" name="fd" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Destroy" cname="gnome_vfs_ssl_destroy">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Enabled" cname="gnome_vfs_ssl_enabled" shared="true">
        <return-type type="gboolean" />
      </method>
      <method name="Read" cname="gnome_vfs_ssl_read">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gpointer" name="buffer" />
          <parameter type="GnomeVFSFileSize" name="bytes" />
          <parameter type="GnomeVFSFileSize*" name="bytes_read" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="SetTimeout" cname="gnome_vfs_ssl_set_timeout">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GTimeVal*" name="timeout" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="ToSocket" cname="gnome_vfs_ssl_to_socket">
        <return-type type="GnomeVFSSocket*" />
      </method>
      <method name="Write" cname="gnome_vfs_ssl_write">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gconstpointer" name="buffer" />
          <parameter type="GnomeVFSFileSize" name="bytes" />
          <parameter type="GnomeVFSFileSize*" name="bytes_written" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
    </struct>
    <struct name="Socket" cname="GnomeVFSSocket" opaque="true">
      <method name="Close" cname="gnome_vfs_socket_close">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Free" cname="gnome_vfs_socket_free">
        <return-type type="void" />
      </method>
      <constructor cname="gnome_vfs_socket_new">
        <parameters>
          <parameter type="GnomeVFSSocketImpl*" name="impl" />
          <parameter type="void*" name="connection" />
        </parameters>
      </constructor>
      <method name="Read" cname="gnome_vfs_socket_read">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gpointer" name="buffer" />
          <parameter type="GnomeVFSFileSize" name="bytes" />
          <parameter type="GnomeVFSFileSize*" name="bytes_read" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Write" cname="gnome_vfs_socket_write">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gconstpointer" name="buffer" />
          <parameter type="int" name="bytes" />
          <parameter type="GnomeVFSFileSize*" name="bytes_written" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
    </struct>
    <struct name="SocketBuffer" cname="GnomeVFSSocketBuffer" opaque="true">
      <method name="Destroy" cname="gnome_vfs_socket_buffer_destroy">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gboolean" name="close_socket" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Flush" cname="gnome_vfs_socket_buffer_flush">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <constructor cname="gnome_vfs_socket_buffer_new">
        <parameters>
          <parameter type="GnomeVFSSocket*" name="socket" />
        </parameters>
      </constructor>
      <method name="Peekc" cname="gnome_vfs_socket_buffer_peekc">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="char*" name="character" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Read" cname="gnome_vfs_socket_buffer_read">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gpointer" name="buffer" />
          <parameter type="GnomeVFSFileSize" name="bytes" />
          <parameter type="GnomeVFSFileSize*" name="bytes_read" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="ReadUntil" cname="gnome_vfs_socket_buffer_read_until">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gpointer" name="buffer" />
          <parameter type="GnomeVFSFileSize" name="bytes" />
          <parameter type="gconstpointer" name="boundary" />
          <parameter type="GnomeVFSFileSize" name="boundary_len" />
          <parameter type="GnomeVFSFileSize*" name="bytes_read" />
          <parameter type="gboolean*" name="got_boundary" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
      <method name="Write" cname="gnome_vfs_socket_buffer_write">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="gconstpointer" name="buffer" />
          <parameter type="GnomeVFSFileSize" name="bytes" />
          <parameter type="GnomeVFSFileSize*" name="bytes_written" />
          <parameter type="GnomeVFSCancellation*" name="cancellation" />
        </parameters>
      </method>
    </struct>
    <struct name="SocketImpl" cname="GnomeVFSSocketImpl">
      <field name="Read" cname="read" type="GnomeVFSSocketReadFunc" />
      <field name="Write" cname="write" type="GnomeVFSSocketWriteFunc" />
      <field name="Close" cname="close" type="GnomeVFSSocketCloseFunc" />
      <field name="SetTimeout" cname="set_timeout" type="GnomeVFSSocketSetTimeoutFunc" />
    </struct>
    <struct name="ToplevelURI" cname="GnomeVFSToplevelURI">
      <field name="Uri" cname="uri" type="GnomeVFSURI" />
      <field name="HostName" cname="host_name" type="gchar*" />
      <field name="HostPort" cname="host_port" type="guint" />
      <field name="UserName" cname="user_name" type="gchar*" />
      <field name="Password" cname="password" type="gchar*" />
      <field name="Urn" cname="urn" type="gchar*" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="URI" cname="GnomeVFSURI" opaque="true">
      <method name="AppendFileName" cname="gnome_vfs_uri_append_file_name">
        <return-type type="GnomeVFSURI*" />
        <parameters>
          <parameter type="const-gchar*" name="filename" />
        </parameters>
      </method>
      <method name="AppendPath" cname="gnome_vfs_uri_append_path">
        <return-type type="GnomeVFSURI*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </method>
      <method name="AppendString" cname="gnome_vfs_uri_append_string">
        <return-type type="GnomeVFSURI*" />
        <parameters>
          <parameter type="const-char*" name="uri_fragment" />
        </parameters>
      </method>
      <method name="Dup" cname="gnome_vfs_uri_dup">
        <return-type type="GnomeVFSURI*" />
      </method>
      <method name="Equal" cname="gnome_vfs_uri_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GnomeVFSURI*" name="b" />
        </parameters>
      </method>
      <method name="Exists" cname="gnome_vfs_uri_exists">
        <return-type type="gboolean" />
      </method>
      <method name="ExtractDirname" cname="gnome_vfs_uri_extract_dirname">
        <return-type type="gchar*" />
      </method>
      <method name="ExtractShortName" cname="gnome_vfs_uri_extract_short_name">
        <return-type type="gchar*" />
      </method>
      <method name="ExtractShortPathName" cname="gnome_vfs_uri_extract_short_path_name">
        <return-type type="gchar*" />
      </method>
      <method name="GetFragmentIdentifier" cname="gnome_vfs_uri_get_fragment_identifier">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetHostName" cname="gnome_vfs_uri_get_host_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetHostPort" cname="gnome_vfs_uri_get_host_port">
        <return-type type="guint" />
      </method>
      <method name="GetParent" cname="gnome_vfs_uri_get_parent">
        <return-type type="GnomeVFSURI*" />
      </method>
      <method name="GetPassword" cname="gnome_vfs_uri_get_password">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetPath" cname="gnome_vfs_uri_get_path">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetScheme" cname="gnome_vfs_uri_get_scheme">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetToplevel" cname="gnome_vfs_uri_get_toplevel">
        <return-type type="GnomeVFSToplevelURI*" />
      </method>
      <method name="GetUserName" cname="gnome_vfs_uri_get_user_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="HasParent" cname="gnome_vfs_uri_has_parent">
        <return-type type="gboolean" />
      </method>
      <method name="Hash" cname="gnome_vfs_uri_hash" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="gconstpointer" name="p" />
        </parameters>
      </method>
      <method name="Hequal" cname="gnome_vfs_uri_hequal" shared="true">
        <return-type type="gint" />
        <parameters>
          <parameter type="gconstpointer" name="a" />
          <parameter type="gconstpointer" name="b" />
        </parameters>
      </method>
      <method name="IsLocal" cname="gnome_vfs_uri_is_local">
        <return-type type="gboolean" />
      </method>
      <method name="IsParent" cname="gnome_vfs_uri_is_parent">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GnomeVFSURI*" name="possible_child" />
          <parameter type="gboolean" name="recursive" />
        </parameters>
      </method>
      <method name="ListCopy" cname="gnome_vfs_uri_list_copy" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="ListFree" cname="gnome_vfs_uri_list_free" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="ListParse" cname="gnome_vfs_uri_list_parse" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="uri_list" />
        </parameters>
      </method>
      <method name="ListRef" cname="gnome_vfs_uri_list_ref" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="ListUnref" cname="gnome_vfs_uri_list_unref" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="MakeFullFromRelative" cname="gnome_vfs_uri_make_full_from_relative" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="base_uri" />
          <parameter type="const-char*" name="relative_uri" />
        </parameters>
      </method>
      <constructor cname="gnome_vfs_uri_new">
        <parameters>
          <parameter type="const-gchar*" name="text_uri" />
        </parameters>
      </constructor>
      <method name="Ref" cname="gnome_vfs_uri_ref">
        <return-type type="GnomeVFSURI*" />
      </method>
      <method name="ResolveRelative" cname="gnome_vfs_uri_resolve_relative">
        <return-type type="GnomeVFSURI*" />
        <parameters>
          <parameter type="const-gchar*" name="relative_reference" />
        </parameters>
      </method>
      <method name="SetHostName" cname="gnome_vfs_uri_set_host_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="host_name" />
        </parameters>
      </method>
      <method name="SetHostPort" cname="gnome_vfs_uri_set_host_port">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="host_port" />
        </parameters>
      </method>
      <method name="SetPassword" cname="gnome_vfs_uri_set_password">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="password" />
        </parameters>
      </method>
      <method name="SetUserName" cname="gnome_vfs_uri_set_user_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="user_name" />
        </parameters>
      </method>
      <method name="ToString" cname="gnome_vfs_uri_to_string">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="GnomeVFSURIHideOptions" name="hide_options" />
        </parameters>
      </method>
      <method name="Unref" cname="gnome_vfs_uri_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="UnixMount" cname="GnomeVFSUnixMount">
      <field name="MountPath" cname="mount_path" type="char*" />
      <field name="DevicePath" cname="device_path" type="char*" />
      <field name="FilesystemType" cname="filesystem_type" type="char*" />
      <field name="IsReadOnly" cname="is_read_only" type="gboolean" />
    </struct>
    <struct name="UnixMountPoint" cname="GnomeVFSUnixMountPoint">
      <field name="MountPath" cname="mount_path" type="char*" />
      <field name="DevicePath" cname="device_path" type="char*" />
      <field name="FilesystemType" cname="filesystem_type" type="char*" />
      <field name="DevOpt" cname="dev_opt" type="char*" />
      <field name="IsReadOnly" cname="is_read_only" type="gboolean" />
      <field name="IsUserMountable" cname="is_user_mountable" type="gboolean" />
      <field name="IsLoopback" cname="is_loopback" type="gboolean" />
    </struct>
    <struct name="XferProgressInfo" cname="GnomeVFSXferProgressInfo">
      <field name="Status" cname="status" type="GnomeVFSXferProgressStatus" />
      <field name="VfsStatus" cname="vfs_status" type="GnomeVFSResult" />
      <field name="Phase" cname="phase" type="GnomeVFSXferPhase" />
      <field name="SourceName" cname="source_name" type="gchar*" />
      <field name="TargetName" cname="target_name" type="gchar*" />
      <field name="FileIndex" cname="file_index" type="gulong" />
      <field name="FilesTotal" cname="files_total" type="gulong" />
      <field name="BytesTotal" cname="bytes_total" type="GnomeVFSFileSize" />
      <field name="FileSize" cname="file_size" type="GnomeVFSFileSize" />
      <field name="BytesCopied" cname="bytes_copied" type="GnomeVFSFileSize" />
      <field name="TotalBytesCopied" cname="total_bytes_copied" type="GnomeVFSFileSize" />
      <field name="DuplicateName" cname="duplicate_name" type="gchar*" />
      <field name="DuplicateCount" cname="duplicate_count" type="int" />
      <field name="TopLevelItem" cname="top_level_item" type="gboolean" />
      <field name="Reserved1" cname="reserved1" type="void*" />
      <field name="Reserved2" cname="reserved2" type="void*" />
    </struct>
    <struct name="XdgAliasList" cname="XdgAliasList" opaque="true" />
    <struct name="XdgGlobHash" cname="XdgGlobHash" opaque="true" />
    <struct name="XdgMimeCache" cname="XdgMimeCache" opaque="true" />
    <struct name="XdgMimeMagic" cname="XdgMimeMagic" opaque="true" />
    <struct name="XdgParentList" cname="XdgParentList" opaque="true" />
    <alias name="XdgUchar8T" cname="xdg_uchar8_t" type="unsigned char" />
    <alias name="XdgUint16T" cname="xdg_uint16_t" type="unsigned short" />
    <alias name="XdgUint32T" cname="xdg_uint32_t" type="unsigned int" />
    <alias name="XdgUnicharT" cname="xdg_unichar_t" type="unsigned int" />
    <class name="Application" cname="GnomeVfsApplication_">
      <method name="IsUserOwnedApplication" cname="gnome_vfs_application_is_user_owned_application" deprecated="1" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GnomeVFSMimeApplication*" name="application" />
        </parameters>
      </method>
      <method name="RegistryAddMimeType" cname="gnome_vfs_application_registry_add_mime_type" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="RegistryClearMimeTypes" cname="gnome_vfs_application_registry_clear_mime_types" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
        </parameters>
      </method>
      <method name="RegistryExists" cname="gnome_vfs_application_registry_exists" deprecated="1" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
        </parameters>
      </method>
      <method name="RegistryGetApplications" cname="gnome_vfs_application_registry_get_applications" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="RegistryGetBoolValue" cname="gnome_vfs_application_registry_get_bool_value" deprecated="1" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="key" />
          <parameter type="gboolean*" name="got_key" />
        </parameters>
      </method>
      <method name="RegistryGetKeys" cname="gnome_vfs_application_registry_get_keys" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
        </parameters>
      </method>
      <method name="RegistryGetMimeApplication" cname="gnome_vfs_application_registry_get_mime_application" deprecated="1" shared="true">
        <return-type type="GnomeVFSMimeApplication*" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
        </parameters>
      </method>
      <method name="RegistryGetMimeTypes" cname="gnome_vfs_application_registry_get_mime_types" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
        </parameters>
      </method>
      <method name="RegistryPeekValue" cname="gnome_vfs_application_registry_peek_value" deprecated="1" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="key" />
        </parameters>
      </method>
      <method name="RegistryReload" cname="gnome_vfs_application_registry_reload" deprecated="1" shared="true">
        <return-type type="void" />
      </method>
      <method name="RegistryRemoveApplication" cname="gnome_vfs_application_registry_remove_application" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
        </parameters>
      </method>
      <method name="RegistryRemoveMimeType" cname="gnome_vfs_application_registry_remove_mime_type" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="RegistrySaveMimeApplication" cname="gnome_vfs_application_registry_save_mime_application" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GnomeVFSMimeApplication*" name="application" />
        </parameters>
      </method>
      <method name="RegistrySetBoolValue" cname="gnome_vfs_application_registry_set_bool_value" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="key" />
          <parameter type="gboolean" name="value" />
        </parameters>
      </method>
      <method name="RegistrySetValue" cname="gnome_vfs_application_registry_set_value" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="key" />
          <parameter type="const-char*" name="value" />
        </parameters>
      </method>
      <method name="RegistryShutdown" cname="gnome_vfs_application_registry_shutdown" deprecated="1" shared="true">
        <return-type type="void" />
      </method>
      <method name="RegistrySupportsMimeType" cname="gnome_vfs_application_registry_supports_mime_type" deprecated="1" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="RegistrySupportsUriScheme" cname="gnome_vfs_application_registry_supports_uri_scheme" deprecated="1" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </method>
      <method name="RegistrySync" cname="gnome_vfs_application_registry_sync" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
      </method>
      <method name="RegistryUnsetKey" cname="gnome_vfs_application_registry_unset_key" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="app_id" />
          <parameter type="const-char*" name="key" />
        </parameters>
      </method>
    </class>
    <class name="Async" cname="GnomeVfsAsync_">
      <method name="Cancel" cname="gnome_vfs_async_cancel" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle*" name="handle" />
        </parameters>
      </method>
      <method name="Close" cname="gnome_vfs_async_close" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle*" name="handle" />
          <parameter type="GnomeVFSAsyncCloseCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="Create" cname="gnome_vfs_async_create" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="gboolean" name="exclusive" />
          <parameter type="guint" name="perm" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncOpenCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="CreateAsChannel" cname="gnome_vfs_async_create_as_channel" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="gboolean" name="exclusive" />
          <parameter type="guint" name="perm" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncCreateAsChannelCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="CreateSymbolicLink" cname="gnome_vfs_async_create_symbolic_link" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="const-gchar*" name="uri_reference" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncOpenCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="CreateUri" cname="gnome_vfs_async_create_uri" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="gboolean" name="exclusive" />
          <parameter type="guint" name="perm" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncOpenCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="CreateUriAsChannel" cname="gnome_vfs_async_create_uri_as_channel" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="gboolean" name="exclusive" />
          <parameter type="guint" name="perm" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncCreateAsChannelCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="FileControl" cname="gnome_vfs_async_file_control" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle*" name="handle" />
          <parameter type="const-char*" name="operation" />
          <parameter type="gpointer" name="operation_data" />
          <parameter type="GDestroyNotify" name="operation_data_destroy_func" />
          <parameter type="GnomeVFSAsyncFileControlCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="FindDirectory" cname="gnome_vfs_async_find_directory" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GList*" name="near_uri_list" />
          <parameter type="GnomeVFSFindDirectoryKind" name="kind" />
          <parameter type="gboolean" name="create_if_needed" />
          <parameter type="gboolean" name="find_if_needed" />
          <parameter type="guint" name="permissions" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncFindDirectoryCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="GetFileInfo" cname="gnome_vfs_async_get_file_info" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GList*" name="uri_list" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncGetFileInfoCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="GetJobLimit" cname="gnome_vfs_async_get_job_limit" shared="true">
        <return-type type="int" />
      </method>
      <method name="LoadDirectory" cname="gnome_vfs_async_load_directory" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
          <parameter type="guint" name="items_per_notification" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncDirectoryLoadCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="LoadDirectoryUri" cname="gnome_vfs_async_load_directory_uri" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
          <parameter type="guint" name="items_per_notification" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncDirectoryLoadCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="ModuleCallbackPop" cname="gnome_vfs_async_module_callback_pop" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="callback_name" />
        </parameters>
      </method>
      <method name="ModuleCallbackPush" cname="gnome_vfs_async_module_callback_push" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="callback_name" />
          <parameter type="GnomeVFSAsyncModuleCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
          <parameter type="GDestroyNotify" name="destroy_notify" />
        </parameters>
      </method>
      <method name="ModuleCallbackSetDefault" cname="gnome_vfs_async_module_callback_set_default" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="callback_name" />
          <parameter type="GnomeVFSAsyncModuleCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
          <parameter type="GDestroyNotify" name="destroy_notify" />
        </parameters>
      </method>
      <method name="Open" cname="gnome_vfs_async_open" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncOpenCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="OpenAsChannel" cname="gnome_vfs_async_open_as_channel" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="guint" name="advised_block_size" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncOpenAsChannelCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="OpenUri" cname="gnome_vfs_async_open_uri" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncOpenCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="OpenUriAsChannel" cname="gnome_vfs_async_open_uri_as_channel" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="guint" name="advised_block_size" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncOpenAsChannelCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="Read" cname="gnome_vfs_async_read" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle*" name="handle" />
          <parameter type="gpointer" name="buffer" />
          <parameter type="guint" name="bytes" />
          <parameter type="GnomeVFSAsyncReadCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="Seek" cname="gnome_vfs_async_seek" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle*" name="handle" />
          <parameter type="GnomeVFSSeekPosition" name="whence" />
          <parameter type="GnomeVFSFileOffset" name="offset" />
          <parameter type="GnomeVFSAsyncSeekCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="SetFileInfo" cname="gnome_vfs_async_set_file_info" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSSetFileInfoMask" name="mask" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncSetFileInfoCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="SetJobLimit" cname="gnome_vfs_async_set_job_limit" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="limit" />
        </parameters>
      </method>
      <method name="Write" cname="gnome_vfs_async_write" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle*" name="handle" />
          <parameter type="gconstpointer" name="buffer" />
          <parameter type="guint" name="bytes" />
          <parameter type="GnomeVFSAsyncWriteCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
        </parameters>
      </method>
      <method name="Xfer" cname="gnome_vfs_async_xfer" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSAsyncHandle**" name="handle_return" />
          <parameter type="GList*" name="source_uri_list" />
          <parameter type="GList*" name="target_uri_list" />
          <parameter type="GnomeVFSXferOptions" name="xfer_options" />
          <parameter type="GnomeVFSXferErrorMode" name="error_mode" />
          <parameter type="GnomeVFSXferOverwriteMode" name="overwrite_mode" />
          <parameter type="int" name="priority" />
          <parameter type="GnomeVFSAsyncXferProgressCallback" name="progress_update_callback" />
          <parameter type="gpointer" name="update_callback_data" />
          <parameter type="GnomeVFSXferProgressCallback" name="progress_sync_callback" />
          <parameter type="gpointer" name="sync_callback_data" />
        </parameters>
      </method>
    </class>
    <class name="Check" cname="GnomeVfsCheck_">
      <method name="SameFs" cname="gnome_vfs_check_same_fs" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-gchar*" name="source" />
          <parameter type="const-gchar*" name="target" />
          <parameter type="gboolean*" name="same_fs_return" />
        </parameters>
      </method>
      <method name="SameFsUris" cname="gnome_vfs_check_same_fs_uris" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="source_uri" />
          <parameter type="GnomeVFSURI*" name="target_uri" />
          <parameter type="gboolean*" name="same_fs_return" />
        </parameters>
      </method>
      <method name="SameFsUrisCancellable" cname="gnome_vfs_check_same_fs_uris_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="a" />
          <parameter type="GnomeVFSURI*" name="b" />
          <parameter type="gboolean*" name="same_fs_return" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
    </class>
    <class name="Global" cname="GnomeVFSGlobal">
      <method name="CloseCancellable" cname="gnome_vfs_close_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="ConnectToServer" cname="gnome_vfs_connect_to_server" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="uri" />
          <parameter type="const-char*" name="display_name" />
          <parameter type="const-char*" name="icon" />
        </parameters>
      </method>
      <method name="ExpandInitialTilde" cname="gnome_vfs_expand_initial_tilde" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </method>
      <method name="FindDirectory" cname="gnome_vfs_find_directory" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="near_uri" />
          <parameter type="GnomeVFSFindDirectoryKind" name="kind" />
          <parameter type="GnomeVFSURI**" name="result" />
          <parameter type="gboolean" name="create_if_needed" />
          <parameter type="gboolean" name="find_if_needed" />
          <parameter type="guint" name="permissions" />
        </parameters>
      </method>
      <method name="FindDirectoryCancellable" cname="gnome_vfs_find_directory_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="near_uri" />
          <parameter type="GnomeVFSFindDirectoryKind" name="kind" />
          <parameter type="GnomeVFSURI**" name="result_uri" />
          <parameter type="gboolean" name="create_if_needed" />
          <parameter type="gboolean" name="find_if_needed" />
          <parameter type="guint" name="permissions" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="ForgetCache" cname="gnome_vfs_forget_cache" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="GnomeVFSFileOffset" name="offset" />
          <parameter type="GnomeVFSFileSize" name="size" />
        </parameters>
      </method>
      <method name="GetFileInfo" cname="gnome_vfs_get_file_info" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
        </parameters>
      </method>
      <method name="GetFileInfoFromHandle" cname="gnome_vfs_get_file_info_from_handle" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
        </parameters>
      </method>
      <method name="GetFileInfoFromHandleCancellable" cname="gnome_vfs_get_file_info_from_handle_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="GetFileInfoUri" cname="gnome_vfs_get_file_info_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
        </parameters>
      </method>
      <method name="GetFileInfoUriCancellable" cname="gnome_vfs_get_file_info_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="GetFileMimeType" cname="gnome_vfs_get_file_mime_type" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="path" />
          <parameter type="stat*" name="optional_stat_info" />
          <parameter type="gboolean" name="suffix_only" />
        </parameters>
      </method>
      <method name="GetFileMimeTypeFast" cname="gnome_vfs_get_file_mime_type_fast" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="path" />
          <parameter type="stat*" name="optional_stat_info" />
        </parameters>
      </method>
      <method name="GetLocalPathFromUri" cname="gnome_vfs_get_local_path_from_uri" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </method>
      <method name="GetMimeType" cname="gnome_vfs_get_mime_type" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="text_uri" />
        </parameters>
      </method>
      <method name="GetMimeTypeCommon" cname="gnome_vfs_get_mime_type_common" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
        </parameters>
      </method>
      <method name="GetMimeTypeForBuffer" cname="gnome_vfs_get_mime_type_for_buffer" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="GnomeVFSMimeSniffBuffer*" name="buffer" />
        </parameters>
      </method>
      <method name="GetMimeTypeForData" cname="gnome_vfs_get_mime_type_for_data" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="gconstpointer" name="data" />
          <parameter type="int" name="data_size" />
        </parameters>
      </method>
      <method name="GetMimeTypeForName" cname="gnome_vfs_get_mime_type_for_name" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="filename" />
        </parameters>
      </method>
      <method name="GetMimeTypeForNameAndData" cname="gnome_vfs_get_mime_type_for_name_and_data" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="filename" />
          <parameter type="gconstpointer" name="data" />
          <parameter type="gssize" name="data_size" />
        </parameters>
      </method>
      <method name="GetMimeTypeFromFileData" cname="gnome_vfs_get_mime_type_from_file_data" deprecated="1" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
        </parameters>
      </method>
      <method name="GetMimeTypeFromUri" cname="gnome_vfs_get_mime_type_from_uri" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
        </parameters>
      </method>
      <method name="GetRegisteredMimeTypes" cname="gnome_vfs_get_registered_mime_types" deprecated="1" shared="true">
        <return-type type="GList*" />
      </method>
      <method name="GetSlowMimeType" cname="gnome_vfs_get_slow_mime_type" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="text_uri" />
        </parameters>
      </method>
      <method name="GetSpecialMimeType" cname="gnome_vfs_get_special_mime_type" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
        </parameters>
      </method>
      <method name="GetSupertypeFromMimeType" cname="gnome_vfs_get_supertype_from_mime_type" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetUriFromLocalPath" cname="gnome_vfs_get_uri_from_local_path" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="local_full_path" />
        </parameters>
      </method>
      <method name="GetUriScheme" cname="gnome_vfs_get_uri_scheme" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </method>
      <method name="GetVolumeFreeSpace" cname="gnome_vfs_get_volume_free_space" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-GnomeVFSURI*" name="vfs_uri" />
          <parameter type="GnomeVFSFileSize*" name="size" />
        </parameters>
      </method>
      <method name="GetVolumeMonitor" cname="gnome_vfs_get_volume_monitor" shared="true">
        <return-type type="GnomeVFSVolumeMonitor*" />
      </method>
      <method name="IconPathFromFilename" cname="gnome_vfs_icon_path_from_filename" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="filename" />
        </parameters>
      </method>
      <method name="ListDeepFree" cname="gnome_vfs_list_deep_free" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="ParseLsLga" cname="gnome_vfs_parse_ls_lga" shared="true">
        <return-type type="int" />
        <parameters>
          <parameter type="const-char*" name="p" />
          <parameter type="stat*" name="s" />
          <parameter type="char**" name="filename" />
          <parameter type="char**" name="linkname" />
        </parameters>
      </method>
      <method name="PtyOpen" cname="gnome_vfs_pty_open" shared="true">
        <return-type type="int" />
        <parameters>
          <parameter type="pid_t*" name="child" />
          <parameter type="guint" name="flags" />
          <parameter type="char**" name="env_add" />
          <parameter type="const-char*" name="command" />
          <parameter type="char**" name="argv" />
          <parameter type="const-char*" name="directory" />
          <parameter type="int" name="columns" />
          <parameter type="int" name="rows" />
          <parameter type="int*" name="stdin_fd" />
          <parameter type="int*" name="stdout_fd" />
          <parameter type="int*" name="stderr_fd" />
        </parameters>
      </method>
      <method name="RemoveDirectory" cname="gnome_vfs_remove_directory" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-gchar*" name="text_uri" />
        </parameters>
      </method>
      <method name="RemoveDirectoryFromUri" cname="gnome_vfs_remove_directory_from_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
        </parameters>
      </method>
      <method name="RemoveDirectoryFromUriCancellable" cname="gnome_vfs_remove_directory_from_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="ResultFromErrno" cname="gnome_vfs_result_from_errno" shared="true">
        <return-type type="GnomeVFSResult" />
      </method>
      <method name="ResultFromErrnoCode" cname="gnome_vfs_result_from_errno_code" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="int" name="errno_code" />
        </parameters>
      </method>
      <method name="ResultFromHErrno" cname="gnome_vfs_result_from_h_errno" shared="true">
        <return-type type="GnomeVFSResult" />
      </method>
      <method name="ResultFromHErrnoVal" cname="gnome_vfs_result_from_h_errno_val" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="int" name="h_errno_code" />
        </parameters>
      </method>
      <method name="ResultToString" cname="gnome_vfs_result_to_string" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="GnomeVFSResult" name="result" />
        </parameters>
      </method>
      <method name="SeekCancellable" cname="gnome_vfs_seek_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="GnomeVFSSeekPosition" name="whence" />
          <parameter type="GnomeVFSFileOffset" name="offset" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="SetFileInfo" cname="gnome_vfs_set_file_info" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSSetFileInfoMask" name="mask" />
        </parameters>
      </method>
      <method name="SetFileInfoCancellable" cname="gnome_vfs_set_file_info_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="a" />
          <parameter type="const-GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSSetFileInfoMask" name="mask" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="SetFileInfoUri" cname="gnome_vfs_set_file_info_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSSetFileInfoMask" name="mask" />
        </parameters>
      </method>
      <method name="SetMeta" cname="gnome_vfs_set_meta" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="const-char*" name="file_name" />
          <parameter type="const-char*" name="meta_key" />
        </parameters>
      </method>
      <method name="SetMetaForList" cname="gnome_vfs_set_meta_for_list" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="const-char*" name="file_name" />
          <parameter type="const-GList*" name="meta_keys" />
        </parameters>
      </method>
      <method name="StatToFileInfo" cname="gnome_vfs_stat_to_file_info" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSFileInfo*" name="file_info" />
          <parameter type="stat*" name="statptr" />
        </parameters>
      </method>
      <method name="UrisMatch" cname="gnome_vfs_uris_match" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="uri_1" />
          <parameter type="const-char*" name="uri_2" />
        </parameters>
      </method>
      <method name="WriteCancellable" cname="gnome_vfs_write_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="gconstpointer" name="buffer" />
          <parameter type="GnomeVFSFileSize" name="bytes" />
          <parameter type="GnomeVFSFileSize*" name="bytes_written" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
    </class>
    <class name="Create" cname="GnomeVfsCreate_">
      <method name="SymbolicLink" cname="gnome_vfs_create_symbolic_link" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="const-gchar*" name="target_reference" />
        </parameters>
      </method>
      <method name="SymbolicLinkCancellable" cname="gnome_vfs_create_symbolic_link_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="const-gchar*" name="target_reference" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="Uri" cname="gnome_vfs_create_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle**" name="handle" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="gboolean" name="exclusive" />
          <parameter type="guint" name="perm" />
        </parameters>
      </method>
      <method name="UriCancellable" cname="gnome_vfs_create_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle**" name="handle" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="gboolean" name="exclusive" />
          <parameter type="guint" name="perm" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
    </class>
    <class name="Daemon" cname="GnomeVfsDaemon_">
      <method name="MessageAppendFileInfo" cname="gnome_vfs_daemon_message_append_file_info" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="DBusMessage*" name="message" />
          <parameter type="const-GnomeVFSFileInfo*" name="info" />
        </parameters>
      </method>
      <method name="MessageIterAppendFileInfo" cname="gnome_vfs_daemon_message_iter_append_file_info" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="DBusMessageIter*" name="iter" />
          <parameter type="const-GnomeVFSFileInfo*" name="info" />
        </parameters>
      </method>
      <method name="MessageIterGetFileInfo" cname="gnome_vfs_daemon_message_iter_get_file_info" shared="true">
        <return-type type="GnomeVFSFileInfo*" />
        <parameters>
          <parameter type="DBusMessageIter*" name="iter" />
        </parameters>
      </method>
      <method name="SetCurrentConnection" cname="gnome_vfs_daemon_set_current_connection" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="DBusConnection*" name="conn" />
        </parameters>
      </method>
    </class>
    <class name="Directory" cname="GnomeVfsDirectory_">
      <method name="Close" cname="gnome_vfs_directory_close" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSDirectoryHandle*" name="handle" />
        </parameters>
      </method>
      <method name="ListLoad" cname="gnome_vfs_directory_list_load" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GList**" name="list" />
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
        </parameters>
      </method>
      <method name="Open" cname="gnome_vfs_directory_open" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSDirectoryHandle**" name="handle" />
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
        </parameters>
      </method>
      <method name="OpenFromUri" cname="gnome_vfs_directory_open_from_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSDirectoryHandle**" name="handle" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
        </parameters>
      </method>
      <method name="OpenFromUriCancellable" cname="gnome_vfs_directory_open_from_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSDirectoryHandle**" name="handle" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileInfoOptions" name="options" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="ReadNext" cname="gnome_vfs_directory_read_next" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSDirectoryHandle*" name="handle" />
          <parameter type="GnomeVFSFileInfo*" name="file_info" />
        </parameters>
      </method>
      <method name="ReadNextCancellable" cname="gnome_vfs_directory_read_next_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSDirectoryHandle*" name="handle" />
          <parameter type="GnomeVFSFileInfo*" name="info" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="Visit" cname="gnome_vfs_directory_visit" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSFileInfoOptions" name="info_options" />
          <parameter type="GnomeVFSDirectoryVisitOptions" name="visit_options" />
          <parameter type="GnomeVFSDirectoryVisitFunc" name="callback" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
      <method name="VisitFiles" cname="gnome_vfs_directory_visit_files" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GList*" name="file_list" />
          <parameter type="GnomeVFSFileInfoOptions" name="info_options" />
          <parameter type="GnomeVFSDirectoryVisitOptions" name="visit_options" />
          <parameter type="GnomeVFSDirectoryVisitFunc" name="callback" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
      <method name="VisitFilesAtUri" cname="gnome_vfs_directory_visit_files_at_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GList*" name="file_list" />
          <parameter type="GnomeVFSFileInfoOptions" name="info_options" />
          <parameter type="GnomeVFSDirectoryVisitOptions" name="visit_options" />
          <parameter type="GnomeVFSDirectoryVisitFunc" name="callback" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
      <method name="VisitUri" cname="gnome_vfs_directory_visit_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileInfoOptions" name="info_options" />
          <parameter type="GnomeVFSDirectoryVisitOptions" name="visit_options" />
          <parameter type="GnomeVFSDirectoryVisitFunc" name="callback" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
    </class>
    <class name="Escape" cname="GnomeVfsEscape_">
      <method name="HostAndPathString" cname="gnome_vfs_escape_host_and_path_string" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </method>
      <method name="PathString" cname="gnome_vfs_escape_path_string" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </method>
      <method name="Set" cname="gnome_vfs_escape_set" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="string" />
          <parameter type="const-char*" name="match_set" />
        </parameters>
      </method>
      <method name="Slashes" cname="gnome_vfs_escape_slashes" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="string" />
        </parameters>
      </method>
      <method name="String" cname="gnome_vfs_escape_string" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="string" />
        </parameters>
      </method>
    </class>
    <class name="File" cname="GnomeVfsFile_">
      <method name="Control" cname="gnome_vfs_file_control" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="const-char*" name="operation" />
          <parameter type="gpointer" name="operation_data" />
        </parameters>
      </method>
      <method name="ControlCancellable" cname="gnome_vfs_file_control_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="const-char*" name="operation" />
          <parameter type="gpointer" name="operation_data" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
    </class>
    <class name="Format" cname="GnomeVfsFormat_">
      <method name="FileSizeForDisplay" cname="gnome_vfs_format_file_size_for_display" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="GnomeVFSFileSize" name="size" />
        </parameters>
      </method>
      <method name="UriForDisplay" cname="gnome_vfs_format_uri_for_display" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </method>
    </class>
    <class name="Is" cname="GnomeVfsIs_">
      <method name="ExecutableCommandString" cname="gnome_vfs_is_executable_command_string" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="command_string" />
        </parameters>
      </method>
      <method name="PrimaryThread" cname="gnome_vfs_is_primary_thread" shared="true">
        <return-type type="gboolean" />
      </method>
    </class>
    <class name="Make" cname="GnomeVfsMake_">
      <method name="Directory" cname="gnome_vfs_make_directory" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="guint" name="perm" />
        </parameters>
      </method>
      <method name="DirectoryForUri" cname="gnome_vfs_make_directory_for_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="guint" name="perm" />
        </parameters>
      </method>
      <method name="DirectoryForUriCancellable" cname="gnome_vfs_make_directory_for_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="guint" name="perm" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="PathNameCanonical" cname="gnome_vfs_make_path_name_canonical" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </method>
      <method name="UriCanonical" cname="gnome_vfs_make_uri_canonical" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </method>
      <method name="UriCanonicalStripFragment" cname="gnome_vfs_make_uri_canonical_strip_fragment" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </method>
      <method name="UriFromInput" cname="gnome_vfs_make_uri_from_input" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="location" />
        </parameters>
      </method>
      <method name="UriFromInputWithDirs" cname="gnome_vfs_make_uri_from_input_with_dirs" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="location" />
          <parameter type="GnomeVFSMakeURIDirs" name="dirs" />
        </parameters>
      </method>
      <method name="UriFromInputWithTrailingWs" cname="gnome_vfs_make_uri_from_input_with_trailing_ws" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="location" />
        </parameters>
      </method>
      <method name="UriFromShellArg" cname="gnome_vfs_make_uri_from_shell_arg" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </method>
      <method name="UriFullFromRelative" cname="gnome_vfs_make_uri_full_from_relative" deprecated="1" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="base_uri" />
          <parameter type="const-char*" name="relative_uri" />
        </parameters>
      </method>
    </class>
    <class name="Mime" cname="GnomeVfsMime_">
      <method name="AddApplicationToShortList" cname="gnome_vfs_mime_add_application_to_short_list" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="application_id" />
        </parameters>
      </method>
      <method name="AddComponentToShortList" cname="gnome_vfs_mime_add_component_to_short_list" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="iid" />
        </parameters>
      </method>
      <method name="AddExtension" cname="gnome_vfs_mime_add_extension" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="extension" />
        </parameters>
      </method>
      <method name="CanBeExecutable" cname="gnome_vfs_mime_can_be_executable" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="ComponentListFree" cname="gnome_vfs_mime_component_list_free" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="ExtendAllApplications" cname="gnome_vfs_mime_extend_all_applications" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="GList*" name="application_ids" />
        </parameters>
      </method>
      <method name="ExtensionsListFree" cname="gnome_vfs_mime_extensions_list_free" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="Freeze" cname="gnome_vfs_mime_freeze" shared="true">
        <return-type type="void" />
      </method>
      <method name="GetAllApplications" cname="gnome_vfs_mime_get_all_applications" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetAllApplicationsForUri" cname="gnome_vfs_mime_get_all_applications_for_uri" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetAllComponents" cname="gnome_vfs_mime_get_all_components" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetAllDesktopEntries" cname="gnome_vfs_mime_get_all_desktop_entries" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetDefaultAction" cname="gnome_vfs_mime_get_default_action" deprecated="1" shared="true">
        <return-type type="GnomeVFSMimeAction*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetDefaultActionType" cname="gnome_vfs_mime_get_default_action_type" deprecated="1" shared="true">
        <return-type type="GnomeVFSMimeActionType" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetDefaultApplication" cname="gnome_vfs_mime_get_default_application" shared="true">
        <return-type type="GnomeVFSMimeApplication*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetDefaultApplicationForUri" cname="gnome_vfs_mime_get_default_application_for_uri" shared="true">
        <return-type type="GnomeVFSMimeApplication*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetDefaultComponent" cname="gnome_vfs_mime_get_default_component" deprecated="1" shared="true">
        <return-type type="void*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetDefaultDesktopEntry" cname="gnome_vfs_mime_get_default_desktop_entry" deprecated="1" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetDescription" cname="gnome_vfs_mime_get_description" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetExtensionsList" cname="gnome_vfs_mime_get_extensions_list" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetExtensionsPrettyString" cname="gnome_vfs_mime_get_extensions_pretty_string" deprecated="1" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetExtensionsString" cname="gnome_vfs_mime_get_extensions_string" deprecated="1" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetIcon" cname="gnome_vfs_mime_get_icon" deprecated="1" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetKeyList" cname="gnome_vfs_mime_get_key_list" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetShortListApplications" cname="gnome_vfs_mime_get_short_list_applications" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetShortListComponents" cname="gnome_vfs_mime_get_short_list_components" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="GetValue" cname="gnome_vfs_mime_get_value" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="key" />
        </parameters>
      </method>
      <method name="IdInApplicationList" cname="gnome_vfs_mime_id_in_application_list" deprecated="1" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="id" />
          <parameter type="GList*" name="applications" />
        </parameters>
      </method>
      <method name="IdInComponentList" cname="gnome_vfs_mime_id_in_component_list" deprecated="1" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="iid" />
          <parameter type="GList*" name="components" />
        </parameters>
      </method>
      <method name="IdListFromApplicationList" cname="gnome_vfs_mime_id_list_from_application_list" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="applications" />
        </parameters>
      </method>
      <method name="IdListFromComponentList" cname="gnome_vfs_mime_id_list_from_component_list" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="components" />
        </parameters>
      </method>
      <method name="InfoCacheReload" cname="gnome_vfs_mime_info_cache_reload" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="dir" />
        </parameters>
      </method>
      <method name="InfoReload" cname="gnome_vfs_mime_info_reload" shared="true">
        <return-type type="void" />
      </method>
      <method name="KeysListFree" cname="gnome_vfs_mime_keys_list_free" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="mime_type_list" />
        </parameters>
      </method>
      <method name="RegisteredMimeTypeDelete" cname="gnome_vfs_mime_registered_mime_type_delete" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="RegisteredMimeTypeListFree" cname="gnome_vfs_mime_registered_mime_type_list_free" deprecated="1" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="list" />
        </parameters>
      </method>
      <method name="Reload" cname="gnome_vfs_mime_reload" shared="true">
        <return-type type="void" />
      </method>
      <method name="RemoveApplicationFromList" cname="gnome_vfs_mime_remove_application_from_list" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="applications" />
          <parameter type="const-char*" name="application_id" />
          <parameter type="gboolean*" name="did_remove" />
        </parameters>
      </method>
      <method name="RemoveApplicationFromShortList" cname="gnome_vfs_mime_remove_application_from_short_list" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="application_id" />
        </parameters>
      </method>
      <method name="RemoveComponentFromList" cname="gnome_vfs_mime_remove_component_from_list" deprecated="1" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="components" />
          <parameter type="const-char*" name="iid" />
          <parameter type="gboolean*" name="did_remove" />
        </parameters>
      </method>
      <method name="RemoveComponentFromShortList" cname="gnome_vfs_mime_remove_component_from_short_list" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="iid" />
        </parameters>
      </method>
      <method name="RemoveExtension" cname="gnome_vfs_mime_remove_extension" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="extension" />
        </parameters>
      </method>
      <method name="RemoveFromAllApplications" cname="gnome_vfs_mime_remove_from_all_applications" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="GList*" name="application_ids" />
        </parameters>
      </method>
      <method name="Reset" cname="gnome_vfs_mime_reset" deprecated="1" shared="true">
        <return-type type="void" />
      </method>
      <method name="SetCanBeExecutable" cname="gnome_vfs_mime_set_can_be_executable" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="gboolean" name="new_value" />
        </parameters>
      </method>
      <method name="SetDefaultActionType" cname="gnome_vfs_mime_set_default_action_type" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="GnomeVFSMimeActionType" name="action_type" />
        </parameters>
      </method>
      <method name="SetDefaultApplication" cname="gnome_vfs_mime_set_default_application" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="application_id" />
        </parameters>
      </method>
      <method name="SetDefaultComponent" cname="gnome_vfs_mime_set_default_component" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="component_iid" />
        </parameters>
      </method>
      <method name="SetDescription" cname="gnome_vfs_mime_set_description" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="description" />
        </parameters>
      </method>
      <method name="SetExtensionsList" cname="gnome_vfs_mime_set_extensions_list" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="extensions_list" />
        </parameters>
      </method>
      <method name="SetIcon" cname="gnome_vfs_mime_set_icon" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="filename" />
        </parameters>
      </method>
      <method name="SetRegisteredTypeKey" cname="gnome_vfs_mime_set_registered_type_key" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="key" />
          <parameter type="const-char*" name="data" />
        </parameters>
      </method>
      <method name="SetShortListApplications" cname="gnome_vfs_mime_set_short_list_applications" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="GList*" name="application_ids" />
        </parameters>
      </method>
      <method name="SetShortListComponents" cname="gnome_vfs_mime_set_short_list_components" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="GList*" name="component_iids" />
        </parameters>
      </method>
      <method name="SetValue" cname="gnome_vfs_mime_set_value" deprecated="1" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="key" />
          <parameter type="const-char*" name="value" />
        </parameters>
      </method>
      <method name="Shutdown" cname="gnome_vfs_mime_shutdown" deprecated="1" shared="true">
        <return-type type="void" />
      </method>
      <method name="Thaw" cname="gnome_vfs_mime_thaw" shared="true">
        <return-type type="void" />
      </method>
      <method name="TypeFromMode" cname="gnome_vfs_mime_type_from_mode" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="mode_t" name="mode" />
        </parameters>
      </method>
      <method name="TypeFromName" cname="gnome_vfs_mime_type_from_name" deprecated="1" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="filename" />
        </parameters>
      </method>
      <method name="TypeFromNameOrDefault" cname="gnome_vfs_mime_type_from_name_or_default" shared="true">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="filename" />
          <parameter type="const-char*" name="defaultv" />
        </parameters>
      </method>
      <method name="TypeGetEquivalence" cname="gnome_vfs_mime_type_get_equivalence" shared="true">
        <return-type type="GnomeVFSMimeEquivalence" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
          <parameter type="const-char*" name="base_mime_type" />
        </parameters>
      </method>
      <method name="TypeIsEqual" cname="gnome_vfs_mime_type_is_equal" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="a" />
          <parameter type="const-char*" name="b" />
        </parameters>
      </method>
      <method name="TypeIsKnown" cname="gnome_vfs_mime_type_is_known" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="TypeIsSupertype" cname="gnome_vfs_mime_type_is_supertype" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
    </class>
    <class name="Module" cname="GnomeVfsModule_">
      <method name="CallbackInvoke" cname="gnome_vfs_module_callback_invoke" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="callback_name" />
          <parameter type="gconstpointer" name="in" />
          <parameter type="gsize" name="in_size" />
          <parameter type="gpointer" name="out" />
          <parameter type="gsize" name="out_size" />
        </parameters>
      </method>
      <method name="CallbackPop" cname="gnome_vfs_module_callback_pop" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="callback_name" />
        </parameters>
      </method>
      <method name="CallbackPush" cname="gnome_vfs_module_callback_push" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="callback_name" />
          <parameter type="GnomeVFSModuleCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
          <parameter type="GDestroyNotify" name="destroy_notify" />
        </parameters>
      </method>
      <method name="CallbackSetDefault" cname="gnome_vfs_module_callback_set_default" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="callback_name" />
          <parameter type="GnomeVFSModuleCallback" name="callback" />
          <parameter type="gpointer" name="callback_data" />
          <parameter type="GDestroyNotify" name="destroy_notify" />
        </parameters>
      </method>
    </class>
    <class name="Monitor" cname="GnomeVfsMonitor_">
      <method name="Add" cname="gnome_vfs_monitor_add" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSMonitorHandle**" name="handle" />
          <parameter type="const-gchar*" name="text_uri" />
          <parameter type="GnomeVFSMonitorType" name="monitor_type" />
          <parameter type="GnomeVFSMonitorCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="Callback" cname="gnome_vfs_monitor_callback" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSMethodHandle*" name="method_handle" />
          <parameter type="GnomeVFSURI*" name="info_uri" />
          <parameter type="GnomeVFSMonitorEventType" name="event_type" />
        </parameters>
      </method>
      <method name="Cancel" cname="gnome_vfs_monitor_cancel" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSMonitorHandle*" name="handle" />
        </parameters>
      </method>
    </class>
    <class name="Move" cname="GnomeVfsMove_">
      <method name="Uri" cname="gnome_vfs_move_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="old_uri" />
          <parameter type="GnomeVFSURI*" name="new_uri" />
          <parameter type="gboolean" name="force_replace" />
        </parameters>
      </method>
      <method name="UriCancellable" cname="gnome_vfs_move_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="old" />
          <parameter type="GnomeVFSURI*" name="new" />
          <parameter type="gboolean" name="force_replace" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
    </class>
    <class name="Open" cname="GnomeVfsOpen_">
      <method name="Fd" cname="gnome_vfs_open_fd" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle**" name="handle" />
          <parameter type="int" name="filedes" />
        </parameters>
      </method>
      <method name="Uri" cname="gnome_vfs_open_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle**" name="handle" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
        </parameters>
      </method>
      <method name="UriCancellable" cname="gnome_vfs_open_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle**" name="handle" />
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSOpenMode" name="open_mode" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
    </class>
    <class name="Read" cname="GnomeVfsRead_">
      <method name="Cancellable" cname="gnome_vfs_read_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="gpointer" name="buffer" />
          <parameter type="GnomeVFSFileSize" name="bytes" />
          <parameter type="GnomeVFSFileSize*" name="bytes_written" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="EntireFile" cname="gnome_vfs_read_entire_file" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="uri" />
          <parameter type="int*" name="file_size" />
          <parameter type="char**" name="file_contents" />
        </parameters>
      </method>
    </class>
    <class name="Resolve" cname="GnomeVfsResolve_">
      <method name="Free" cname="gnome_vfs_resolve_free" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSResolveHandle*" name="handle" />
        </parameters>
      </method>
      <method name="NextAddress" cname="gnome_vfs_resolve_next_address" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GnomeVFSResolveHandle*" name="handle" />
          <parameter type="GnomeVFSAddress**" name="address" />
        </parameters>
      </method>
      <method name="ResetToBeginning" cname="gnome_vfs_resolve_reset_to_beginning" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GnomeVFSResolveHandle*" name="handle" />
        </parameters>
      </method>
    </class>
    <class name="Truncate" cname="GnomeVfsTruncate_">
      <method name="Handle" cname="gnome_vfs_truncate_handle" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="GnomeVFSFileSize" name="length" />
        </parameters>
      </method>
      <method name="HandleCancellable" cname="gnome_vfs_truncate_handle_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSHandle*" name="handle" />
          <parameter type="GnomeVFSFileSize" name="length" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
      <method name="Uri" cname="gnome_vfs_truncate_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileSize" name="length" />
        </parameters>
      </method>
      <method name="UriCancellable" cname="gnome_vfs_truncate_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSFileSize" name="length" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
    </class>
    <class name="Unescape" cname="GnomeVfsUnescape_">
      <method name="String" cname="gnome_vfs_unescape_string" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="escaped_string" />
          <parameter type="const-char*" name="illegal_characters" />
        </parameters>
      </method>
      <method name="StringForDisplay" cname="gnome_vfs_unescape_string_for_display" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="escaped" />
        </parameters>
      </method>
    </class>
    <class name="Unlink" cname="GnomeVfsUnlink_">
      <method name="FromUri" cname="gnome_vfs_unlink_from_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
        </parameters>
      </method>
      <method name="FromUriCancellable" cname="gnome_vfs_unlink_from_uri_cancellable" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="GnomeVFSURI*" name="uri" />
          <parameter type="GnomeVFSContext*" name="context" />
        </parameters>
      </method>
    </class>
    <class name="Url" cname="GnomeVfsUrl_">
      <method name="Show" cname="gnome_vfs_url_show" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="url" />
        </parameters>
      </method>
      <method name="ShowWithEnv" cname="gnome_vfs_url_show_with_env" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-char*" name="url" />
          <parameter type="char**" name="envp" />
        </parameters>
      </method>
    </class>
    <class name="Xfer" cname="GnomeVfsXfer_">
      <method name="DeleteList" cname="gnome_vfs_xfer_delete_list" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-GList*" name="source_uri_list" />
          <parameter type="GnomeVFSXferErrorMode" name="error_mode" />
          <parameter type="GnomeVFSXferOptions" name="xfer_options" />
          <parameter type="GnomeVFSXferProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
      <method name="Uri" cname="gnome_vfs_xfer_uri" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-GnomeVFSURI*" name="source_uri" />
          <parameter type="const-GnomeVFSURI*" name="target_uri" />
          <parameter type="GnomeVFSXferOptions" name="xfer_options" />
          <parameter type="GnomeVFSXferErrorMode" name="error_mode" />
          <parameter type="GnomeVFSXferOverwriteMode" name="overwrite_mode" />
          <parameter type="GnomeVFSXferProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
      <method name="UriList" cname="gnome_vfs_xfer_uri_list" shared="true">
        <return-type type="GnomeVFSResult" />
        <parameters>
          <parameter type="const-GList*" name="source_uri_list" />
          <parameter type="const-GList*" name="target_uri_list" />
          <parameter type="GnomeVFSXferOptions" name="xfer_options" />
          <parameter type="GnomeVFSXferErrorMode" name="error_mode" />
          <parameter type="GnomeVFSXferOverwriteMode" name="overwrite_mode" />
          <parameter type="GnomeVFSXferProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
    </class>
  </namespace>
</api>