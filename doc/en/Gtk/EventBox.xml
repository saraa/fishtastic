<Type Name="EventBox" FullName="Gtk.EventBox">
  <TypeSignature Language="C#" Maintainer="John Luke" Value="public class EventBox : Gtk.Bin" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>A widget used to catch events for widgets which do not have their own window.</summary>
    <remarks>The <see cref="T:Gtk.EventBox" /> widget is a subclass of <see cref="T:Gtk.Bin" /> which also has its own window. It is useful since it allows you to catch events for widgets which do not have their own window.
			<para><example><code lang="C#">
using Gtk;
using Gdk;
using System;


public class eventbox
{

	static void delete_event (object obj, DeleteEventArgs args)
	{
		Application.Quit();
	}

	static void exitbutton_event (object obj, ButtonPressEventArgs args)
	{
		Application.Quit();
	}

	public static void Main (string[] args)
	{
		Gtk.Window window;
		EventBox eventbox;
		Label label;

		Application.Init();

		window = new Gtk.Window ("Eventbox");
		window.DeleteEvent += new DeleteEventHandler (delete_event);

		window.BorderWidth = 10;

		eventbox = new EventBox ();
		window.Add (eventbox);
		eventbox.Show();

		label = new Label ("Click here to quit");
		eventbox.Add(label);
		label.Show();

		label.SetSizeRequest(110, 20);

		eventbox.ButtonPressEvent += new ButtonPressEventHandler (exitbutton_event);

		eventbox.Realize();

		window.Show();
			
		Application.Run();
	}
}
				</code></example></para></remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gtk.Bin</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventBox (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventBox ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Creates a new <see cref="T:Gtk.EventBox" />.</summary>
        <remarks>Creates a new <see cref="T:Gtk.EventBox" />.
					<example><code lang="C#">EventBox eb = new EventBox();</code></example></remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GType Property.</summary>
        <value>a <see cref="T:GLib.GType" /></value>
        <remarks>Returns the native <see cref="T:GLib.GType" /> value for <see cref="T:Gtk.EventBox" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventBox (GLib.GType gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>Protected Constructor.</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks>Chain to this constructor if you have manually registered a native <see cref="T:GLib.GType" /> value for your subclass.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="AboveChild">
      <MemberSignature Language="C#" Value="public bool AboveChild { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Whether the event-trapping window of the eventbox is above the window of the child widget as opposed to below it.</summary>
        <value>a <see cref="T:System.Boolean" /></value>
        <remarks>
        </remarks>
        <since version="Gtk# 2.4" />
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("above-child")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="VisibleWindow">
      <MemberSignature Language="C#" Value="public bool VisibleWindow { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Whether the event box is visible, as opposed to invisible and only used to trap events.</summary>
        <value>a <see cref="T:System.Boolean" /></value>
        <remarks>
        </remarks>
        <since version="Gtk# 2.4" />
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("visible-window")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
  </Members>
</Type>
