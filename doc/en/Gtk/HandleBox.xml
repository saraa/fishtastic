<Type Name="HandleBox" FullName="Gtk.HandleBox">
  <TypeSignature Language="C#" Value="public class HandleBox : Gtk.Bin, Implementor, IWrapper, IWrapper, IDisposable" Maintainer="Lee Mallabone" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>A container with a handle and a detachable child widget.</summary>
    <remarks>
      <para>The HandleBox widget allows a portion of a window to be "torn off". It is a <see cref="T:Gtk.Bin" /> widget that displays its child with a handle that the user can drag to create a separate floating window containing the child widget and the 'handle'.</para>
      <para>A thin ghost is drawn in the original location of the HandleBox. By dragging the separate window back to its original location, it can be reattached. When reattaching, the ghost and float window, must be aligned along one of the edges, the <see cref="P:Gtk.HandlBox.SnapEdge" />. This can either be specified by the application programmer explicitly, otherwise a reasonable default will be used, based on the <see cref="P:Gtk.HandleBox.HandlePosition" />.</para>
      <para>To make detaching and reattaching the HandleBox as minimally confusing as possible to the user, it is important to set the snap edge so that it does not move when the HandleBox is deattached. For instance, if the HandleBox is packed at the bottom of a <see cref="T:Gtk.VBox" />, then when the HandleBox is detached, the bottom edge of the HandleBox's allocation will remain fixed as the height of the HandleBox shrinks, so the snap edge should be set to <see cref="P:Gtk.PositionType.Bottom" />.</para>
      <para>The child of this widget is set using the <see cref="M:Gtk.Container.Add" /> method in <see cref="T:Gtk.Container" />.</para>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gtk.Bin</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Atk.Implementor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HandleBox (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of HandleBox, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HandleBox ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>The main way to create a HandleBox.</summary>
        <returns>A new HandleBox.</returns>
        <remarks>
          <para>Creates a new HandleBox, with the <see cref="P:Gtk.HandleBox.HandlePosition" /> set to the <see cref="P:Gtk.PositionType.Left" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The GLib Type for Gtk.HandleBox</summary>
        <returns>The GLib Type for the Gtk.HandleBox class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SnapEdge">
      <MemberSignature Language="C#" Value="public Gtk.PositionType SnapEdge { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.PositionType</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>Manage which edge a detached HandleBox must reattach to.</summary>
        <param name="value">The new edge</param>
        <returns>The current edge that snapping works with.</returns>
        <remarks>
          <para>To ensure good usability, this edge should be set to a side of the HandleBox whose position or size will not be altered when the child is detached.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowType">
      <MemberSignature Language="C#" Value="public Gtk.ShadowType ShadowType { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ShadowType</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>Manage the appearance of the <see cref="T:Gtk.Container" /> surrounding the child widget.</summary>
        <param name="value">The new style of shadow to use for this HandleBox.</param>
        <returns>The current style of shadow in use.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="HandlePosition">
      <MemberSignature Language="C#" Value="public Gtk.PositionType HandlePosition { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.PositionType</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>Manage where the handle of this container is placed.</summary>
        <param name="value">A new position for the handle.</param>
        <returns>The current position of the handle.</returns>
        <remarks>
          <para>Note: In western cultures, anything other than a <see cref="P:Gtk.PositionType.Left" /> handle for horizontal HandleBoxes, or a <see cref="P:Gtk.PositionType.Top" /> handle for vertical HandleBoxes, may seem strange to users.</para>
          <para>The reverse is likely to be true for cultures with languages that are written from right to left.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shadow">
      <MemberSignature Language="C#" Value="public Gtk.ShadowType Shadow { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ShadowType</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>Manage the appearance of the <see cref="T:Gtk.Container" /> surrounding the child widget.</summary>
        <param name="value">The new style of shadow to use for this HandleBox.</param>
        <returns>The current style of shadow in use.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ChildAttached">
      <MemberSignature Language="C#" Value="public event GtkSharp.ChildAttachedHandler ChildAttached;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>GtkSharp.ChildAttachedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This event is fired when the contents of the HandleBox are reattached to the main window. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ChildDetached">
      <MemberSignature Language="C#" Value="public event GtkSharp.ChildDetachedHandler ChildDetached;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>GtkSharp.ChildDetachedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This event is fired when the contents of the handlebox are detached from the main window.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HandleBox (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">GLib type for the type</param>
        <returns>Creates a new instance of HandleBox, using the GLib-provided type</returns>
        <remarks>
          <para>This is a constructor used by derivative types of <see cref="T:Gtk.HandleBox" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapEdgeSet">
      <MemberSignature Language="C#" Value="public bool SnapEdgeSet { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="value">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
  </Members>
</Type>