<Type Name="XML" FullName="Glade.XML">
  <TypeSignature Language="C#" Value="public class XML : GLib.Object, IWrapper, IDisposable" Maintainer="duncan" />
  <AssemblyInfo>
    <AssemblyName>glade-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Allows dynamic loading of user interfaces from XML descriptions</summary>
    <remarks></remarks>
  </Docs>
  <Base>
    <BaseTypeName>GLib.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="GetWidgetTree">
      <MemberSignature Language="C#" Value="public static Glade.XML GetWidgetTree (Gtk.Widget w);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Glade.XML</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <summary>Get the parent <see cref="T:Glade.XML" /> widget</summary>
        <param name="w">a <see cref="T:Gtk.Widget" /></param>
        <returns>
	  the <see cref="T:Glade.XML" /> object that built <see paramref="w" />, or <see langword="null" /> if <see paramref="w" /> is not built from Glade
	</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWidgetName">
      <MemberSignature Language="C#" Value="public static string GetWidgetName (Gtk.Widget w);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <summary>Gets the name of a Glade-built widget</summary>
        <param name="w">a <see cref="T:Gtk.Widget" /> built from Glade</param>
        <returns>the name of the <see paramref="w" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCustomHandler">
      <MemberSignature Language="C#" Value="public static void SetCustomHandler (Glade.XMLCustomWidgetHandler handler);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="Glade.XMLCustomWidgetHandler" />
      </Parameters>
      <Docs>
        <summary>
	  This function allows you to override the default behaviour
	  when a Custom widget is found in an interface. 
	</summary>
        <param name="handler">the custom widget handler</param>
        <remarks>
          <para>
	    Calling this function allows you to override the default
	    behaviour when a Custom widget is found in an
	    interface. This could be used by a language binding to
	    call some other function, or to limit what functions can
	    be called to create custom widgets
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindFields">
      <MemberSignature Language="C#" Value="public void BindFields (Type type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="type">To be added: an object of type 'Type'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindFields">
      <MemberSignature Language="C#" Value="public void BindFields (object target);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="target">To be added: an object of type 'object'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Autoconnect">
      <MemberSignature Language="C#" Value="public void Autoconnect (Type handler_class);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler_class" Type="System.Type" />
      </Parameters>
      <Docs>
        <summary>Automatically connect signals</summary>
        <param name="handler_class">a <see cref="T:System.Type" /> with handler methods</param>
        <remarks>
          <para>
	    Connects the signals defined in the glade file with static handler methods provided by the given <see cref="T:System.Type" />,
	    <see paramref="handler_class" />.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Autoconnect">
      <MemberSignature Language="C#" Value="public void Autoconnect (object handler);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <summary>Automatically connect signals</summary>
        <param name="handler">an <see cref="T:System.Object" /> with handler methods</param>
        <remarks>
          <para>
	    Connects the signals definied in the glade file with static handler methods provided by the given object, <see paramref="handler" />.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCommonParams">
      <MemberSignature Language="C#" Value="public void SetCommonParams (Gtk.Widget widget, Glade.WidgetInfo info);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widget" Type="Gtk.Widget" />
        <Parameter Name="info" Type="Glade.WidgetInfo" />
      </Parameters>
      <Docs>
        <summary>
	  Sets the common parameters on a widget, and is responsible for
	  inserting it into the <see cref="T:Glade.XML" /> object's internal structures.
	</summary>
        <param name="widget">the widget to set parameters on</param>
        <param name="info">the <see cref="T:Glade.WidgetInfo" /> structure for <see paramref="widget" /></param>
        <remarks>
          <para>
	    Sets the common parameters on <see cref="widget" />, and is responsible
	    for inserting it into the <see cref="T:Glade.XML" /> object's internal
	    structures.  It will also add the children to this widget.
	    Usually this function is only called by
	    <see cref="T:Glade.XML.BuildWidget(Glade.WidgetInfo)" />, but is exposed for difficult
	    cases, such as setting up <see cref="T:Gtk.Toolbar" /> buttons and the like.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleInternalChild">
      <MemberSignature Language="C#" Value="public void HandleInternalChild (Gtk.Widget parent, Glade.ChildInfo child_info);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Gtk.Widget" />
        <Parameter Name="child_info" Type="Glade.ChildInfo" />
      </Parameters>
      <Docs>
        <summary>
	  This function is intended to be called by the build_children
	  callback for container widgets.
	</summary>
        <param name="parent">the parent widget</param>
        <param name="child_info">the <see cref="T:Glade.ChildInfo" /> structure for the child</param>
        <remarks>
          <para>
	     This function is intended to be called by the
	     build_children callback for container widgets.  If the
	     build_children callback encounters a child with the
	     internal-child attribute set, then it should call this
	     function to handle it and then continue on to the next
	     child.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalAutoconnect">
      <MemberSignature Language="C#" Value="public void SignalAutoconnect ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Automatically connect signals</summary>
        <remarks>
          <para>
            This method uses gmodule's introspective features to look
            at the application's symbol table.  From here it tries to
            match the signal handler names given in the interface
            description with symbols in the application and connects
            the signals.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="public bool Construct (string fname, string root, string domain);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fname" Type="System.String" />
        <Parameter Name="root" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
          This routine can be used by bindings (such as gtk--) to help
          construct a <see cref="T:Glade.XML" /> object, if it is
          needed.
        </summary>
                <param name="fname">the XML filename</param>
        <param name="root">the root widget node, or <see langword="null" /> </param>
        <param name="domain">the translation domain, or <see langword="null" /></param>
        <returns><see langword="true" /> if construction succeeded</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureAccel">
      <MemberSignature Language="C#" Value="public Gtk.AccelGroup EnsureAccel ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.AccelGroup</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
           This function is used to get the current
           <see cref="T:Gtk.AccelGroup" />. If there isn't one, a new one
           is created and bound to the current toplevel window (if a
           toplevel has been set).
        </summary>
        <returns>the current <see cref="T:Gtk.AccelGroup" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPackingProperty">
      <MemberSignature Language="C#" Value="public void SetPackingProperty (Gtk.Widget parent, Gtk.Widget child, string name, string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Gtk.Widget" />
        <Parameter Name="child" Type="Gtk.Widget" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
          This sets the packing property on container <see paramref="parent" /> of widget <see paramref="child" /> with
          <see paramref="name" /> to <see paramref="value" /></summary>
        <param name="parent">the container widget.</param>
        <param name="child">the contained child</param>
        <param name="name">the name of the property</param>
        <param name="value">its stringified value</param>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildWidget">
      <MemberSignature Language="C#" Value="public Gtk.Widget BuildWidget (Glade.WidgetInfo info);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Widget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Glade.WidgetInfo" />
      </Parameters>
      <Docs>
        <summary>
          This function is not intended for people who just use
          libglade.
        </summary>
        <param name="info">the <see cref="T:Glade.WidgetInfo" /> structure for the widget.</param>
        <returns>the newly created widget.</returns>
        <remarks>
          <para>
            This function is not intended for people who just use
            libglade. Instead it is for people extending it (it is
            designed to be called in the child build routine defined
            for the parent widget). It first checks the type of the
            widget from the class tag, then calls the corresponding
            widget creation routine.  This routine sets up all the
            settings specific to that type of widget.  Then general
            widget settings are performed on the widget.  Then it sets
            up accelerators for the widget, and extracts any signal
            information for the widget.  Then it checks to see if
            there are any child widget nodes for this widget, and if
            so calls the widget's build routine, which will create the
            children with this function and add them to the widget in
            the appropriate way.  Finally it returns the widget.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelativeFile">
      <MemberSignature Language="C#" Value="public string RelativeFile (string filename);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
          This function resolves a relative pathname, using the
          directory of the XML file as a base.
        </summary>
        <param name="filename">a filename</param>
        <returns>The absolute filename</returns>
        <remarks>
          <para>
            This function resolves a relative pathname, using the
            directory of the XML file as a base.  If the pathname is
            absolute, then the original filename is returned.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalAutoconnectFull">
      <MemberSignature Language="C#" Value="public void SignalAutoconnectFull (Glade.XMLConnectFunc func);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="func" Type="Glade.XMLConnectFunc" />
      </Parameters>
      <Docs>
        <summary>
          This function is similar to <see cref="M:Glade.XML.SignalConnectFull(System.String,Glade.XMLConnectFunc)" />
          except that it will try to connect all signals in the
          interface, not just a single named handler.  It can be
          thought of the interpeted language binding version of
          <see cref="M:Glade.XML.SignalAutoconnect" />, except that it does not
          require gmodule to function correctly.
        </summary>
        <param name="func">the function used to connect the signals.</param>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleWidgetProp">
      <MemberSignature Language="C#" Value="public void HandleWidgetProp (Gtk.Widget widget, string prop_name, string value_name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widget" Type="Gtk.Widget" />
        <Parameter Name="prop_name" Type="System.String" />
        <Parameter Name="value_name" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Used to set properties on <see cref="T:Gtk.Widget" />s</summary>
        <param name="widget">the property the widget to set the property on.</param>
        <param name="prop_name">the name of the property.</param>
        <param name="value_name">the name of the widget used as the value for the property.</param>
        <remarks>
          <para>
            Some widgets have properties of type <see cref="T:Gtk.Widget" />.  These are
            represented as the widget name in the glade file.  When
            constructing the interface, the widget specified as the
            value for a property may not exist yet.
          </para>
          <para>
            Rather than setting the property directly, this function
            should be used.  It will perform the name to <see cref="T:Gtk.Widget" /> conversion,
            and if the widget is yet to be constructed, defer setting the
            property until the widget is constructed.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWidgetPrefix">
      <MemberSignature Language="C#" Value="public GLib.List GetWidgetPrefix (string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>GLib.List</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
          Retrieves a <see cref="T:GLib.List" /> of widgets whose name
          share the same prefix
        </summary>
        <param name="name">the beginning of a widget name</param>
        <returns>
          a <see cref="T:GLib.List" /> of widgets whose name starts
          with <see paramref="name" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWidget">
      <MemberSignature Language="C#" Value="public Gtk.Widget GetWidget (string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Widget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
          Retrieves a widget stored in the <see cref="T:Glade.XML" /> by name
        </summary>
        <param name="name">the name of the widget to retrieve</param>
        <returns>
          the widget specified by <see paramref="name" /> or
          <see langword="null" /> if no Widgets of that name exists
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueFromString">
      <MemberSignature Language="C#" Value="public bool SetValueFromString (IntPtr pspec, string str1ng, GLib.Value value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pspec" Type="System.IntPtr" />
        <Parameter Name="str1ng" Type="System.String" />
        <Parameter Name="value" Type="GLib.Value" />
      </Parameters>
      <Docs>
        <summary>GParamSpec needs to be wrapped</summary>
        <param name="pspec">To be added: an object of type 'IntPtr'</param>
        <param name="str1ng">To be added: an object of type 'string'</param>
        <param name="value">To be added: an object of type 'GLib.Value'</param>
        <returns>To be added: an object of type 'bool'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalConnectFull">
      <MemberSignature Language="C#" Value="public void SignalConnectFull (string handler_name, Glade.XMLConnectFunc func);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler_name" Type="System.String" />
        <Parameter Name="func" Type="Glade.XMLConnectFunc" />
      </Parameters>
      <Docs>
        <summary>
          This function is similar to <see cref="M:Glade.XML.SignalAutoConnect" />, except
          that it allows you to give an arbitrary function that will
          be used for actually connecting the signals.  This is mainly
          useful for writers of interpreted language bindings, or
          applications where you need more control over the signal
          connection process.
        </summary>
        <param name="handler_name">the name of the signal handler that we want to connect.</param>
        <param name="func">the function to use to connect the signals.</param>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected virtual void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XML (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of XML, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XML (string fname, string root, string domain);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="fname" Type="System.String" />
        <Parameter Name="root" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Creates an <see cref="T:Glade.XML" /> from a file </summary>
        <param name="fname">the filename</param>
        <param name="root">
          the widget node to start building from, or <see langword="null" />.
        </param>
        <param name="domain">
          the translation domain for the XML file
          (<see langword="null" /> is the default)
        </param>
        <returns>
          the newly created <see cref="T:Glade.XML" /> object, or
          <see langword="null" /> if the operation failed.
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XML (string buffer, int size, string root, string domain);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="buffer" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="root" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Creates an <see cref="T:Glade.XML" /> object from a buffer</summary>
        <param name="buffer">
          a string containing the content of the glade XML file
        </param>
        <param name="size">the length of <see paramref="buffer" /></param>
        <param name="root">
          the widget node to start building from, or <see langword="null" />.
        </param>
        <param name="domain">
          the translation domain for the XML file
          (<see langword="null" /> is the default)
        </param>
        <returns>
          the newly created <see cref="T:Glade.XML" /> object, or
          <see langword="null" /> if the operation failed.
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XML ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'Glade.XML'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The GLib Type for Glade.XML</summary>
        <returns>The GLib Type for the Glade.XML class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Filename">
      <MemberSignature Language="C#" Value="public string Filename { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>the filename of the <see cref="T:Glade.XML" /> object</summary>
        <returns>the filename that this Glade XML object is created from</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Toplevel">
      <MemberSignature Language="C#" Value="public Gtk.Window Toplevel { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Window</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>
          This is used while the tree is being built to set the toplevel window that
          is currently being built.
        </summary>
        <param name="value">To be added: an object of type 'Gtk.Window'</param>
        <returns>To be added: an object of type 'Gtk.Window'</returns>
        <remarks>
          <para>
            This is used while the tree is being built to set the
            toplevel window that is currently being built.  It is
            mainly used to enable <see cref="T:Gtk.AccelGroup" />'s to be bound to the
            correct window, but could have other uses.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XML (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">GLib type for the type</param>
        <returns>Creates a new instance of XML, using the GLib-provided type</returns>
        <remarks>
          <para>This is a constructor used by derivative types of <see cref="T:Glade.XML" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XML (System.IO.Stream s, string root, string domain);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="s" Type="System.IO.Stream" />
        <Parameter Name="root" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
          Creates an <see cref="T:Glade.XML" /> object from a
          <see cref="T:System.IO.Stream" /></summary>
        <param name="s">a <see cref="T:System.IO.Stream" /></param>
        <param name="root">
          the widget node to start building from, or <see langword="null" />.
        </param>
        <param name="domain">
          the translation domain for the XML file
          (<see langword="null" /> is the default)
        </param>
        <returns>
          the newly created <see cref="T:Glade.XML" /> object, or
          <see langword="null" /> if the operation failed.
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XML (System.Reflection.Assembly assembly, string resource_name, string root, string domain);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="resource_name" Type="System.String" />
        <Parameter Name="root" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>
        Creates an <see cref="T:Glade.XML" /> object from an
        <see cref="T:System.Reflection.Assembly" />
        </summary>
        <param name="assembly">
          an <see cref="T:System.Reflection.Assembly" />, or
          <see langword="null" /> to use the current assembly
        </param>
        <param name="resource_name">the name of the resource in <see paramref="assembly" /></param>
        <param name="root">
          the widget node to start building from, or <see langword="null" />.
        </param>
        <param name="domain">
          the translation domain for the XML file
          (<see langword="null" /> is the default)
        </param>
        <returns>
          the newly created <see cref="T:Glade.XML" /> object, or
          <see langword="null" /> if the operation failed.
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>