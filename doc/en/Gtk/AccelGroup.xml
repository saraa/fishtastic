<Type Name="AccelGroup" FullName="Gtk.AccelGroup">
  <TypeSignature Language="C#" Value="public class AccelGroup : GLib.Object, IWrapper, IDisposable" Maintainer="RJS" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Groups of global keyboard accelerators for an entire GtkWindow</summary>
    <remarks>
      <para>
        A GtkAccelGroup represents a group of keyboard accelerators, typically attached to a toplevel GtkWindow (with Gtk.Window.AddAccelGroup ()). Usually you won't need to create a Gtk.AccelGroup directly; instead, when using Gtk.ItemFactory, Gtk# automatically sets up the accelerators for your menus in the item factory's Gtk.AccelGroup.
      </para>
      <para>
        Note that accelerators are different from mnemonics. Accelerators are shortcuts for activating a menu item; they appear alongside the menu item they're a shortcut for. For example "Ctrl+Q" might appear alongside the "Quit" menu item. Mnemonics are shortcuts for GUI elements such as text entries or buttons; they appear as underlined characters. See Gtk.Label.NewWithMnemonic (). Menu items can have both accelerators and mnemonics, of course.
      </para>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>GLib.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="FromAccelClosure">
      <MemberSignature Language="C#" Value="public static Gtk.AccelGroup FromAccelClosure (IntPtr closure);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.AccelGroup</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closure" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Finds the <see cref="T:Gtk.AccelGroup" /> to which closure is connected.</summary>
        <param name="closure">A GClosure (<see cref="T:System.IntPtr" />)</param>
        <returns>The <see cref="T:Gtk.AccelGroup" /> to which 'closure' is connected, or <see cref="langword:null" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public void Unlock ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Undoes the last call to <see cref="M:Gtk.AccelGroup.Lock ()" /> on its object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public bool Disconnect (IntPtr closure);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closure" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Removes an accelerator previously installed through <see cref="M:Gtk.AccelGroup.Connect ()" />.</summary>
        <param name="closure">The closure to remove from this accelerator group.</param>
        <returns>
          <see cref="langword:true" /> if the closure was found and got disconnected</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ConnectByPath">
      <MemberSignature Language="C#" Value="public void ConnectByPath (string accel_path, IntPtr closure);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accel_path" Type="System.String" />
        <Parameter Name="closure" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Installs an accelerator in this group, using an accelerator path to look up the appropriate key and modifiers (see <see cref="M:Gtk.AccelMap.AddEntry ()" />)). When the group is being activated in response to a call to <see cref="M:Gtk.AccelGroup.Activate ()" />, 'closure' will be invoked if the accel_key and accel_mods from <see cref="M:Gtk.AccelGroup.Activate ()" /> match the key and modifiers for the path.</summary>
        <param name="accel_path">Path used for determining key and modifiers.</param>
        <param name="closure">Closure to be executed upon accelerator activation</param>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public Gtk.AccelKey Find (IntPtr data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.AccelKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="data">To be added: an object of type 'IntPtr'</param>
        <returns>To be added: an object of type 'Gtk.AccelKey'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisconnectKey">
      <MemberSignature Language="C#" Value="public bool DisconnectKey (uint accel_key, Gdk.ModifierType accel_mods);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accel_key" Type="System.UInt32" />
        <Parameter Name="accel_mods" Type="Gdk.ModifierType" />
      </Parameters>
      <Docs>
        <summary>Removes an accelerator previously installed through <see cref="M:Gtk.AccelGroup.Connect (uint, Gdk.ModifierType, Gtk.AccelFlags, System.IntPt)" />.</summary>
        <param name="accel_key">Key value of the accelerator.</param>
        <param name="accel_mods">Modifier combination of the accelerator.</param>
        <returns>
          <see cref="langword:true" /> if there was an accelerator which could be removed, <see cref="langword:false" /> otherwise.</returns>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public Gtk.AccelGroupEntry Query (uint accel_key, Gdk.ModifierType accel_mods, uint n_entries);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.AccelGroupEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accel_key" Type="System.UInt32" />
        <Parameter Name="accel_mods" Type="Gdk.ModifierType" />
        <Parameter Name="n_entries" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <summary>Queries an accelerator group for all entries matching accel_key and accel_mods.</summary>
        <param name="accel_key">Key value of the accelerator.</param>
        <param name="accel_mods">Modifier combination of the accelerator.</param>
        <param name="n_entries">Location to return the number of entries found, or <see cref="langword:null" />.</param>
        <returns>An array of n_entries <see cref="T:Gtk.AccelGroupEntry" /> elements, or <see cref="langword:null" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Locks the given accelerator group.</summary>
        <remarks>Locking an accelerator group prevents the accelerators contained within it to be changed during runtime. Refer to <see cref="M:Gtk.AccelMap.ChangeEntry ()" /> about runtime accelerator changes. If called more than once, accel_group remains locked until <see cref="M:Gtk.AccelGroup.Unlock ()" /> has been called an equivalent number of times.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (uint accel_key, Gdk.ModifierType accel_mods, Gtk.AccelFlags accel_flags, IntPtr closure);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accel_key" Type="System.UInt32" />
        <Parameter Name="accel_mods" Type="Gdk.ModifierType" />
        <Parameter Name="accel_flags" Type="Gtk.AccelFlags" />
        <Parameter Name="closure" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Installs an accelerator in this group. When accel_group is being activated in response to a call to <see cref="M:Gtk.AccelGroup.Activate ()" />, closure will be invoked if the accel_key and accel_mods from <see cref="M:Gtk.AccelGroup.Activate ()" /> match those of this connection. The signature used for the closure is that of <see cref="M:Gtk.AccelGroup.Activate ()" />.</summary>
        <param name="accel_key">Key value of the accelerator.</param>
        <param name="accel_mods">Modifier combination of the accelerator.</param>
        <param name="accel_flags">A flag mask to configure this accelerator.</param>
        <param name="closure">Closure to be executed upon accelerator activation.</param>
        <remarks>Note that, due to implementation details, a single closure can only be connected to one accelerator group.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected virtual void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccelGroup (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of AccelGroup, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccelGroup ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'Gtk.AccelGroup'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The GLib Type for Gtk.AccelGroup</summary>
        <returns>The GLib Type for the Gtk.AccelGroup class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AccelChanged">
      <MemberSignature Language="C#" Value="public event GtkSharp.AccelChangedHandler AccelChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccelGroup (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">GLib type for the type</param>
        <returns>Creates a new instance of AccelGroup, using the GLib-provided type</returns>
        <remarks>
          <para>This is a constructor used by derivative types of <see cref="T:Gtk.AccelGroup" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>