<Type Name="Curve" FullName="Gtk.Curve">
  <TypeSignature Language="C#" Value="public class Curve : Gtk.DrawingArea, Implementor, IWrapper, IWrapper, IDisposable" Maintainer="Hector Gomez M" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>The <see cref="T:Gtk.Curve" /> widget allows the user to edit a curve covering a range of values.</summary>
    <remarks>
      <para>
      The <see cref="T:Gtk.Curve" /> widget allows the user to edit a curve covering a range of values. It is typically used to fine-tune color balances in graphics applications like the Gimp. The <see cref="T:Gtk.Curve" /> widget has 3 modes of operation - spline, linear and free. In spline mode the user places points on the curve which are automatically connected together into a smooth curve. In linear mode the user places points on the curve which are connected by straight lines. In free mode the user can draw the points of the curve freely, and they are not connected at all.
     </para>
      <para>
      NOTE: this widget is considered too specialized/little-used for GTK+, and will in the future be moved to some other package. If your application needs this widget, feel free to use it, as the widget does work and is useful in some applications; it's just not of general interest. However, we are not accepting new features for the widget, and it will eventually move out of the GTK+ distribution.
     </para>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gtk.DrawingArea</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Atk.Implementor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the curve to a straight line from the minimum x and y values to the maximum x and y values (i.e. from the bottom-left to the top-right corners).</summary>
        <remarks>
          <para>
          Resets the curve to a straight line from the minimum x and y values to the maximum x and y values (i.e. from the bottom-left to the top-right corners). The curve type is not changed.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRange">
      <MemberSignature Language="C#" Value="public void SetRange (float min_x, float max_x, float min_y, float max_y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="min_x" Type="System.Single" />
        <Parameter Name="max_x" Type="System.Single" />
        <Parameter Name="min_y" Type="System.Single" />
        <Parameter Name="max_y" Type="System.Single" />
      </Parameters>
      <Docs>
        <summary>Sets the minimum and maximum x and y values of the curve.</summary>
        <param name="min_x">The minimum x value.</param>
        <param name="max_x">The maximum x value.</param>
        <param name="min_y">The minimum y value.</param>
        <param name="max_y">The maximum y value.</param>
        <remarks>
          <para>
          Sets the minimum and maximum x and y values of the curve. The curve is also reset with a call to <see cref="M:Gtk.Curve.Reset" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVector">
      <MemberSignature Language="C#" Value="public void SetVector (int veclen, float [] vector);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="veclen" Type="System.Int32" />
        <Parameter Name="vector" Type="System.Single []" />
      </Parameters>
      <Docs>
        <summary>Sets the vector of points on the curve.</summary>
        <param name="veclen">The number of points.</param>
        <param name="vector">The points on the curve.</param>
        <remarks>
          <para>
          Sets the vector of points on the curve. The curve type is set to <see cref="F:Gtk.CurveType.Free" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVector">
      <MemberSignature Language="C#" Value="public void GetVector (int veclen, float [] vector);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="veclen" Type="System.Int32" />
        <Parameter Name="vector" Type="System.Single []" />
      </Parameters>
      <Docs>
        <summary>Returns a vector of points representing the curve.</summary>
        <param name="veclen">The number of points to calculate.</param>
        <param name="vector">Returns the points.</param>
        <remarks>
          <para>
          Returns a vector of points representing the curve.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected virtual void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Curve (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of Curve, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Curve ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Constructor.</summary>
        <returns>An instance of <see cref="T:Gtk.Curve" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The GLib Type for Gtk.Curve</summary>
        <returns>The GLib Type for the Gtk.Curve class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public float Gamma { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>Recomputes the entire curve using the given gamma value.</summary>
        <param name="value">A gamma value.</param>
        <returns>A gamma value.</returns>
        <remarks>
          <para>
          A gamma value of 1 results in a straight line. Values greater than 1 result in a curve above the straight line. Values less than 1 result in a curve below the straight.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxY">
      <MemberSignature Language="C#" Value="public float MaxY { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>The maximum y value of the gamma curve.</summary>
        <param name="value">A max y value.</param>
        <returns>A max y value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MaxX">
      <MemberSignature Language="C#" Value="public float MaxX { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>The maximum x value of the gamma curve.</summary>
        <param name="value">A max x value.</param>
        <returns>A max x value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MinY">
      <MemberSignature Language="C#" Value="public float MinY { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>The minimum y value of the gamma curve.</summary>
        <param name="value">A min y value.</param>
        <returns>A min y value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MinX">
      <MemberSignature Language="C#" Value="public float MinX { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>The minimum x value of the gamma curve.</summary>
        <param name="value">A min x value.</param>
        <returns>A min x value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CurveType">
      <MemberSignature Language="C#" Value="public Gtk.CurveType CurveType { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.CurveType</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>Sets the type of the curve.</summary>
        <param name="value">The type of the curve.</param>
        <returns>A <see cref="T:Gtk.CurveType" />.</returns>
        <remarks>
          <para>
          The curve will remain unchanged except when changing from a free curve to a linear or spline curve, in which case the curve will be changed as little as possible.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurveTypeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurveTypeChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when the curve type has been changed.</summary>
        <remarks>
          <para>
          The curve type can be changed explicitly with a call to <see cref="P:Gtk.Curve.CurveType" />. It is also changed as a side-effect of calling <see cref="M:Gtk.Curve.Reset" /> or <see cref="P:Gtk.Curve.Gamma" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Curve (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">GLib type for the type</param>
        <returns>Creates a new instance of Curve, using the GLib-provided type</returns>
        <remarks>
          <para>This is a constructor used by derivative types of <see cref="T:Gtk.Curve" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>