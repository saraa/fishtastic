<?xml version="1.0"?>
<doc>
    <assembly>
        <name>glib-sharp</name>
    </assembly>
    <members>
        <member name="T:GtkSharp.SignalCallback">
            <summary>
            SignalCallback Class
            </summary>
                        <remarks>
            Base Class for GSignal to C# event marshalling.
            </remarks>
        </member>
        <member name="M:GtkSharp.SignalCallback.#ctor(GLib.Object,System.EventHandler)">
            <summary>
            SignalCallback Constructor
            </summary>
                        <remarks>
            Initializes instance data.
            </remarks>
        </member>
        <member name="T:GLib.Boxed">
            <summary> 
            Boxed Class
            </summary>
                        <remarks>
            An abstract base class to derive structures and marshal them.
            </remarks>
        </member>
        <member name="M:GLib.Boxed.#ctor(System.IntPtr)">
            <summary>
            Boxed Constructor
            </summary>
            
            <remarks>
            Constructs a Boxed type from a raw ref.
            </remarks>
        </member>
        <member name="M:GLib.Boxed.FromNative(System.IntPtr)">
            <summary>
            FromNative Method
            </summary>
            
            <remarks>
            Gets a Boxed type from a raw IntPtr.
            </remarks>
        </member>
        <member name="P:GLib.Boxed.Handle">
            <summary>
            Handle Property
            </summary>
            
            <remarks>
            Gets a marshallable IntPtr.
            </remarks>
        </member>
        <member name="P:GLib.Boxed.Raw">
            <summary>
            Raw Property
            </summary>
            
            <remarks>
            Gets or sets a marshallable IntPtr.
            </remarks>
        </member>
        <member name="T:GtkSharp.SignalArgs">
            <summary>
            SignalArgs Class
            </summary>
                        <remarks>
            Arguments and return value for signals.
            </remarks>
        </member>
        <member name="M:GtkSharp.SignalArgs.#ctor">
            <summary>
            SignalArgs Constructor
            </summary>
                        <remarks>
            Creates a SignalArgs object with no return value and 
            no arguments.
            </remarks>
        </member>
        <member name="M:GtkSharp.SignalArgs.#ctor(System.Object)">
            <summary>
            SignalArgs Constructor
            </summary>
                        <remarks>
            Creates a SignalArgs object with a return value and 
            no arguments.
            </remarks>
        </member>
        <member name="M:GtkSharp.SignalArgs.#ctor(System.Object,System.Object[])">
            <summary>
            SignalArgs Constructor
            </summary>
                        <remarks>
            Creates a SignalArgs object with a return value and 
            a list of arguments.
            </remarks>
        </member>
        <member name="P:GtkSharp.SignalArgs.Args">
            <summary>
            Args Property
            </summary>
                        <remarks>
            A list of arguments.
            </remarks>
        </member>
        <member name="P:GtkSharp.SignalArgs.RetVal">
            <summary>
            RetVal Property
            </summary>
                        <remarks>
            The return value.
            </remarks>
        </member>
        <member name="T:GLib.TimeoutHandler">
            <summary>
            TimeoutHandler Delegate
            </summary>
                        <remarks>
            Delegate used for Timeouts in the GLib main loop. Return
            true to restart the timeout.  Returning false clears the
            timeout.
            </remarks>
        </member>
        <member name="T:GLib.Timeout">
            <summary>
            Timeout Class
            </summary>
                        <remarks>
            Allows the installation of Timeout Handlers on the GLib main
            loop.
            </remarks>
        </member>
        <member name="T:GLib.TypeFundamentals">
            <summary>
            TypeFundamentals enumeration
            </summary>
                        <remarks>
            The built-in types available in GLib.
            </remarks>
        </member>
        <member name="T:GLib.Object">
            <summary>
            Object Class
            </summary>
                        <remarks>
            Wrapper class for GObject.
            </remarks>
        </member>
        <member name="M:GLib.Object.GetObject(System.IntPtr)">
            <summary>
            GetObject Shared Method 
            </summary>
                        <remarks>
            Used to obtain a CLI typed object associated with a 
            given raw object pointer. This method is primarily
            used to wrap object references that are returned 
            by either the signal system or raw class methods that
            return GObject references.
            </remarks>
                        <returns>
            The wrapper instance.
            </returns>
        </member>
        <member name="M:GLib.Object.#ctor">
            <summary>
            Object Constructor
            </summary>
                        <remarks>
            Dummy constructor needed for derived classes.
            </remarks>
        </member>
        <member name="M:GLib.Object.#ctor(System.IntPtr)">
            <summary>
            Object Constructor
            </summary>
                        <remarks>
            Creates an object from a raw object reference.
            </remarks>
        </member>
        <member name="M:GLib.Object.Equals(System.Object)">
            <summary>
            Equals Method
            </summary>
                        <remarks>
            Checks equivalence of two Objects.
            </remarks>
        </member>
        <member name="M:GLib.Object.GetHashCode">
            <summary>
            GetHashCode Method
            </summary>
                        <remarks>
            Calculates a hashing value.
            </remarks>
        </member>
        <member name="M:GLib.Object.GetData(System.String)">
            <summary>
            GetData Method
            </summary>
                        <remarks>
            Accesses arbitrary data storage on the Object.
            </remarks>
        </member>
        <member name="M:GLib.Object.SetData(System.String,System.Object)">
            <summary>
            SetData Method
            </summary>
                        <remarks>
            Stores arbitrary data on the Object.
            </remarks>
        </member>
        <member name="M:GLib.Object.GetProperty(System.String,GLib.Value)">
            <summary>
            GetProperty Method
            </summary>
                        <remarks>
            Accesses a Value Property.
            </remarks>
        </member>
        <member name="M:GLib.Object.SetProperty(System.String,GLib.Value)">
            <summary>
            SetProperty Method
            </summary>
                        <remarks>
            Accesses a Value Property.
            </remarks>
        </member>
        <member name="P:GLib.Object.Raw">
            <summary>
            Raw Property
            </summary>
                        <remarks>
            The raw GObject reference associated with this wrapper.
            Only subclasses of Object can access this read/write
            property.  For public read-only access, use the
            Handle property.
            </remarks>
        </member>
        <member name="P:GLib.Object.Handle">
            <summary>
            Handle Property
            </summary>
                        <remarks>
            The raw GObject reference associated with this object.
            Subclasses can use Raw property for read/write
            access.
            </remarks>
        </member>
        <member name="P:GLib.Object.EventList">
            <summary>
            EventList Property
            </summary>
                        <remarks>
            A list object containing all the events for this 
            object indexed by the Gtk+ signal name.
            </remarks>
        </member>
        <member name="T:GLib.SList">
            <summary>
            SList Class
            </summary>
                        <remarks>
            Wrapper class for GSList.
            </remarks>
        </member>
        <member name="P:GLib.SList.Handle">
            <summary>
            Handle Property
            </summary>
                        <remarks>
            A raw GSList reference for marshaling situations.
            </remarks>
        </member>
        <member name="T:GLib.Value">
            <summary> 
            Value Class
            </summary>
                        <remarks>
            An arbitrary data type similar to a CORBA Any which is used
            to get and set properties on Objects.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.IntPtr,System.String)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value corresponding to the type of the
            specified property.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.Boolean)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified boolean.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(GLib.Boxed)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified boxed type.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.Double)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified double.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.Single)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified float.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.Int32)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified integer.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(GLib.Object)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified object.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.IntPtr)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified pointer.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.String)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified string.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.UInt32)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified uint.
            </remarks>
        </member>
        <member name="M:GLib.Value.#ctor(System.IntPtr,System.String,GLib.EnumWrapper)">
            <summary>
            Value Constructor
            </summary>
            
            <remarks>
            Constructs a Value from a specified enum wrapper.
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~System.Boolean">
            <summary>
            Value to Boolean Conversion
            </summary>
            
            <remarks>
            Extracts a bool from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            boolean value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~GLib.Boxed">
            <summary>
            Value to Boxed Conversion
            </summary>
            
            <remarks>
            Extracts a boxed type from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            boxed type value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~System.Double">
            <summary>
            Value to Double Conversion
            </summary>
            
            <remarks>
            Extracts a double from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            double value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~System.Single">
            <summary>
            Value to Float Conversion
            </summary>
            
            <remarks>
            Extracts a float from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            float value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~System.Int32">
            <summary>
            Value to Integer Conversion
            </summary>
            
            <remarks>
            Extracts an int from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            integer value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~GLib.Object">
            <summary>
            Value to Object Conversion
            </summary>
            
            <remarks>
            Extracts an object from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            object value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~GLib.UnwrappedObject">
            <summary>
            Value to Unresolved Object Conversion
            </summary>
            
            <remarks>
            Extracts an object from a Value without looking up its wrapping
              class.
              Note, this method will produce an exception if the Value does
              not hold a object value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~System.IntPtr">
            <summary>
            Value to Pointer Conversion
            </summary>
            
            <remarks>
            Extracts a pointer from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            pointer value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~System.String">
            <summary>
            Value to String Conversion
            </summary>
            
            <remarks>
            Extracts a string from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            string value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~System.UInt32">
            <summary>
            Value to Unsigned Integer Conversion
            </summary>
            
            <remarks>
            Extracts an uint from a Value.  Note, this method
            will produce an exception if the Value does not hold a
            unsigned integer value.  
            </remarks>
        </member>
        <member name="M:GLib.Value.op_Explicit(GLib.Value)~GLib.EnumWrapper">
            <summary>
            Value to Enum Conversion
            </summary>
            
            <remarks>
            Extracts an enum from a Value.  Note, this method
            will produce an exception if the Value does not hold an
            enum value.  
            </remarks>
        </member>
        <member name="P:GLib.Value.Handle">
            <summary>
            Handle Property
            </summary>
            
            <remarks>
            Read only. Accesses a pointer to the raw GValue.
            </remarks>
        </member>
    </members>
</doc>
