//
// gdk/DragContext.custom
//
// Author: Ettore Perazzoli <ettore@ximian.com>
//
// Copyright (C) 2003 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


[DllImport("gdksharpglue")]
static extern DragProtocol gtksharp_drag_context_get_protocol (IntPtr ptr);

public unsafe DragProtocol DragProtocol {
	get {
		return gtksharp_drag_context_get_protocol (this.Handle);
	}
}


[DllImport("gdksharpglue")]
static extern bool gtksharp_drag_context_get_is_source (IntPtr ptr);

public bool IsSource {
	get {
		return gtksharp_drag_context_get_is_source (this.Handle);
	}
}


[DllImport("gdksharpglue")]
static extern IntPtr gtksharp_drag_context_get_source_window (IntPtr ptr);

public Gdk.Window SourceWindow {
	get {
		return GLib.Object.GetObject (gtksharp_drag_context_get_source_window (this.Handle), false) as Gdk.Window;
	}
}


[DllImport("gdksharpglue")]
static extern IntPtr gtksharp_drag_context_get_dest_window (IntPtr ptr);

public Gdk.Window DestWindow {
	get {
		return GLib.Object.GetObject (gtksharp_drag_context_get_dest_window (this.Handle), false) as Gdk.Window;
	}
}


[DllImport("gdksharpglue")]
static extern IntPtr gtksharp_drag_context_get_targets (IntPtr ptr);

public Atom [] Targets {
	get {
		GLib.List list = new GLib.List (gtksharp_drag_context_get_targets (this.Handle), typeof (Atom));

		Atom [] entries = new Atom [list.Count];

		int i = 0;
		foreach (Atom a in list)
			entries [i ++] = a;

		return entries;
	}
}


[DllImport("gdksharpglue")]
static extern DragAction gtksharp_drag_context_get_actions (IntPtr ptr);

public DragAction Actions {
	get {
		return gtksharp_drag_context_get_actions (this.Handle);
	}
}

[DllImport("gdksharpglue")]
static extern DragAction gtksharp_drag_context_get_suggested_action (IntPtr ptr);

public DragAction SuggestedAction {
	get {
		return gtksharp_drag_context_get_suggested_action (this.Handle);
	}
}


[DllImport("gdksharpglue")]
static extern DragAction gtksharp_drag_context_get_action (IntPtr ptr);

public DragAction Action {
	get {
		return gtksharp_drag_context_get_action (this.Handle);
	}
}


[DllImport("gdksharpglue")]
static extern uint gtksharp_drag_context_get_start_time (IntPtr ptr);

public uint StartTime {
	get {
		return gtksharp_drag_context_get_start_time (this.Handle);
	}
}

