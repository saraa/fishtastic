<?xml version="1.0" encoding="UTF-8"?>
<api><namespace name="Pango"><enum name="Alignment" cname="PangoAlignment" type="enum"><member cname="PANGO_ALIGN_LEFT" name="Left"/><member cname="PANGO_ALIGN_CENTER" name="Center"/><member cname="PANGO_ALIGN_RIGHT" name="Right"/></enum><enum name="AttrType" cname="PangoAttrType" type="enum"><member cname="PANGO_ATTR_INVALID" name="Invalid"/><member cname="PANGO_ATTR_LANGUAGE" name="Language"/><member cname="PANGO_ATTR_FAMILY" name="Family"/><member cname="PANGO_ATTR_STYLE" name="Style"/><member cname="PANGO_ATTR_WEIGHT" name="Weight"/><member cname="PANGO_ATTR_VARIANT" name="Variant"/><member cname="PANGO_ATTR_STRETCH" name="Stretch"/><member cname="PANGO_ATTR_SIZE" name="Size"/><member cname="PANGO_ATTR_FONT_DESC" name="FontDesc"/><member cname="PANGO_ATTR_FOREGROUND" name="Foreground"/><member cname="PANGO_ATTR_BACKGROUND" name="Background"/><member cname="PANGO_ATTR_UNDERLINE" name="Underline"/><member cname="PANGO_ATTR_STRIKETHROUGH" name="Strikethrough"/><member cname="PANGO_ATTR_RISE" name="Rise"/><member cname="PANGO_ATTR_SHAPE" name="Shape"/><member cname="PANGO_ATTR_SCALE" name="Scale"/></enum><enum name="CoverageLevel" cname="PangoCoverageLevel" type="enum"><member cname="PANGO_COVERAGE_NONE" name="None"/><member cname="PANGO_COVERAGE_FALLBACK" name="Fallback"/><member cname="PANGO_COVERAGE_APPROXIMATE" name="Approximate"/><member cname="PANGO_COVERAGE_EXACT" name="Exact"/></enum><enum name="Direction" cname="PangoDirection" type="enum"><member cname="PANGO_DIRECTION_LTR" name="Ltr"/><member cname="PANGO_DIRECTION_RTL" name="Rtl"/><member cname="PANGO_DIRECTION_TTB_LTR" name="TtbLtr"/><member cname="PANGO_DIRECTION_TTB_RTL" name="TtbRtl"/></enum><enum name="FontMask" cname="PangoFontMask" type="flags"><member cname="PANGO_FONT_MASK_FAMILY" name="Family" value="1 &lt;&lt; 0"/><member cname="PANGO_FONT_MASK_STYLE" name="Style" value="1 &lt;&lt; 1"/><member cname="PANGO_FONT_MASK_VARIANT" name="Variant" value="1 &lt;&lt; 2"/><member cname="PANGO_FONT_MASK_WEIGHT" name="Weight" value="1 &lt;&lt; 3"/><member cname="PANGO_FONT_MASK_STRETCH" name="Stretch" value="1 &lt;&lt; 4"/><member cname="PANGO_FONT_MASK_SIZE" name="Size" value="1 &lt;&lt; 5"/></enum><enum name="OTTableType" cname="PangoOTTableType" type="enum"><member cname="PANGO_OT_TABLE_GSUB" name="Gsub"/><member cname="PANGO_OT_TABLE_GPOS" name="Gpos"/></enum><enum name="Stretch" cname="PangoStretch" type="enum"><member cname="PANGO_STRETCH_ULTRA_CONDENSED" name="UltraCondensed"/><member cname="PANGO_STRETCH_EXTRA_CONDENSED" name="ExtraCondensed"/><member cname="PANGO_STRETCH_CONDENSED" name="Condensed"/><member cname="PANGO_STRETCH_SEMI_CONDENSED" name="SemiCondensed"/><member cname="PANGO_STRETCH_NORMAL" name="Normal"/><member cname="PANGO_STRETCH_SEMI_EXPANDED" name="SemiExpanded"/><member cname="PANGO_STRETCH_EXPANDED" name="Expanded"/><member cname="PANGO_STRETCH_EXTRA_EXPANDED" name="ExtraExpanded"/><member cname="PANGO_STRETCH_ULTRA_EXPANDED" name="UltraExpanded"/></enum><enum name="Style" cname="PangoStyle" type="enum"><member cname="PANGO_STYLE_NORMAL" name="Normal"/><member cname="PANGO_STYLE_OBLIQUE" name="Oblique"/><member cname="PANGO_STYLE_ITALIC" name="Italic"/></enum><enum name="TabAlign" cname="PangoTabAlign" type="enum"><member cname="PANGO_TAB_LEFT" name="Left"/></enum><enum name="Underline" cname="PangoUnderline" type="enum"><member cname="PANGO_UNDERLINE_NONE" name="None"/><member cname="PANGO_UNDERLINE_SINGLE" name="Single"/><member cname="PANGO_UNDERLINE_DOUBLE" name="Double"/><member cname="PANGO_UNDERLINE_LOW" name="Low"/></enum><enum name="Variant" cname="PangoVariant" type="enum"><member cname="PANGO_VARIANT_NORMAL" name="Normal"/><member cname="PANGO_VARIANT_SMALL_CAPS" name="SmallCaps"/></enum><enum name="Weight" cname="PangoWeight" type="enum"><member cname="PANGO_WEIGHT_ULTRALIGHT" name="Ultralight" value="200"/><member cname="PANGO_WEIGHT_LIGHT" name="Light" value="300"/><member cname="PANGO_WEIGHT_NORMAL" name="Normal" value="400"/><member cname="PANGO_WEIGHT_BOLD" name="Bold" value="700"/><member cname="PANGO_WEIGHT_ULTRABOLD" name="Ultrabold" value="800"/><member cname="PANGO_WEIGHT_HEAVY" name="Heavy" value="900"/></enum><enum name="WrapMode" cname="PangoWrapMode" type="enum"><member cname="PANGO_WRAP_WORD" name="Word"/><member cname="PANGO_WRAP_CHAR" name="Char"/></enum><callback name="FreeGCFunc" cname="PangoFreeGCFunc"><return-type type="void"/><parameters><parameter type="PangoContext*" name="context"/><parameter type="GC" name="gc"/></parameters></callback><callback name="GetGCFunc" cname="PangoGetGCFunc"><return-type type="GC"/><parameters><parameter type="PangoContext*" name="context"/><parameter type="PangoColor*" name="color"/><parameter type="GC" name="base_gc"/></parameters></callback><object name="Context" cname="PangoContext" parent="GObject"><method name="load_font" cname="pango_context_load_font"><return-type type="PangoFont*"/></method><method name="set_font_description" cname="pango_context_set_font_description"><return-type type="void"/></method><method name="get_font_description" cname="pango_context_get_font_description"><return-type type="PangoFontDescription*"/></method><method name="set_language" cname="pango_context_set_language"><return-type type="void"/></method><constructor cname="pango_context_new"/><method name="set_base_dir" cname="pango_context_set_base_dir"><return-type type="void"/></method><method name="load_fontset" cname="pango_context_load_fontset"><return-type type="PangoFontset*"/></method><method name="get_language" cname="pango_context_get_language"><return-type type="PangoLanguage*"/></method><method name="get_base_dir" cname="pango_context_get_base_dir"><return-type type="PangoDirection"/></method><method name="list_families" cname="pango_context_list_families"><return-type type="void"/></method><method name="get_metrics" cname="pango_context_get_metrics"><return-type type="PangoFontMetrics*"/></method><method name="set_font_map" cname="pango_context_set_font_map"><return-type type="void"/></method></object><object name="Font" cname="PangoFont" parent="GObject"><method name="describe" cname="pango_font_describe"><return-type type="PangoFontDescription*"/></method><method name="get_metrics" cname="pango_font_get_metrics"><return-type type="PangoFontMetrics*"/></method><method name="find_shaper" cname="pango_font_find_shaper"><return-type type="PangoEngineShape*"/></method><method name="get_glyph_extents" cname="pango_font_get_glyph_extents"><return-type type="void"/></method><method name="get_coverage" cname="pango_font_get_coverage"><return-type type="PangoCoverage*"/></method></object><object name="Fontset" cname="PangoFontset" parent="GObject"><method name="get_metrics" cname="pango_fontset_get_metrics"><return-type type="PangoFontMetrics*"/></method><method name="get_font" cname="pango_fontset_get_font"><return-type type="PangoFont*"/></method></object><object name="FontsetSimple" cname="PangoFontsetSimple" parent="PangoFontset"><method name="append" cname="pango_fontset_simple_append"><return-type type="void"/></method><method name="size" cname="pango_fontset_simple_size"><return-type type="int"/></method><constructor cname="pango_fontset_simple_new"/></object><object name="FontFace" cname="PangoFontFace" parent="GObject"><method name="describe" cname="pango_font_face_describe"><return-type type="PangoFontDescription*"/></method><method name="get_face_name" cname="pango_font_face_get_face_name"><return-type type="const-char*"/></method></object><object name="FontFamily" cname="PangoFontFamily" parent="GObject"><method name="list_faces" cname="pango_font_family_list_faces"><return-type type="void"/></method><method name="get_name" cname="pango_font_family_get_name"><return-type type="const-char*"/></method></object><object name="FontMap" cname="PangoFontMap" parent="GObject"><method name="list_families" cname="pango_font_map_list_families"><return-type type="void"/></method><method name="load_font" cname="pango_font_map_load_font"><return-type type="PangoFont*"/></method><method name="load_fontset" cname="pango_font_map_load_fontset"><return-type type="PangoFontset*"/></method></object><object name="Layout" cname="PangoLayout" parent="GObject"><method name="get_indent" cname="pango_layout_get_indent"><return-type type="int"/></method><method name="get_wrap" cname="pango_layout_get_wrap"><return-type type="PangoWrapMode"/></method><method name="set_text" cname="pango_layout_set_text"><return-type type="void"/></method><method name="set_attributes" cname="pango_layout_set_attributes"><return-type type="void"/></method><method name="set_justify" cname="pango_layout_set_justify"><return-type type="void"/></method><method name="set_width" cname="pango_layout_set_width"><return-type type="void"/></method><method name="index_to_pos" cname="pango_layout_index_to_pos"><return-type type="void"/></method><method name="set_wrap" cname="pango_layout_set_wrap"><return-type type="void"/></method><method name="get_single_paragraph_mode" cname="pango_layout_get_single_paragraph_mode"><return-type type="gboolean"/></method><method name="get_pixel_size" cname="pango_layout_get_pixel_size"><return-type type="void"/></method><method name="copy" cname="pango_layout_copy"><return-type type="PangoLayout*"/></method><constructor cname="pango_layout_new"/><method name="get_iter" cname="pango_layout_get_iter"><return-type type="PangoLayoutIter*"/></method><method name="get_spacing" cname="pango_layout_get_spacing"><return-type type="int"/></method><method name="get_size" cname="pango_layout_get_size"><return-type type="void"/></method><method name="set_markup" cname="pango_layout_set_markup"><return-type type="void"/></method><method name="get_log_attrs" cname="pango_layout_get_log_attrs"><return-type type="void"/></method><method name="set_font_description" cname="pango_layout_set_font_description"><return-type type="void"/></method><method name="get_attributes" cname="pango_layout_get_attributes"><return-type type="PangoAttrList*"/></method><method name="get_line_count" cname="pango_layout_get_line_count"><return-type type="int"/></method><method name="get_cursor_pos" cname="pango_layout_get_cursor_pos"><return-type type="void"/></method><method name="xy_to_index" cname="pango_layout_xy_to_index"><return-type type="gboolean"/></method><method name="set_markup_with_accel" cname="pango_layout_set_markup_with_accel"><return-type type="void"/></method><method name="get_extents" cname="pango_layout_get_extents"><return-type type="void"/></method><method name="get_justify" cname="pango_layout_get_justify"><return-type type="gboolean"/></method><method name="set_alignment" cname="pango_layout_set_alignment"><return-type type="void"/></method><method name="get_tabs" cname="pango_layout_get_tabs"><return-type type="PangoTabArray*"/></method><method name="get_pixel_extents" cname="pango_layout_get_pixel_extents"><return-type type="void"/></method><method name="set_single_paragraph_mode" cname="pango_layout_set_single_paragraph_mode"><return-type type="void"/></method><method name="set_tabs" cname="pango_layout_set_tabs"><return-type type="void"/></method><method name="get_alignment" cname="pango_layout_get_alignment"><return-type type="PangoAlignment"/></method><method name="get_context" cname="pango_layout_get_context"><return-type type="PangoContext*"/></method><method name="set_spacing" cname="pango_layout_set_spacing"><return-type type="void"/></method><method name="get_lines" cname="pango_layout_get_lines"><return-type type="GSList*"/></method><method name="context_changed" cname="pango_layout_context_changed"><return-type type="void"/></method><method name="get_text" cname="pango_layout_get_text"><return-type type="const-char*"/></method><method name="get_width" cname="pango_layout_get_width"><return-type type="int"/></method><method name="set_indent" cname="pango_layout_set_indent"><return-type type="void"/></method><method name="get_line" cname="pango_layout_get_line"><return-type type="PangoLayoutLine*"/></method><method name="move_cursor_visually" cname="pango_layout_move_cursor_visually"><return-type type="void"/></method></object><struct name="Analysis" cname="PangoAnalysis"><field cname="shape_engine" type="PangoEngineShape*"/><field cname="lang_engine" type="PangoEngineLang*"/><field cname="font" type="PangoFont*"/><field cname="level" type="guint8"/><field cname="language" type="PangoLanguage*"/><field cname="extra_attrs" type="GSList*"/></struct><struct name="AttrClass" cname="PangoAttrClass"><field cname="type" type="PangoAttrType"/><callback cname="copy"><return-type type="PangoAttribute*"/><parameters><parameter type="const-PangoAttribute*" name="attr"/></parameters></callback><callback cname="destroy"><return-type type="void"/><parameters><parameter type="PangoAttribute*" name="attr"/></parameters></callback><callback cname="equal"><return-type type="gboolean"/><parameters><parameter type="const-PangoAttribute*" name="attr1,"/></parameters></callback></struct><struct name="AttrColor" cname="PangoAttrColor"><field cname="attr" type="PangoAttribute"/><field cname="color" type="PangoColor"/></struct><struct name="AttrFloat" cname="PangoAttrFloat"><field cname="attr" type="PangoAttribute"/><field cname="value" type="double"/></struct><struct name="AttrFontDesc" cname="PangoAttrFontDesc"><field cname="attr" type="PangoAttribute"/><field cname="desc" type="PangoFontDescription*"/><constructor cname="pango_attr_font_desc_new"/></struct><struct name="AttrInt" cname="PangoAttrInt"><field cname="attr" type="PangoAttribute"/><field cname="value" type="int"/></struct><struct name="AttrIterator" cname="PangoAttrIterator"><field cname="next_attribute" type="GSList*"/><field cname="attribute_stack" type="GList*"/><field cname="start_index" type="int"/><field cname="end_index" type="int"/><method name="copy" cname="pango_attr_iterator_copy"><return-type type="PangoAttrIterator*"/></method><method name="get_font" cname="pango_attr_iterator_get_font"><return-type type="void"/></method><method name="range" cname="pango_attr_iterator_range"><return-type type="void"/></method><method name="destroy" cname="pango_attr_iterator_destroy"><return-type type="void"/></method><method name="get" cname="pango_attr_iterator_get"><return-type type="PangoAttribute*"/></method><method name="next" cname="pango_attr_iterator_next"><return-type type="gboolean"/></method></struct><struct name="AttrLanguage" cname="PangoAttrLanguage"><field cname="attr" type="PangoAttribute"/><field cname="value" type="PangoLanguage*"/><constructor cname="pango_attr_language_new"/></struct><boxed name="AttrList" cname="PangoAttrList"><field cname="ref_count" type="guint"/><field cname="attributes" type="GSList*"/><field cname="attributes_tail" type="GSList*"/><method name="change" cname="pango_attr_list_change"><return-type type="void"/></method><method name="splice" cname="pango_attr_list_splice"><return-type type="void"/></method><method name="copy" cname="pango_attr_list_copy"><return-type type="PangoAttrList*"/></method><method name="ref" cname="pango_attr_list_ref"><return-type type="void"/></method><method name="get_iterator" cname="pango_attr_list_get_iterator"><return-type type="PangoAttrIterator*"/></method><method name="insert" cname="pango_attr_list_insert"><return-type type="void"/></method><method name="insert_before" cname="pango_attr_list_insert_before"><return-type type="void"/></method><constructor cname="pango_attr_list_new"/><method name="unref" cname="pango_attr_list_unref"><return-type type="void"/></method></boxed><struct name="AttrShape" cname="PangoAttrShape"><field cname="attr" type="PangoAttribute"/><field cname="ink_rect" type="PangoRectangle"/><field cname="logical_rect" type="PangoRectangle"/><constructor cname="pango_attr_shape_new"/></struct><struct name="AttrString" cname="PangoAttrString"><field cname="attr" type="PangoAttribute"/><field cname="value" type="char*"/></struct><struct name="Attribute" cname="PangoAttribute"><field cname="klass" type="const-PangoAttrClass*"/><field cname="start_index" type="guint"/><field cname="end_index" type="guint"/><method name="destroy" cname="pango_attribute_destroy"><return-type type="void"/></method></struct><boxed name="Color" cname="PangoColor"><field cname="red" type="guint16"/><field cname="green" type="guint16"/><field cname="blue" type="guint16"/><method name="parse" cname="pango_color_parse"><return-type type="gboolean"/></method><method name="free" cname="pango_color_free"><return-type type="void"/></method></boxed><struct name="Coverage" cname="PangoCoverage"><field cname="ref_count" type="guint"/><field cname="n_blocks" type="int"/><field cname="data_size" type="int"/><field cname="blocks" type="PangoBlockInfo*"/><method name="ref" cname="pango_coverage_ref"><return-type type="PangoCoverage*"/></method><method name="to_bytes" cname="pango_coverage_to_bytes"><return-type type="void"/></method><method name="set" cname="pango_coverage_set"><return-type type="void"/></method><constructor cname="pango_coverage_new"/><method name="unref" cname="pango_coverage_unref"><return-type type="void"/></method><method name="copy" cname="pango_coverage_copy"><return-type type="PangoCoverage*"/></method><method name="max" cname="pango_coverage_max"><return-type type="void"/></method><method name="get" cname="pango_coverage_get"><return-type type="PangoCoverageLevel"/></method></struct><struct name="Engine" cname="PangoEngine"><field cname="id" type="gchar*"/><field cname="type" type="gchar*"/><field cname="length" type="gint"/></struct><struct name="EngineInfo" cname="PangoEngineInfo"><field cname="id" type="gchar*"/><field cname="engine_type" type="gchar*"/><field cname="render_type" type="gchar*"/><field cname="ranges" type="PangoEngineRange*"/><field cname="n_ranges" type="gint"/></struct><struct name="EngineLang" cname="PangoEngineLang"><field cname="engine" type="PangoEngine"/><callback cname="script_break"><return-type type="void"/><parameters><parameter type="const-char*" name="text,int"/></parameters></callback></struct><struct name="EngineRange" cname="PangoEngineRange"><field cname="start" type="guint32"/><field cname="end" type="guint32"/><field cname="langs" type="gchar*"/></struct><struct name="EngineShape" cname="PangoEngineShape"><field cname="engine" type="PangoEngine"/><callback cname="script_shape"><return-type type="void"/><parameters><parameter type="PangoFont*" name="font,const-char*"/></parameters></callback><callback cname="get_coverage"><return-type type="PangoCoverage*"/><parameters><parameter type="PangoFont*" name="font,PangoLanguage*"/></parameters></callback></struct><boxed name="FontDescription" cname="PangoFontDescription"><field cname="family_name" type="char*"/><field cname="style" type="PangoStyle"/><field cname="variant" type="PangoVariant"/><field cname="weight" type="PangoWeight"/><field cname="stretch" type="PangoStretch"/><field cname="mask" type="guint16"/><field cname="static_family" bits="1" type="guint"/><field cname="size" type="int"/><method name="set_variant" cname="pango_font_description_set_variant"><return-type type="void"/></method><method name="set_family" cname="pango_font_description_set_family"><return-type type="void"/></method><constructor cname="pango_font_description_new"/><method name="unset_fields" cname="pango_font_description_unset_fields"><return-type type="void"/></method><method name="set_stretch" cname="pango_font_description_set_stretch"><return-type type="void"/></method><method name="free" cname="pango_font_description_free"><return-type type="void"/></method><method name="set_family_static" cname="pango_font_description_set_family_static"><return-type type="void"/></method><method name="set_weight" cname="pango_font_description_set_weight"><return-type type="void"/></method><method name="set_style" cname="pango_font_description_set_style"><return-type type="void"/></method><method name="merge" cname="pango_font_description_merge"><return-type type="void"/></method><method name="set_size" cname="pango_font_description_set_size"><return-type type="void"/></method><method name="merge_static" cname="pango_font_description_merge_static"><return-type type="void"/></method></boxed><boxed name="FontMetrics" cname="PangoFontMetrics"><field cname="ref_count" type="guint"/><field cname="ascent" type="int"/><field cname="descent" type="int"/><field cname="approximate_char_width" type="int"/><field cname="approximate_digit_width" type="int"/><method name="unref" cname="pango_font_metrics_unref"><return-type type="void"/></method><method name="get_ascent" cname="pango_font_metrics_get_ascent"><return-type type="int"/></method><method name="ref" cname="pango_font_metrics_ref"><return-type type="PangoFontMetrics*"/></method><method name="get_approximate_digit_width" cname="pango_font_metrics_get_approximate_digit_width"><return-type type="int"/></method><constructor cname="pango_font_metrics_new"/><method name="get_approximate_char_width" cname="pango_font_metrics_get_approximate_char_width"><return-type type="int"/></method><method name="get_descent" cname="pango_font_metrics_get_descent"><return-type type="int"/></method></boxed><alias name="Glyph" cname="PangoGlyph" type="guint32 "/><struct name="GlyphGeometry" cname="PangoGlyphGeometry"><field cname="width" type="PangoGlyphUnit"/><field cname="x_offset" type="PangoGlyphUnit"/><field cname="y_offset" type="PangoGlyphUnit"/></struct><struct name="GlyphInfo" cname="PangoGlyphInfo"><field cname="glyph" type="PangoGlyph"/><field cname="geometry" type="PangoGlyphGeometry"/><field cname="attr" type="PangoGlyphVisAttr"/></struct><boxed name="GlyphString" cname="PangoGlyphString"><field cname="num_glyphs" type="gint"/><field cname="glyphs" type="PangoGlyphInfo*"/><field cname="log_clusters" type="gint*"/><field cname="space" type="gint"/><method name="get_logical_widths" cname="pango_glyph_string_get_logical_widths"><return-type type="void"/></method><method name="free" cname="pango_glyph_string_free"><return-type type="void"/></method><method name="extents" cname="pango_glyph_string_extents"><return-type type="void"/></method><method name="copy" cname="pango_glyph_string_copy"><return-type type="PangoGlyphString*"/></method><method name="x_to_index" cname="pango_glyph_string_x_to_index"><return-type type="void"/></method><method name="set_size" cname="pango_glyph_string_set_size"><return-type type="void"/></method><method name="index_to_x" cname="pango_glyph_string_index_to_x"><return-type type="void"/></method><constructor cname="pango_glyph_string_new"/><method name="extents_range" cname="pango_glyph_string_extents_range"><return-type type="void"/></method></boxed><alias name="GlyphUnit" cname="PangoGlyphUnit" type="gint32 "/><struct name="GlyphVisAttr" cname="PangoGlyphVisAttr"><field cname="is_cluster_start" bits="1" type="guint"/></struct><struct name="IncludedModule" cname="PangoIncludedModule"><callback cname="list"><return-type type="void"/><parameters><parameter type="PangoEngineInfo**" name="engines,"/></parameters></callback><callback cname="load"><return-type type="PangoEngine*"/><parameters><parameter type="const-char*" name="id"/></parameters></callback><callback cname="unload"><return-type type="void"/><parameters><parameter type="PangoEngine*" name="engine"/></parameters></callback></struct><struct name="IndicScript" cname="PangoIndicScript"><field cname="name" type="gchar*"/><callback cname="is_prefixing_vowel"><return-type type="gboolean"/><parameters><parameter type="gunichar" name="what"/></parameters></callback><callback cname="is_vowel_sign"><return-type type="gboolean"/><parameters><parameter type="gunichar" name="what"/></parameters></callback><callback cname="vowel_sign_to_matra"><return-type type="gunichar"/><parameters><parameter type="gunichar" name="what"/></parameters></callback><callback cname="is_vowel_half"><return-type type="gboolean"/><parameters><parameter type="gunichar" name="what"/></parameters></callback><callback cname="vowel_split"><return-type type="gboolean"/><parameters><parameter type="gunichar" name="what,"/></parameters></callback></struct><struct name="IntSet" cname="PangoIntSet"><field cname="start" type="int"/><field cname="size" type="int"/><field cname="bits" type="guint*"/><constructor cname="pango_int_set_new"/><method name="add_range" cname="pango_int_set_add_range"><return-type type="void"/></method><method name="add" cname="pango_int_set_add"><return-type type="void"/></method><method name="destroy" cname="pango_int_set_destroy"><return-type type="void"/></method><method name="contains" cname="pango_int_set_contains"><return-type type="gboolean"/></method></struct><struct name="Item" cname="PangoItem"><field cname="offset" type="gint"/><field cname="length" type="gint"/><field cname="num_chars" type="gint"/><field cname="analysis" type="PangoAnalysis"/><method name="free" cname="pango_item_free"><return-type type="void"/></method><method name="copy" cname="pango_item_copy"><return-type type="PangoItem*"/></method><constructor cname="pango_item_new"/><method name="split" cname="pango_item_split"><return-type type="PangoItem*"/></method></struct><struct name="LayoutIter" cname="PangoLayoutIter"><field cname="layout" type="PangoLayout*"/><field cname="line_list_link" type="GSList*"/><field cname="line" type="PangoLayoutLine*"/><field cname="at the end of the line with 0 width*/GSList* run_list_link" type="*"/><field cname="run" type="PangoLayoutRun*"/><field cname="index" type="int"/><field cname="logical_rect" type="PangoRectangle"/><field cname="line_extents" type="GSList*"/><field cname="line_extents_link" type="GSList*"/><field cname="run_x" type="int"/><field cname="run_is_shaped" type="gboolean"/><field cname="run_logical_rect" type="PangoRectangle"/><field cname="ltr" type="gboolean"/><field cname="right side according to text direction*/int cluster_x" type="*"/><field cname="cluster_index" type="int"/><field cname="cluster_start" type="int"/><field cname="next_cluster_start" type="int"/><method name="get_run_extents" cname="pango_layout_iter_get_run_extents"><return-type type="void"/></method><method name="get_cluster_extents" cname="pango_layout_iter_get_cluster_extents"><return-type type="void"/></method><method name="get_layout_extents" cname="pango_layout_iter_get_layout_extents"><return-type type="void"/></method><method name="next_run" cname="pango_layout_iter_next_run"><return-type type="gboolean"/></method><method name="get_line_yrange" cname="pango_layout_iter_get_line_yrange"><return-type type="void"/></method><method name="get_index" cname="pango_layout_iter_get_index"><return-type type="int"/></method><method name="get_baseline" cname="pango_layout_iter_get_baseline"><return-type type="int"/></method><method name="next_char" cname="pango_layout_iter_next_char"><return-type type="gboolean"/></method><method name="next_cluster" cname="pango_layout_iter_next_cluster"><return-type type="gboolean"/></method><method name="get_line" cname="pango_layout_iter_get_line"><return-type type="PangoLayoutLine*"/></method><method name="free" cname="pango_layout_iter_free"><return-type type="void"/></method><method name="at_last_line" cname="pango_layout_iter_at_last_line"><return-type type="gboolean"/></method><method name="get_run" cname="pango_layout_iter_get_run"><return-type type="PangoLayoutRun*"/></method><method name="next_line" cname="pango_layout_iter_next_line"><return-type type="gboolean"/></method><method name="get_char_extents" cname="pango_layout_iter_get_char_extents"><return-type type="void"/></method><method name="get_line_extents" cname="pango_layout_iter_get_line_extents"><return-type type="void"/></method></struct><struct name="LayoutLine" cname="PangoLayoutLine"><field cname="layout" type="PangoLayout*"/><field cname="start_index" type="gint"/><field cname="length" type="gint"/><field cname="runs" type="GSList*"/><method name="unref" cname="pango_layout_line_unref"><return-type type="void"/></method><method name="x_to_index" cname="pango_layout_line_x_to_index"><return-type type="gboolean"/></method><method name="ref" cname="pango_layout_line_ref"><return-type type="void"/></method><method name="get_pixel_extents" cname="pango_layout_line_get_pixel_extents"><return-type type="void"/></method><method name="get_x_ranges" cname="pango_layout_line_get_x_ranges"><return-type type="void"/></method><method name="get_extents" cname="pango_layout_line_get_extents"><return-type type="void"/></method><method name="index_to_x" cname="pango_layout_line_index_to_x"><return-type type="void"/></method></struct><struct name="LayoutRun" cname="PangoLayoutRun"><field cname="item" type="PangoItem*"/><field cname="glyphs" type="PangoGlyphString*"/></struct><struct name="LogAttr" cname="PangoLogAttr"><field cname="is_line_break" bits="1" type="guint"/><field cname="is_mandatory_break" bits="1" type="guint"/><field cname="is_char_break" bits="1" type="guint"/><field cname="is_white" bits="1" type="guint"/><field cname="is_cursor_position" bits="1" type="guint"/><field cname="is_word_start" bits="1" type="guint"/><field cname="is_word_end" bits="1" type="guint"/><field cname="is_sentence_boundary" bits="1" type="guint"/><field cname="is_sentence_start" bits="1" type="guint"/><field cname="is_sentence_end" bits="1" type="guint"/></struct><struct name="Map" cname="PangoMap"><field cname="n_submaps" type="gint"/><field cname="submaps" array_len="256" type="PangoSubmap"/><method name="get_entry" cname="pango_map_get_entry"><return-type type="PangoMapEntry*"/></method><method name="get_engine" cname="pango_map_get_engine"><return-type type="PangoEngine*"/></method></struct><struct name="MapEntry" cname="PangoMapEntry"><field cname="info" type="PangoEngineInfo*"/><field cname="is_exact" type="gboolean"/></struct><alias name="OTTag" cname="PangoOTTag" type="guint32  "/><struct name="Rectangle" cname="PangoRectangle"><field cname="x" type="int"/><field cname="y" type="int"/><field cname="width" type="int"/><field cname="height" type="int"/></struct><boxed name="TabArray" cname="PangoTabArray"><field cname="size" type="gint"/><field cname="allocated" type="gint"/><field cname="positions_in_pixels" type="gboolean"/><field cname="tabs" type="PangoTab*"/><method name="free" cname="pango_tab_array_free"><return-type type="void"/></method><method name="copy" cname="pango_tab_array_copy"><return-type type="PangoTabArray*"/></method><method name="get_size" cname="pango_tab_array_get_size"><return-type type="gint"/></method><method name="set_tab" cname="pango_tab_array_set_tab"><return-type type="void"/></method><constructor cname="pango_tab_array_new_with_positions"/><method name="get_tab" cname="pango_tab_array_get_tab"><return-type type="void"/></method><method name="get_tabs" cname="pango_tab_array_get_tabs"><return-type type="void"/></method><method name="get_positions_in_pixels" cname="pango_tab_array_get_positions_in_pixels"><return-type type="gboolean"/></method><method name="resize" cname="pango_tab_array_resize"><return-type type="void"/></method><constructor cname="pango_tab_array_new"/></boxed><struct name="Win32FontCache" cname="PangoWin32FontCache"><field cname="forward" type="GHashTable*"/><field cname="back" type="GHashTable*"/><field cname="mru" type="GList*"/><field cname="mru_tail" type="GList*"/><field cname="mru_count" type="int"/><method name="unload" cname="pango_win32_font_cache_unload"><return-type type="void"/></method><method name="free" cname="pango_win32_font_cache_free"><return-type type="void"/></method><method name="load" cname="pango_win32_font_cache_load"><return-type type="HFONT"/></method><constructor cname="pango_win32_font_cache_new"/></struct><struct name="XFontCache" cname="PangoXFontCache"><field cname="display" type="Display*"/><field cname="forward" type="GHashTable*"/><field cname="back" type="GHashTable*"/><field cname="mru" type="GList*"/><field cname="mru_tail" type="GList*"/><field cname="mru_count" type="int"/></struct><alias name="XSubfont" cname="PangoXSubfont" type="guint16 "/></namespace><namespace name="Atk"><enum name="CoordType" cname="AtkCoordType" type="enum"><member cname="ATK_XY_SCREEN" name="Screen"/><member cname="ATK_XY_WINDOW" name="Window"/></enum><enum name="KeyEventType" cname="AtkKeyEventType" type="enum"><member cname="ATK_KEY_EVENT_PRESS" name="Press"/><member cname="ATK_KEY_EVENT_RELEASE" name="Release"/><member cname="ATK_KEY_EVENT_LAST_DEFINED" name="LastDefined"/></enum><enum name="Layer" cname="AtkLayer" type="enum"><member cname="ATK_LAYER_INVALID" name="Invalid"/><member cname="ATK_LAYER_BACKGROUND" name="Background"/><member cname="ATK_LAYER_CANVAS" name="Canvas"/><member cname="ATK_LAYER_WIDGET" name="Widget"/><member cname="ATK_LAYER_MDI" name="Mdi"/><member cname="ATK_LAYER_POPUP" name="Popup"/><member cname="ATK_LAYER_OVERLAY" name="Overlay"/></enum><enum name="RelationType" cname="AtkRelationType" type="enum"><member cname="ATK_RELATION_NULL" name="Null"/><member cname="ATK_RELATION_CONTROLLED_BY" name="ControlledBy"/><member cname="ATK_RELATION_CONTROLLER_FOR" name="ControllerFor"/><member cname="ATK_RELATION_LABEL_FOR" name="LabelFor"/><member cname="ATK_RELATION_LABELLED_BY" name="LabelledBy"/><member cname="ATK_RELATION_MEMBER_OF" name="MemberOf"/><member cname="ATK_RELATION_NODE_CHILD_OF" name="NodeChildOf"/><member cname="ATK_RELATION_LAST_DEFINED" name="LastDefined"/></enum><enum name="Role" cname="AtkRole" type="enum"><member cname="ATK_ROLE_INVALID" name="Invalid"/><member cname="ATK_ROLE_ACCEL_LABEL" name="AccelLabel"/><member cname="ATK_ROLE_ALERT" name="Alert"/><member cname="ATK_ROLE_ANIMATION" name="Animation"/><member cname="ATK_ROLE_ARROW" name="Arrow"/><member cname="ATK_ROLE_CALENDAR" name="Calendar"/><member cname="ATK_ROLE_CANVAS" name="Canvas"/><member cname="ATK_ROLE_CHECK_BOX" name="CheckBox"/><member cname="ATK_ROLE_CHECK_MENU_ITEM" name="CheckMenuItem"/><member cname="ATK_ROLE_COLOR_CHOOSER" name="ColorChooser"/><member cname="ATK_ROLE_COLUMN_HEADER" name="ColumnHeader"/><member cname="ATK_ROLE_COMBO_BOX" name="ComboBox"/><member cname="ATK_ROLE_DATE_EDITOR" name="DateEditor"/><member cname="ATK_ROLE_DESKTOP_ICON" name="DesktopIcon"/><member cname="ATK_ROLE_DESKTOP_FRAME" name="DesktopFrame"/><member cname="ATK_ROLE_DIAL" name="Dial"/><member cname="ATK_ROLE_DIALOG" name="Dialog"/><member cname="ATK_ROLE_DIRECTORY_PANE" name="DirectoryPane"/><member cname="ATK_ROLE_DRAWING_AREA" name="DrawingArea"/><member cname="ATK_ROLE_FILE_CHOOSER" name="FileChooser"/><member cname="ATK_ROLE_FILLER" name="Filler"/><member cname="ATK_ROLE_FONT_CHOOSER" name="FontChooser"/><member cname="ATK_ROLE_FRAME" name="Frame"/><member cname="ATK_ROLE_GLASS_PANE" name="GlassPane"/><member cname="ATK_ROLE_HTML_CONTAINER" name="HtmlContainer"/><member cname="ATK_ROLE_ICON" name="Icon"/><member cname="ATK_ROLE_IMAGE" name="Image"/><member cname="ATK_ROLE_INTERNAL_FRAME" name="InternalFrame"/><member cname="ATK_ROLE_LABEL" name="Label"/><member cname="ATK_ROLE_LAYERED_PANE" name="LayeredPane"/><member cname="ATK_ROLE_LIST" name="List"/><member cname="ATK_ROLE_LIST_ITEM" name="ListItem"/><member cname="ATK_ROLE_MENU" name="Menu"/><member cname="ATK_ROLE_MENU_BAR" name="MenuBar"/><member cname="ATK_ROLE_MENU_ITEM" name="MenuItem"/><member cname="ATK_ROLE_OPTION_PANE" name="OptionPane"/><member cname="ATK_ROLE_PAGE_TAB" name="PageTab"/><member cname="ATK_ROLE_PAGE_TAB_LIST" name="PageTabList"/><member cname="ATK_ROLE_PANEL" name="Panel"/><member cname="ATK_ROLE_PASSWORD_TEXT" name="PasswordText"/><member cname="ATK_ROLE_POPUP_MENU" name="PopupMenu"/><member cname="ATK_ROLE_PROGRESS_BAR" name="ProgressBar"/><member cname="ATK_ROLE_PUSH_BUTTON" name="PushButton"/><member cname="ATK_ROLE_RADIO_BUTTON" name="RadioButton"/><member cname="ATK_ROLE_RADIO_MENU_ITEM" name="RadioMenuItem"/><member cname="ATK_ROLE_ROOT_PANE" name="RootPane"/><member cname="ATK_ROLE_ROW_HEADER" name="RowHeader"/><member cname="ATK_ROLE_SCROLL_BAR" name="ScrollBar"/><member cname="ATK_ROLE_SCROLL_PANE" name="ScrollPane"/><member cname="ATK_ROLE_SEPARATOR" name="Separator"/><member cname="ATK_ROLE_SLIDER" name="Slider"/><member cname="ATK_ROLE_SPLIT_PANE" name="SplitPane"/><member cname="ATK_ROLE_SPIN_BUTTON" name="SpinButton"/><member cname="ATK_ROLE_STATUSBAR" name="Statusbar"/><member cname="ATK_ROLE_TABLE" name="Table"/><member cname="ATK_ROLE_TABLE_CELL" name="TableCell"/><member cname="ATK_ROLE_TABLE_COLUMN_HEADER" name="TableColumnHeader"/><member cname="ATK_ROLE_TABLE_ROW_HEADER" name="TableRowHeader"/><member cname="ATK_ROLE_TEAR_OFF_MENU_ITEM" name="TearOffMenuItem"/><member cname="ATK_ROLE_TERMINAL" name="Terminal"/><member cname="ATK_ROLE_TEXT" name="Text"/><member cname="ATK_ROLE_TOGGLE_BUTTON" name="ToggleButton"/><member cname="ATK_ROLE_TOOL_BAR" name="ToolBar"/><member cname="ATK_ROLE_TOOL_TIP" name="ToolTip"/><member cname="ATK_ROLE_TREE" name="Tree"/><member cname="ATK_ROLE_TREE_TABLE" name="TreeTable"/><member cname="ATK_ROLE_UNKNOWN" name="Unknown"/><member cname="ATK_ROLE_VIEWPORT" name="Viewport"/><member cname="ATK_ROLE_WINDOW" name="Window"/><member cname="ATK_ROLE_LAST_DEFINED" name="LastDefined"/></enum><enum name="StateType" cname="AtkStateType" type="enum"><member cname="ATK_STATE_INVALID" name="Invalid"/><member cname="ATK_STATE_ACTIVE" name="Active"/><member cname="ATK_STATE_ARMED" name="Armed"/><member cname="ATK_STATE_BUSY" name="Busy"/><member cname="ATK_STATE_CHECKED" name="Checked"/><member cname="ATK_STATE_DEFUNCT" name="Defunct"/><member cname="ATK_STATE_EDITABLE" name="Editable"/><member cname="ATK_STATE_ENABLED" name="Enabled"/><member cname="ATK_STATE_EXPANDABLE" name="Expandable"/><member cname="ATK_STATE_EXPANDED" name="Expanded"/><member cname="ATK_STATE_FOCUSABLE" name="Focusable"/><member cname="ATK_STATE_FOCUSED" name="Focused"/><member cname="ATK_STATE_HORIZONTAL" name="Horizontal"/><member cname="ATK_STATE_ICONIFIED" name="Iconified"/><member cname="ATK_STATE_MODAL" name="Modal"/><member cname="ATK_STATE_MULTI_LINE" name="MultiLine"/><member cname="ATK_STATE_MULTISELECTABLE" name="Multiselectable"/><member cname="ATK_STATE_OPAQUE" name="Opaque"/><member cname="ATK_STATE_PRESSED" name="Pressed"/><member cname="ATK_STATE_RESIZABLE" name="Resizable"/><member cname="ATK_STATE_SELECTABLE" name="Selectable"/><member cname="ATK_STATE_SELECTED" name="Selected"/><member cname="ATK_STATE_SENSITIVE" name="Sensitive"/><member cname="ATK_STATE_SHOWING" name="Showing"/><member cname="ATK_STATE_SINGLE_LINE" name="SingleLine"/><member cname="ATK_STATE_STALE" name="Stale"/><member cname="ATK_STATE_TRANSIENT" name="Transient"/><member cname="ATK_STATE_VERTICAL" name="Vertical"/><member cname="ATK_STATE_VISIBLE" name="Visible"/><member cname="ATK_STATE_LAST_DEFINED" name="LastDefined"/></enum><enum name="TextAttribute" cname="AtkTextAttribute" type="enum"><member cname="ATK_TEXT_ATTR_INVALID" name="Invalid"/><member cname="ATK_TEXT_ATTR_LEFT_MARGIN" name="LeftMargin"/><member cname="ATK_TEXT_ATTR_RIGHT_MARGIN" name="RightMargin"/><member cname="ATK_TEXT_ATTR_INDENT" name="Indent"/><member cname="ATK_TEXT_ATTR_INVISIBLE" name="Invisible"/><member cname="ATK_TEXT_ATTR_EDITABLE" name="Editable"/><member cname="ATK_TEXT_ATTR_PIXELS_ABOVE_LINES" name="PixelsAboveLines"/><member cname="ATK_TEXT_ATTR_PIXELS_BELOW_LINES" name="PixelsBelowLines"/><member cname="ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP" name="PixelsInsideWrap"/><member cname="ATK_TEXT_ATTR_BG_FULL_HEIGHT" name="BgFullHeight"/><member cname="ATK_TEXT_ATTR_RISE" name="Rise"/><member cname="ATK_TEXT_ATTR_UNDERLINE" name="Underline"/><member cname="ATK_TEXT_ATTR_STRIKETHROUGH" name="Strikethrough"/><member cname="ATK_TEXT_ATTR_SIZE" name="Size"/><member cname="ATK_TEXT_ATTR_SCALE" name="Scale"/><member cname="ATK_TEXT_ATTR_WEIGHT" name="Weight"/><member cname="ATK_TEXT_ATTR_LANGUAGE" name="Language"/><member cname="ATK_TEXT_ATTR_FAMILY_NAME" name="FamilyName"/><member cname="ATK_TEXT_ATTR_BG_COLOR" name="BgColor"/><member cname="ATK_TEXT_ATTR_FG_COLOR" name="FgColor"/><member cname="ATK_TEXT_ATTR_BG_STIPPLE" name="BgStipple"/><member cname="ATK_TEXT_ATTR_FG_STIPPLE" name="FgStipple"/><member cname="ATK_TEXT_ATTR_WRAP_MODE" name="WrapMode"/><member cname="ATK_TEXT_ATTR_DIRECTION" name="Direction"/><member cname="ATK_TEXT_ATTR_JUSTIFICATION" name="Justification"/><member cname="ATK_TEXT_ATTR_STRETCH" name="Stretch"/><member cname="ATK_TEXT_ATTR_VARIANT" name="Variant"/><member cname="ATK_TEXT_ATTR_STYLE" name="Style"/><member cname="ATK_TEXT_ATTR_LAST_DEFINED" name="LastDefined"/></enum><enum name="TextBoundary" cname="AtkTextBoundary" type="enum"><member cname="ATK_TEXT_BOUNDARY_CHAR" name="Char"/><member cname="ATK_TEXT_BOUNDARY_WORD_START" name="WordStart"/><member cname="ATK_TEXT_BOUNDARY_WORD_END" name="WordEnd"/><member cname="ATK_TEXT_BOUNDARY_SENTENCE_START" name="SentenceStart"/><member cname="ATK_TEXT_BOUNDARY_SENTENCE_END" name="SentenceEnd"/><member cname="ATK_TEXT_BOUNDARY_LINE_START" name="LineStart"/><member cname="ATK_TEXT_BOUNDARY_LINE_END" name="LineEnd"/></enum><callback name="EventListener" cname="AtkEventListener"><return-type type="void"/><parameters><parameter type="void  " name="AtkObject*"/></parameters></callback><callback name="EventListenerInit" cname="AtkEventListenerInit"><return-type type="void"/></callback><callback name="FocusHandler" cname="AtkFocusHandler"><return-type type="void"/><parameters><parameter type="void " name="AtkObject*, gboolean"/><parameter type="void " name="AtkObject*, gboolean"/></parameters></callback><callback name="KeySnoopFunc" cname="AtkKeySnoopFunc"><return-type type="gint"/><parameters><parameter type="AtkKeyEventStruct*" name="event"/><parameter type="gpointer" name="func_data"/></parameters></callback><callback name="PropertyChangeHandler" cname="AtkPropertyChangeHandler"><return-type type="void"/><parameters><parameter type="void " name="AtkObject*, AtkPropertyValues*"/><parameter type="void " name="AtkObject*, AtkPropertyValues*"/></parameters></callback><interface name="Action" cname="AtkAction"><method name="get_description" cname="atk_action_get_description"><return-type type="const-gchar*"/></method><method name="get_keybinding" cname="atk_action_get_keybinding"><return-type type="const-gchar*"/></method><method name="get_name" cname="atk_action_get_name"><return-type type="const-gchar*"/></method><method name="get_n_actions" cname="atk_action_get_n_actions"><return-type type="gint"/></method><method name="set_description" cname="atk_action_set_description"><return-type type="gboolean"/></method><method name="do_action" cname="atk_action_do_action"><return-type type="gboolean"/></method></interface><interface name="Component" cname="AtkComponent"><method name="contains" cname="atk_component_contains"><return-type type="gboolean"/></method><method name="set_size" cname="atk_component_set_size"><return-type type="gboolean"/></method><method name="set_position" cname="atk_component_set_position"><return-type type="gboolean"/></method><method name="add_focus_handler" cname="atk_component_add_focus_handler"><return-type type="guint"/></method><method name="get_extents" cname="atk_component_get_extents"><return-type type="void"/></method><method name="set_extents" cname="atk_component_set_extents"><return-type type="gboolean"/></method><method name="get_size" cname="atk_component_get_size"><return-type type="void"/></method><method name="get_position" cname="atk_component_get_position"><return-type type="void"/></method><method name="remove_focus_handler" cname="atk_component_remove_focus_handler"><return-type type="void"/></method><method name="ref_accessible_at_point" cname="atk_component_ref_accessible_at_point"><return-type type="AtkObject*"/></method><method name="grab_focus" cname="atk_component_grab_focus"><return-type type="gboolean"/></method></interface><interface name="Document" cname="AtkDocument"><method name="get_document_type" cname="atk_document_get_document_type"><return-type type="const-gchar*"/></method><method name="get_document" cname="atk_document_get_document"><return-type type="gpointer"/></method></interface><interface name="EditableText" cname="AtkEditableText"><method name="cut_text" cname="atk_editable_text_cut_text"><return-type type="void"/></method><method name="insert_text" cname="atk_editable_text_insert_text"><return-type type="void"/></method><method name="copy_text" cname="atk_editable_text_copy_text"><return-type type="void"/></method><method name="paste_text" cname="atk_editable_text_paste_text"><return-type type="void"/></method><method name="set_text_contents" cname="atk_editable_text_set_text_contents"><return-type type="void"/></method><method name="set_run_attributes" cname="atk_editable_text_set_run_attributes"><return-type type="gboolean"/></method><method name="delete_text" cname="atk_editable_text_delete_text"><return-type type="void"/></method></interface><interface name="Hypertext" cname="AtkHypertext"><method name="get_link_index" cname="atk_hypertext_get_link_index"><return-type type="gint"/></method><method name="get_n_links" cname="atk_hypertext_get_n_links"><return-type type="gint"/></method><method name="get_link" cname="atk_hypertext_get_link"><return-type type="AtkHyperlink*"/></method></interface><interface name="Image" cname="AtkImage"><method name="set_image_description" cname="atk_image_set_image_description"><return-type type="gboolean"/></method><method name="get_image_description" cname="atk_image_get_image_description"><return-type type="const-gchar*"/></method><method name="get_image_position" cname="atk_image_get_image_position"><return-type type="void"/></method><method name="get_image_size" cname="atk_image_get_image_size"><return-type type="void"/></method></interface><interface name="Implementor" cname="AtkImplementor"><method name="ref_accessible" cname="atk_implementor_ref_accessible"><return-type type="AtkObject*"/></method></interface><interface name="Selection" cname="AtkSelection"><method name="get_selection_count" cname="atk_selection_get_selection_count"><return-type type="gint"/></method><method name="is_child_selected" cname="atk_selection_is_child_selected"><return-type type="gboolean"/></method><method name="remove_selection" cname="atk_selection_remove_selection"><return-type type="gboolean"/></method><method name="select_all_selection" cname="atk_selection_select_all_selection"><return-type type="gboolean"/></method><method name="clear_selection" cname="atk_selection_clear_selection"><return-type type="gboolean"/></method><method name="ref_selection" cname="atk_selection_ref_selection"><return-type type="AtkObject*"/></method><method name="add_selection" cname="atk_selection_add_selection"><return-type type="gboolean"/></method></interface><interface name="StreamableContent" cname="AtkStreamableContent"><method name="get_stream" cname="atk_streamable_content_get_stream"><return-type type="GIOChannel*"/></method><method name="get_mime_type" cname="atk_streamable_content_get_mime_type"><return-type type="const-gchar*"/></method><method name="get_n_mime_types" cname="atk_streamable_content_get_n_mime_types"><return-type type="gint"/></method></interface><interface name="Table" cname="AtkTable"><method name="get_selected_rows" cname="atk_table_get_selected_rows"><return-type type="gint"/></method><method name="get_row_at_index" cname="atk_table_get_row_at_index"><return-type type="gint"/></method><method name="set_caption" cname="atk_table_set_caption"><return-type type="void"/></method><method name="add_row_selection" cname="atk_table_add_row_selection"><return-type type="gboolean"/></method><method name="set_row_description" cname="atk_table_set_row_description"><return-type type="void"/></method><method name="ref_at" cname="atk_table_ref_at"><return-type type="AtkObject*"/></method><method name="get_row_header" cname="atk_table_get_row_header"><return-type type="AtkObject*"/></method><method name="set_column_header" cname="atk_table_set_column_header"><return-type type="void"/></method><method name="remove_row_selection" cname="atk_table_remove_row_selection"><return-type type="gboolean"/></method><method name="get_index_at" cname="atk_table_get_index_at"><return-type type="gint"/></method><method name="get_n_columns" cname="atk_table_get_n_columns"><return-type type="gint"/></method><method name="get_column_extent_at" cname="atk_table_get_column_extent_at"><return-type type="gint"/></method><method name="set_row_header" cname="atk_table_set_row_header"><return-type type="void"/></method><method name="is_row_selected" cname="atk_table_is_row_selected"><return-type type="gboolean"/></method><method name="get_column_header" cname="atk_table_get_column_header"><return-type type="AtkObject*"/></method><method name="get_summary" cname="atk_table_get_summary"><return-type type="AtkObject*"/></method><method name="set_summary" cname="atk_table_set_summary"><return-type type="void"/></method><method name="get_n_rows" cname="atk_table_get_n_rows"><return-type type="gint"/></method><method name="is_selected" cname="atk_table_is_selected"><return-type type="gboolean"/></method><method name="get_row_extent_at" cname="atk_table_get_row_extent_at"><return-type type="gint"/></method><method name="is_column_selected" cname="atk_table_is_column_selected"><return-type type="gboolean"/></method><method name="get_selected_columns" cname="atk_table_get_selected_columns"><return-type type="gint"/></method><method name="add_column_selection" cname="atk_table_add_column_selection"><return-type type="gboolean"/></method><method name="get_column_at_index" cname="atk_table_get_column_at_index"><return-type type="gint"/></method></interface><interface name="Text" cname="AtkText"><method name="get_n_selections" cname="atk_text_get_n_selections"><return-type type="gint"/></method><method name="set_caret_offset" cname="atk_text_set_caret_offset"><return-type type="gboolean"/></method><method name="get_default_attributes" cname="atk_text_get_default_attributes"><return-type type="AtkAttributeSet*"/></method><method name="get_character_extents" cname="atk_text_get_character_extents"><return-type type="void"/></method><method name="get_text_after_offset" cname="atk_text_get_text_after_offset"><return-type type="gchar*"/></method><method name="add_selection" cname="atk_text_add_selection"><return-type type="gboolean"/></method><method name="get_run_attributes" cname="atk_text_get_run_attributes"><return-type type="AtkAttributeSet*"/></method><method name="get_text_at_offset" cname="atk_text_get_text_at_offset"><return-type type="gchar*"/></method><method name="get_character_count" cname="atk_text_get_character_count"><return-type type="gint"/></method><method name="get_caret_offset" cname="atk_text_get_caret_offset"><return-type type="gint"/></method><method name="set_selection" cname="atk_text_set_selection"><return-type type="gboolean"/></method><method name="get_offset_at_point" cname="atk_text_get_offset_at_point"><return-type type="gint"/></method><method name="get_character_at_offset" cname="atk_text_get_character_at_offset"><return-type type="gunichar"/></method><method name="get_text_before_offset" cname="atk_text_get_text_before_offset"><return-type type="gchar*"/></method><method name="remove_selection" cname="atk_text_remove_selection"><return-type type="gboolean"/></method><method name="get_text" cname="atk_text_get_text"><return-type type="gchar*"/></method><method name="get_selection" cname="atk_text_get_selection"><return-type type="gchar*"/></method></interface><interface name="Value" cname="AtkValue"><method name="set_current_value" cname="atk_value_set_current_value"><return-type type="gboolean"/></method><method name="get_current_value" cname="atk_value_get_current_value"><return-type type="void"/></method><method name="get_maximum_value" cname="atk_value_get_maximum_value"><return-type type="void"/></method><method name="get_minimum_value" cname="atk_value_get_minimum_value"><return-type type="void"/></method></interface><object name="GObjectAccessible" cname="AtkGObjectAccessible" parent="AtkObject"><method name="get_object" cname="atk_gobject_accessible_get_object"><return-type type="GObject*"/></method></object><object name="Hyperlink" cname="AtkHyperlink" parent="GObject"><method name="is_valid" cname="atk_hyperlink_is_valid"><return-type type="gboolean"/></method><method name="get_end_index" cname="atk_hyperlink_get_end_index"><return-type type="gint"/></method><method name="get_object" cname="atk_hyperlink_get_object"><return-type type="AtkObject*"/></method><method name="get_start_index" cname="atk_hyperlink_get_start_index"><return-type type="gint"/></method><method name="get_n_anchors" cname="atk_hyperlink_get_n_anchors"><return-type type="gint"/></method><method name="get_uri" cname="atk_hyperlink_get_uri"><return-type type="gchar*"/></method></object><object name="NoOpObject" cname="AtkNoOpObject" parent="AtkObject"><constructor cname="atk_no_op_object_new"/></object><object name="NoOpObjectFactory" cname="AtkNoOpObjectFactory" parent="AtkObjectFactory"><constructor cname="atk_no_op_object_factory_new"/></object><object name="Object" cname="AtkObject" parent="GObject"><field cname="description" type="gchar*"/><field cname="name" type="gchar*"/><field cname="accessible_parent" type="AtkObject*"/><field cname="role" type="AtkRole"/><field cname="relation_set" type="AtkRelationSet*"/><field cname="layer" type="AtkLayer"/><property name="AtkObjectNamePropertyName" cname="atk_object_name_property_name" type="gchar*" doc-string=" Object instance\'s name formatted for assistive technology access" readable="true" writeable="true"/><property name="AtkObjectNamePropertyDescription" cname="atk_object_name_property_description" type="gchar*" doc-string=" Description of an object, formatted for assistive technology access" readable="true" writeable="true"/><property name="AtkObjectNamePropertyParent" cname="atk_object_name_property_parent" type="AtkObject" doc-string=" Is used to notify that the parent has changed " readable="true" writeable="true"/><property name="AtkObjectNamePropertyValue" cname="atk_object_name_property_value" type="gdouble" doc-string=" Is used to notify that the value has changed " readable="true" writeable="true"/><property name="AtkObjectNamePropertyRole" cname="atk_object_name_property_role" type="gint" doc-string=" The accessible role of this object " readable="true" writeable="true"/><property name="AtkObjectNamePropertyComponentLayer" cname="atk_object_name_property_component_layer" type="gint" doc-string=" The accessible layer of this object " readable="true"/><property name="AtkObjectNamePropertyComponentMdiZorder" cname="atk_object_name_property_component_mdi_zorder" type="gint" doc-string=" The accessible MDI value of this object " readable="true"/><property name="AtkObjectNamePropertyTableCaption" cname="atk_object_name_property_table_caption" type="gchar*" doc-string=" Is used to notify that the table caption has changed " readable="true" writeable="true"/><property name="AtkObjectNamePropertyTableColumnHeader" cname="atk_object_name_property_table_column_header" type="AtkObject" doc-string=" Is used to notify that the table column header has changed " readable="true" writeable="true"/><property name="AtkObjectNamePropertyTableColumnDescription" cname="atk_object_name_property_table_column_description" type="gchar*" doc-string=" Is used to notify that the table columnscription has changed " readable="true" writeable="true"/><property name="AtkObjectNamePropertyTableRowHeader" cname="atk_object_name_property_table_row_header" type="AtkObject" doc-string=" Is used to notify that the table row header has changed " readable="true" writeable="true"/><property name="AtkObjectNamePropertyTableRowDescription" cname="atk_object_name_property_table_row_description" type="gchar*" doc-string=" Is used to notify that the table row description has changed " readable="true" writeable="true"/><property name="AtkObjectNamePropertyTableSummary" cname="atk_object_name_property_table_summary" type="AtkObject" doc-string=" Is used to notify that the table summary has changed " readable="true" writeable="true"/><signal name="children_changed" when="LAST"><return-type type="void"/><parameters><parameter type="AtkObject*" name="accessible"/><parameter type="gint" name="change_index"/><parameter type="AtkObject*" name="changed_child);void"/><parameter type="gboolean" name="focus_in);gint"/><parameter type="AtkPropertyValues*" name="values);gint"/><parameter type="const-gchar*" name="name"/><parameter type="gboolean" name="state_set);void"/></parameters></signal><signal name="focus_event" when="LAST"><return-type type="void"/><parameters><parameter type="AtkObject*" name="accessible"/><parameter type="gboolean" name="focus_in);gint"/><parameter type="AtkPropertyValues*" name="values);gint"/><parameter type="const-gchar*" name="name"/><parameter type="gboolean" name="state_set);void"/></parameters></signal><signal name="property_change" when="LAST"><return-type type="gint"/><parameters><parameter type="AtkObject*" name="accessible"/><parameter type="AtkPropertyValues*" name="values);gint"/><parameter type="const-gchar*" name="name"/><parameter type="gboolean" name="state_set);void"/></parameters></signal><signal name="state_change" when="LAST"><return-type type="gint"/><parameters><parameter type="AtkObject*" name="accessible"/><parameter type="const-gchar*" name="name"/><parameter type="gboolean" name="state_set);void"/></parameters></signal><signal name="visible_data_changed" when="LAST"><return-type type="void"/><parameters><parameter type="AtkObject*" name="accessible"/></parameters></signal><method name="set_description" cname="atk_object_set_description"><return-type type="void"/></method><method name="set_name" cname="atk_object_set_name"><return-type type="void"/></method><method name="get_layer" cname="atk_object_get_layer"><return-type type="AtkLayer"/></method><method name="ref_relation_set" cname="atk_object_ref_relation_set"><return-type type="AtkRelationSet*"/></method><method name="notify_state_change" cname="atk_object_notify_state_change"><return-type type="void"/></method><method name="get_mdi_zorder" cname="atk_object_get_mdi_zorder"><return-type type="gint"/></method><method name="set_role" cname="atk_object_set_role"><return-type type="void"/></method><method name="connect_property_change_handler" cname="atk_object_connect_property_change_handler"><return-type type="guint"/></method><method name="get_n_accessible_children" cname="atk_object_get_n_accessible_children"><return-type type="gint"/></method><method name="set_parent" cname="atk_object_set_parent"><return-type type="void"/></method><method name="get_name" cname="atk_object_get_name"><return-type type="const-gchar*"/></method><method name="get_parent" cname="atk_object_get_parent"><return-type type="AtkObject*"/></method><method name="remove_property_change_handler" cname="atk_object_remove_property_change_handler"><return-type type="void"/></method><method name="get_description" cname="atk_object_get_description"><return-type type="const-gchar*"/></method><method name="ref_state_set" cname="atk_object_ref_state_set"><return-type type="AtkStateSet*"/></method><method name="get_index_in_parent" cname="atk_object_get_index_in_parent"><return-type type="gint"/></method><method name="ref_accessible_child" cname="atk_object_ref_accessible_child"><return-type type="AtkObject*"/></method><method name="initialize" cname="atk_object_initialize"><return-type type="void"/></method><method name="get_role" cname="atk_object_get_role"><return-type type="AtkRole"/></method></object><object name="ObjectFactory" cname="AtkObjectFactory" parent="GObject"><method name="get_accessible_type" cname="atk_object_factory_get_accessible_type"><return-type type="GType"/></method><method name="invalidate" cname="atk_object_factory_invalidate"><return-type type="void"/></method><method name="create_accessible" cname="atk_object_factory_create_accessible"><return-type type="AtkObject*"/></method></object><object name="Registry" cname="AtkRegistry" parent="GObject"><field cname="factory_type_registry" type="GHashTable*"/><field cname="factory_singleton_cache" type="GHashTable*"/><method name="set_factory_type" cname="atk_registry_set_factory_type"><return-type type="void"/></method><method name="get_factory_type" cname="atk_registry_get_factory_type"><return-type type="GType"/></method><method name="get_factory" cname="atk_registry_get_factory"><return-type type="AtkObjectFactory*"/></method></object><object name="Relation" cname="AtkRelation" parent="GObject"><field cname="target" type="GPtrArray*"/><field cname="relationship" type="AtkRelationType"/><method name="get_target" cname="atk_relation_get_target"><return-type type="GPtrArray*"/></method><method name="get_relation_type" cname="atk_relation_get_relation_type"><return-type type="AtkRelationType"/></method><constructor cname="atk_relation_new"/></object><object name="RelationSet" cname="AtkRelationSet" parent="GObject"><field cname="relations" type="GPtrArray*"/><method name="get_relation_by_type" cname="atk_relation_set_get_relation_by_type"><return-type type="AtkRelation*"/></method><method name="get_n_relations" cname="atk_relation_set_get_n_relations"><return-type type="gint"/></method><method name="get_relation" cname="atk_relation_set_get_relation"><return-type type="AtkRelation*"/></method><method name="add" cname="atk_relation_set_add"><return-type type="void"/></method><method name="contains" cname="atk_relation_set_contains"><return-type type="gboolean"/></method><constructor cname="atk_relation_set_new"/><method name="remove" cname="atk_relation_set_remove"><return-type type="void"/></method></object><object name="StateSet" cname="AtkStateSet" parent="GObject"><method name="is_empty" cname="atk_state_set_is_empty"><return-type type="gboolean"/></method><method name="contains_states" cname="atk_state_set_contains_states"><return-type type="gboolean"/></method><method name="add_state" cname="atk_state_set_add_state"><return-type type="gboolean"/></method><method name="remove_state" cname="atk_state_set_remove_state"><return-type type="gboolean"/></method><method name="xor_sets" cname="atk_state_set_xor_sets"><return-type type="AtkStateSet*"/></method><method name="clear_states" cname="atk_state_set_clear_states"><return-type type="void"/></method><method name="or_sets" cname="atk_state_set_or_sets"><return-type type="AtkStateSet*"/></method><method name="add_states" cname="atk_state_set_add_states"><return-type type="void"/></method><constructor cname="atk_state_set_new"/><method name="contains_state" cname="atk_state_set_contains_state"><return-type type="gboolean"/></method><method name="and_sets" cname="atk_state_set_and_sets"><return-type type="AtkStateSet*"/></method></object><object name="Util" cname="AtkUtil" parent="GObject"/><struct name="Attribute" cname="AtkAttribute"><field cname="name" type="gchar*"/><field cname="value" type="gchar*"/></struct><alias name="AttributeSet" cname="AtkAttributeSet" type="GSList "/><struct name="KeyEventStruct" cname="AtkKeyEventStruct"><field cname="type" type="gint"/><field cname="state" type="guint"/><field cname="keyval" type="guint"/><field cname="length" type="gint"/><field cname="string" type="gchar*"/><field cname="keycode" type="guint16"/><field cname="timestamp" type="guint32"/></struct><struct name="PropertyValues" cname="AtkPropertyValues"><field cname="property_name" type="const-gchar*"/><field cname="old_value" type="GValue"/><field cname="new_value" type="GValue"/></struct><alias name="State" cname="AtkState" type="guint64      "/></namespace><namespace name="Gdk"><enum name="AxisUse" cname="GdkAxisUse" type="enum"><member cname="GDK_AXIS_IGNORE" name="Ignore"/><member cname="GDK_AXIS_X" name="X"/><member cname="GDK_AXIS_Y" name="Y"/><member cname="GDK_AXIS_PRESSURE" name="Pressure"/><member cname="GDK_AXIS_XTILT" name="Xtilt"/><member cname="GDK_AXIS_YTILT" name="Ytilt"/><member cname="GDK_AXIS_WHEEL" name="Wheel"/><member cname="GDK_AXIS_LAST" name="Last"/></enum><enum name="ByteOrder" cname="GdkByteOrder" type="enum"><member cname="GDK_LSB_FIRST" name="LsbFirst"/><member cname="GDK_MSB_FIRST" name="MsbFirst"/></enum><enum name="CapStyle" cname="GdkCapStyle" type="enum"><member cname="GDK_CAP_NOT_LAST" name="NotLast"/><member cname="GDK_CAP_BUTT" name="Butt"/><member cname="GDK_CAP_ROUND" name="Round"/><member cname="GDK_CAP_PROJECTING" name="Projecting"/></enum><enum name="Colorspace" cname="GdkColorspace" type="enum"><member cname="GDK_COLORSPACE_RGB" name="Rgb"/></enum><enum name="CrossingMode" cname="GdkCrossingMode" type="enum"><member cname="GDK_CROSSING_NORMAL" name="Normal"/><member cname="GDK_CROSSING_GRAB" name="Grab"/><member cname="GDK_CROSSING_UNGRAB" name="Ungrab"/></enum><enum name="CursorType" cname="GdkCursorType" type="enum"><member cname="GDK_X_CURSOR" name="XCursor"/><member cname="GDK_ARROW" name="Arrow" value="2"/><member cname="GDK_BASED_ARROW_DOWN" name="BasedArrowDown" value="4"/><member cname="GDK_BASED_ARROW_UP" name="BasedArrowUp" value="6"/><member cname="GDK_BOAT" name="Boat" value="8"/><member cname="GDK_BOGOSITY" name="Bogosity" value="10"/><member cname="GDK_BOTTOM_LEFT_CORNER" name="BottomLeftCorner" value="12"/><member cname="GDK_BOTTOM_RIGHT_CORNER" name="BottomRightCorner" value="14"/><member cname="GDK_BOTTOM_SIDE" name="BottomSide" value="16"/><member cname="GDK_BOTTOM_TEE" name="BottomTee" value="18"/><member cname="GDK_BOX_SPIRAL" name="BoxSpiral" value="20"/><member cname="GDK_CENTER_PTR" name="CenterPtr" value="22"/><member cname="GDK_CIRCLE" name="Circle" value="24"/><member cname="GDK_CLOCK" name="Clock" value="26"/><member cname="GDK_COFFEE_MUG" name="CoffeeMug" value="28"/><member cname="GDK_CROSS" name="Cross" value="30"/><member cname="GDK_CROSS_REVERSE" name="CrossReverse" value="32"/><member cname="GDK_CROSSHAIR" name="Crosshair" value="34"/><member cname="GDK_DIAMOND_CROSS" name="DiamondCross" value="36"/><member cname="GDK_DOT" name="Dot" value="38"/><member cname="GDK_DOTBOX" name="Dotbox" value="40"/><member cname="GDK_DOUBLE_ARROW" name="DoubleArrow" value="42"/><member cname="GDK_DRAFT_LARGE" name="DraftLarge" value="44"/><member cname="GDK_DRAFT_SMALL" name="DraftSmall" value="46"/><member cname="GDK_DRAPED_BOX" name="DrapedBox" value="48"/><member cname="GDK_EXCHANGE" name="Exchange" value="50"/><member cname="GDK_FLEUR" name="Fleur" value="52"/><member cname="GDK_GOBBLER" name="Gobbler" value="54"/><member cname="GDK_GUMBY" name="Gumby" value="56"/><member cname="GDK_HAND1" name="Hand1" value="58"/><member cname="GDK_HAND2" name="Hand2" value="60"/><member cname="GDK_HEART" name="Heart" value="62"/><member cname="GDK_ICON" name="Icon" value="64"/><member cname="GDK_IRON_CROSS" name="IronCross" value="66"/><member cname="GDK_LEFT_PTR" name="LeftPtr" value="68"/><member cname="GDK_LEFT_SIDE" name="LeftSide" value="70"/><member cname="GDK_LEFT_TEE" name="LeftTee" value="72"/><member cname="GDK_LEFTBUTTON" name="Leftbutton" value="74"/><member cname="GDK_LL_ANGLE" name="LlAngle" value="76"/><member cname="GDK_LR_ANGLE" name="LrAngle" value="78"/><member cname="GDK_MAN" name="Man" value="80"/><member cname="GDK_MIDDLEBUTTON" name="Middlebutton" value="82"/><member cname="GDK_MOUSE" name="Mouse" value="84"/><member cname="GDK_PENCIL" name="Pencil" value="86"/><member cname="GDK_PIRATE" name="Pirate" value="88"/><member cname="GDK_PLUS" name="Plus" value="90"/><member cname="GDK_QUESTION_ARROW" name="QuestionArrow" value="92"/><member cname="GDK_RIGHT_PTR" name="RightPtr" value="94"/><member cname="GDK_RIGHT_SIDE" name="RightSide" value="96"/><member cname="GDK_RIGHT_TEE" name="RightTee" value="98"/><member cname="GDK_RIGHTBUTTON" name="Rightbutton" value="100"/><member cname="GDK_RTL_LOGO" name="RtlLogo" value="102"/><member cname="GDK_SAILBOAT" name="Sailboat" value="104"/><member cname="GDK_SB_DOWN_ARROW" name="SbDownArrow" value="106"/><member cname="GDK_SB_H_DOUBLE_ARROW" name="SbHDoubleArrow" value="108"/><member cname="GDK_SB_LEFT_ARROW" name="SbLeftArrow" value="110"/><member cname="GDK_SB_RIGHT_ARROW" name="SbRightArrow" value="112"/><member cname="GDK_SB_UP_ARROW" name="SbUpArrow" value="114"/><member cname="GDK_SB_V_DOUBLE_ARROW" name="SbVDoubleArrow" value="116"/><member cname="GDK_SHUTTLE" name="Shuttle" value="118"/><member cname="GDK_SIZING" name="Sizing" value="120"/><member cname="GDK_SPIDER" name="Spider" value="122"/><member cname="GDK_SPRAYCAN" name="Spraycan" value="124"/><member cname="GDK_STAR" name="Star" value="126"/><member cname="GDK_TARGET" name="Target" value="128"/><member cname="GDK_TCROSS" name="Tcross" value="130"/><member cname="GDK_TOP_LEFT_ARROW" name="TopLeftArrow" value="132"/><member cname="GDK_TOP_LEFT_CORNER" name="TopLeftCorner" value="134"/><member cname="GDK_TOP_RIGHT_CORNER" name="TopRightCorner" value="136"/><member cname="GDK_TOP_SIDE" name="TopSide" value="138"/><member cname="GDK_TOP_TEE" name="TopTee" value="140"/><member cname="GDK_TREK" name="Trek" value="142"/><member cname="GDK_UL_ANGLE" name="UlAngle" value="144"/><member cname="GDK_UMBRELLA" name="Umbrella" value="146"/><member cname="GDK_UR_ANGLE" name="UrAngle" value="148"/><member cname="GDK_WATCH" name="Watch" value="150"/><member cname="GDK_XTERM" name="Xterm" value="152"/><member cname="GDK_LAST_CURSOR" name="LastCursor"/><member cname="GDK_CURSOR_IS_PIXMAP" name="CursorIsPixmap"/></enum><enum name="DragAction" cname="GdkDragAction" type="flags"><member cname="GDK_ACTION_DEFAULT" name="Default" value="1 &lt;&lt; 0"/><member cname="GDK_ACTION_COPY" name="Copy" value="1 &lt;&lt; 1"/><member cname="GDK_ACTION_MOVE" name="Move" value="1 &lt;&lt; 2"/><member cname="GDK_ACTION_LINK" name="Link" value="1 &lt;&lt; 3"/><member cname="GDK_ACTION_PRIVATE" name="Private" value="1 &lt;&lt; 4"/><member cname="GDK_ACTION_ASK" name="Ask" value="1 &lt;&lt; 5"/></enum><enum name="DragProtocol" cname="GdkDragProtocol" type="enum"><member cname="GDK_DRAG_PROTO_MOTIF" name="Motif"/><member cname="GDK_DRAG_PROTO_XDND" name="Xdnd"/><member cname="GDK_DRAG_PROTO_ROOTWIN" name="Rootwin"/><member cname="GDK_DRAG_PROTO_WIN32_DROPFILES" name="Win32Dropfiles"/><member cname="GDK_DRAG_PROTO_OLE2" name="Ole2"/><member cname="GDK_DRAG_PROTO_LOCAL" name="Local"/></enum><enum name="EventMask" cname="GdkEventMask" type="flags"><member cname="GDK_EXPOSURE_MASK" name="ExposureMask" value="1 &lt;&lt; 1"/><member cname="GDK_POINTER_MOTION_MASK" name="PointerMotionMask" value="1 &lt;&lt; 2"/><member cname="GDK_POINTER_MOTION_HINT_MASK" name="PointerMotionHintMask" value="1 &lt;&lt; 3"/><member cname="GDK_BUTTON_MOTION_MASK" name="ButtonMotionMask" value="1 &lt;&lt; 4"/><member cname="GDK_BUTTON1_MOTION_MASK" name="Button1MotionMask" value="1 &lt;&lt; 5"/><member cname="GDK_BUTTON2_MOTION_MASK" name="Button2MotionMask" value="1 &lt;&lt; 6"/><member cname="GDK_BUTTON3_MOTION_MASK" name="Button3MotionMask" value="1 &lt;&lt; 7"/><member cname="GDK_BUTTON_PRESS_MASK" name="ButtonPressMask" value="1 &lt;&lt; 8"/><member cname="GDK_BUTTON_RELEASE_MASK" name="ButtonReleaseMask" value="1 &lt;&lt; 9"/><member cname="GDK_KEY_PRESS_MASK" name="KeyPressMask" value="1 &lt;&lt; 10"/><member cname="GDK_KEY_RELEASE_MASK" name="KeyReleaseMask" value="1 &lt;&lt; 11"/><member cname="GDK_ENTER_NOTIFY_MASK" name="EnterNotifyMask" value="1 &lt;&lt; 12"/><member cname="GDK_LEAVE_NOTIFY_MASK" name="LeaveNotifyMask" value="1 &lt;&lt; 13"/><member cname="GDK_FOCUS_CHANGE_MASK" name="FocusChangeMask" value="1 &lt;&lt; 14"/><member cname="GDK_STRUCTURE_MASK" name="StructureMask" value="1 &lt;&lt; 15"/><member cname="GDK_PROPERTY_CHANGE_MASK" name="PropertyChangeMask" value="1 &lt;&lt; 16"/><member cname="GDK_VISIBILITY_NOTIFY_MASK" name="VisibilityNotifyMask" value="1 &lt;&lt; 17"/><member cname="GDK_PROXIMITY_IN_MASK" name="ProximityInMask" value="1 &lt;&lt; 18"/><member cname="GDK_PROXIMITY_OUT_MASK" name="ProximityOutMask" value="1 &lt;&lt; 19"/><member cname="GDK_SUBSTRUCTURE_MASK" name="SubstructureMask" value="1 &lt;&lt; 20"/><member cname="GDK_SCROLL_MASK" name="ScrollMask" value="1 &lt;&lt; 21"/><member cname="GDK_ALL_EVENTS_MASK" name="AllEventsMask" value="0x3FFFFE"/></enum><enum name="EventType" cname="GdkEventType" type="enum"><member cname="GDK_NOTHING" name="Nothing"/><member cname="GDK_DELETE" name="Delete"/><member cname="GDK_DESTROY" name="Destroy" value="1"/><member cname="GDK_EXPOSE" name="Expose" value="2"/><member cname="GDK_MOTION_NOTIFY" name="MotionNotify" value="3"/><member cname="GDK_BUTTON_PRESS" name="ButtonPress" value="4"/><member cname="GDK_2BUTTON_PRESS" name="TwoButtonPress" value="5"/><member cname="GDK_3BUTTON_PRESS" name="ThreeButtonPress" value="6"/><member cname="GDK_BUTTON_RELEASE" name="ButtonRelease" value="7"/><member cname="GDK_KEY_PRESS" name="KeyPress" value="8"/><member cname="GDK_KEY_RELEASE" name="KeyRelease" value="9"/><member cname="GDK_ENTER_NOTIFY" name="EnterNotify" value="10"/><member cname="GDK_LEAVE_NOTIFY" name="LeaveNotify" value="11"/><member cname="GDK_FOCUS_CHANGE" name="FocusChange" value="12"/><member cname="GDK_CONFIGURE" name="Configure" value="13"/><member cname="GDK_MAP" name="Map" value="14"/><member cname="GDK_UNMAP" name="Unmap" value="15"/><member cname="GDK_PROPERTY_NOTIFY" name="PropertyNotify" value="16"/><member cname="GDK_SELECTION_CLEAR" name="SelectionClear" value="17"/><member cname="GDK_SELECTION_REQUEST" name="SelectionRequest" value="18"/><member cname="GDK_SELECTION_NOTIFY" name="SelectionNotify" value="19"/><member cname="GDK_PROXIMITY_IN" name="ProximityIn" value="20"/><member cname="GDK_PROXIMITY_OUT" name="ProximityOut" value="21"/><member cname="GDK_DRAG_ENTER" name="DragEnter" value="22"/><member cname="GDK_DRAG_LEAVE" name="DragLeave" value="23"/><member cname="GDK_DRAG_MOTION" name="DragMotion" value="24"/><member cname="GDK_DRAG_STATUS" name="DragStatus" value="25"/><member cname="GDK_DROP_START" name="DropStart" value="26"/><member cname="GDK_DROP_FINISHED" name="DropFinished" value="27"/><member cname="GDK_CLIENT_EVENT" name="ClientEvent" value="28"/><member cname="GDK_VISIBILITY_NOTIFY" name="VisibilityNotify" value="29"/><member cname="GDK_NO_EXPOSE" name="NoExpose" value="30"/><member cname="GDK_SCROLL" name="Scroll" value="31"/><member cname="GDK_WINDOW_STATE" name="WindowState" value="32"/><member cname="GDK_SETTING" name="Setting" value="33"/></enum><enum name="ExtensionMode" cname="GdkExtensionMode" type="enum"><member cname="GDK_EXTENSION_EVENTS_NONE" name="None"/><member cname="GDK_EXTENSION_EVENTS_ALL" name="All"/><member cname="GDK_EXTENSION_EVENTS_CURSOR" name="Cursor"/></enum><enum name="Fill" cname="GdkFill" type="enum"><member cname="GDK_SOLID" name="Solid"/><member cname="GDK_TILED" name="Tiled"/><member cname="GDK_STIPPLED" name="Stippled"/><member cname="GDK_OPAQUE_STIPPLED" name="OpaqueStippled"/></enum><enum name="FillRule" cname="GdkFillRule" type="enum"><member cname="GDK_EVEN_ODD_RULE" name="EvenOddRule"/><member cname="GDK_WINDING_RULE" name="WindingRule"/></enum><enum name="FilterReturn" cname="GdkFilterReturn" type="enum"><member cname="GDK_FILTER_CONTINUE" name="Continue"/><member cname="GDK_FILTER_TRANSLATE" name="Translate"/><member cname="GDK_FILTER_REMOVE" name="Remove"/></enum><enum name="FontType" cname="GdkFontType" type="enum"><member cname="GDK_FONT_FONT" name="Font"/><member cname="GDK_FONT_FONTSET" name="Fontset"/></enum><enum name="Function" cname="GdkFunction" type="enum"><member cname="GDK_COPY" name="Copy"/><member cname="GDK_INVERT" name="Invert"/><member cname="GDK_XOR" name="Xor"/><member cname="GDK_CLEAR" name="Clear"/><member cname="GDK_AND" name="And"/><member cname="GDK_AND_REVERSE" name="AndReverse"/><member cname="GDK_AND_INVERT" name="AndInvert"/><member cname="GDK_NOOP" name="Noop"/><member cname="GDK_OR" name="Or"/><member cname="GDK_EQUIV" name="Equiv"/><member cname="GDK_OR_REVERSE" name="OrReverse"/><member cname="GDK_COPY_INVERT" name="CopyInvert"/><member cname="GDK_OR_INVERT" name="OrInvert"/><member cname="GDK_NAND" name="Nand"/><member cname="GDK_NOR" name="Nor"/><member cname="GDK_SET" name="Set"/></enum><enum name="GCValuesMask" cname="GdkGCValuesMask" type="flags"><member cname="GDK_GC_FOREGROUND" name="Foreground" value="1 &lt;&lt; 0"/><member cname="GDK_GC_BACKGROUND" name="Background" value="1 &lt;&lt; 1"/><member cname="GDK_GC_FONT" name="Font" value="1 &lt;&lt; 2"/><member cname="GDK_GC_FUNCTION" name="Function" value="1 &lt;&lt; 3"/><member cname="GDK_GC_FILL" name="Fill" value="1 &lt;&lt; 4"/><member cname="GDK_GC_TILE" name="Tile" value="1 &lt;&lt; 5"/><member cname="GDK_GC_STIPPLE" name="Stipple" value="1 &lt;&lt; 6"/><member cname="GDK_GC_CLIP_MASK" name="ClipMask" value="1 &lt;&lt; 7"/><member cname="GDK_GC_SUBWINDOW" name="Subwindow" value="1 &lt;&lt; 8"/><member cname="GDK_GC_TS_X_ORIGIN" name="TsXOrigin" value="1 &lt;&lt; 9"/><member cname="GDK_GC_TS_Y_ORIGIN" name="TsYOrigin" value="1 &lt;&lt; 10"/><member cname="GDK_GC_CLIP_X_ORIGIN" name="ClipXOrigin" value="1 &lt;&lt; 11"/><member cname="GDK_GC_CLIP_Y_ORIGIN" name="ClipYOrigin" value="1 &lt;&lt; 12"/><member cname="GDK_GC_EXPOSURES" name="Exposures" value="1 &lt;&lt; 13"/><member cname="GDK_GC_LINE_WIDTH" name="LineWidth" value="1 &lt;&lt; 14"/><member cname="GDK_GC_LINE_STYLE" name="LineStyle" value="1 &lt;&lt; 15"/><member cname="GDK_GC_CAP_STYLE" name="CapStyle" value="1 &lt;&lt; 16"/><member cname="GDK_GC_JOIN_STYLE" name="JoinStyle" value="1 &lt;&lt; 17"/></enum><enum name="GrabStatus" cname="GdkGrabStatus" type="enum"><member cname="GDK_GRAB_SUCCESS" name="Success"/><member cname="GDK_GRAB_ALREADY_GRABBED" name="AlreadyGrabbed" value="1"/><member cname="GDK_GRAB_INVALID_TIME" name="InvalidTime" value="2"/><member cname="GDK_GRAB_NOT_VIEWABLE" name="NotViewable" value="3"/><member cname="GDK_GRAB_FROZEN" name="Frozen" value="4"/></enum><enum name="Gravity" cname="GdkGravity" type="enum"><member cname="GDK_GRAVITY_NORTH_WEST" name="NorthWest" value="1"/><member cname="GDK_GRAVITY_NORTH" name="North"/><member cname="GDK_GRAVITY_NORTH_EAST" name="NorthEast"/><member cname="GDK_GRAVITY_WEST" name="West"/><member cname="GDK_GRAVITY_CENTER" name="Center"/><member cname="GDK_GRAVITY_EAST" name="East"/><member cname="GDK_GRAVITY_SOUTH_WEST" name="SouthWest"/><member cname="GDK_GRAVITY_SOUTH" name="South"/><member cname="GDK_GRAVITY_SOUTH_EAST" name="SouthEast"/><member cname="GDK_GRAVITY_STATIC" name="Static"/></enum><enum name="ImageType" cname="GdkImageType" type="enum"><member cname="GDK_IMAGE_NORMAL" name="Normal"/><member cname="GDK_IMAGE_SHARED" name="Shared"/><member cname="GDK_IMAGE_FASTEST" name="Fastest"/></enum><enum name="InputCondition" cname="GdkInputCondition" type="flags"><member cname="GDK_INPUT_READ" name="Read" value="1 &lt;&lt; 0"/><member cname="GDK_INPUT_WRITE" name="Write" value="1 &lt;&lt; 1"/><member cname="GDK_INPUT_EXCEPTION" name="Exception" value="1 &lt;&lt; 2"/></enum><enum name="InputMode" cname="GdkInputMode" type="enum"><member cname="GDK_MODE_DISABLED" name="Disabled"/><member cname="GDK_MODE_SCREEN" name="Screen"/><member cname="GDK_MODE_WINDOW" name="Window"/></enum><enum name="InputSource" cname="GdkInputSource" type="enum"><member cname="GDK_SOURCE_MOUSE" name="Mouse"/><member cname="GDK_SOURCE_PEN" name="Pen"/><member cname="GDK_SOURCE_ERASER" name="Eraser"/><member cname="GDK_SOURCE_CURSOR" name="Cursor"/></enum><enum name="InterpType" cname="GdkInterpType" type="enum"><member cname="GDK_INTERP_NEAREST" name="Nearest"/><member cname="GDK_INTERP_TILES" name="Tiles"/><member cname="GDK_INTERP_BILINEAR" name="Bilinear"/><member cname="GDK_INTERP_HYPER" name="Hyper"/></enum><enum name="JoinStyle" cname="GdkJoinStyle" type="enum"><member cname="GDK_JOIN_MITER" name="Miter"/><member cname="GDK_JOIN_ROUND" name="Round"/><member cname="GDK_JOIN_BEVEL" name="Bevel"/></enum><enum name="LineStyle" cname="GdkLineStyle" type="enum"><member cname="GDK_LINE_SOLID" name="Solid"/><member cname="GDK_LINE_ON_OFF_DASH" name="OnOffDash"/><member cname="GDK_LINE_DOUBLE_DASH" name="DoubleDash"/></enum><enum name="ModifierType" cname="GdkModifierType" type="flags"><member cname="GDK_SHIFT_MASK" name="ShiftMask" value="1 &lt;&lt; 0"/><member cname="GDK_LOCK_MASK" name="LockMask" value="1 &lt;&lt; 1"/><member cname="GDK_CONTROL_MASK" name="ControlMask" value="1 &lt;&lt; 2"/><member cname="GDK_MOD1_MASK" name="Mod1Mask" value="1 &lt;&lt; 3"/><member cname="GDK_MOD2_MASK" name="Mod2Mask" value="1 &lt;&lt; 4"/><member cname="GDK_MOD3_MASK" name="Mod3Mask" value="1 &lt;&lt; 5"/><member cname="GDK_MOD4_MASK" name="Mod4Mask" value="1 &lt;&lt; 6"/><member cname="GDK_MOD5_MASK" name="Mod5Mask" value="1 &lt;&lt; 7"/><member cname="GDK_BUTTON1_MASK" name="Button1Mask" value="1 &lt;&lt; 8"/><member cname="GDK_BUTTON2_MASK" name="Button2Mask" value="1 &lt;&lt; 9"/><member cname="GDK_BUTTON3_MASK" name="Button3Mask" value="1 &lt;&lt; 10"/><member cname="GDK_BUTTON4_MASK" name="Button4Mask" value="1 &lt;&lt; 11"/><member cname="GDK_BUTTON5_MASK" name="Button5Mask" value="1 &lt;&lt; 12"/><member cname="GDK_RELEASE_MASK" name="ReleaseMask" value="1 &lt;&lt; 31"/><member cname="GDK_MODIFIER_MASK" name="ModifierMask"/></enum><enum name="NotifyType" cname="GdkNotifyType" type="enum"><member cname="GDK_NOTIFY_ANCESTOR" name="Ancestor"/><member cname="GDK_NOTIFY_VIRTUAL" name="Virtual" value="1"/><member cname="GDK_NOTIFY_INFERIOR" name="Inferior" value="2"/><member cname="GDK_NOTIFY_NONLINEAR" name="Nonlinear" value="3"/><member cname="GDK_NOTIFY_NONLINEAR_VIRTUAL" name="NonlinearVirtual" value="4"/><member cname="GDK_NOTIFY_UNKNOWN" name="Unknown" value="5"/></enum><enum name="OverlapType" cname="GdkOverlapType" type="enum"><member cname="GDK_OVERLAP_RECTANGLE_IN" name="In"/><member cname="GDK_OVERLAP_RECTANGLE_OUT" name="Out"/><member cname="GDK_OVERLAP_RECTANGLE_PART" name="Part"/></enum><enum name="PixbufAlphaMode" cname="GdkPixbufAlphaMode" type="enum"><member cname="GDK_PIXBUF_ALPHA_BILEVEL" name="Bilevel"/><member cname="GDK_PIXBUF_ALPHA_FULL" name="Full"/></enum><enum name="PixbufError" cname="GdkPixbufError" type="enum"><member cname="GDK_PIXBUF_ERROR_CORRUPT_IMAGE" name="CorruptImage"/><member cname="GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY" name="InsufficientMemory"/><member cname="GDK_PIXBUF_ERROR_BAD_OPTION" name="BadOption"/><member cname="GDK_PIXBUF_ERROR_UNKNOWN_TYPE" name="UnknownType"/><member cname="GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION" name="UnsupportedOperation"/><member cname="GDK_PIXBUF_ERROR_FAILED" name="Failed"/></enum><enum name="PixbufFrameAction" cname="GdkPixbufFrameAction" type="enum"><member cname="GDK_PIXBUF_FRAME_RETAIN" name="Retain"/><member cname="GDK_PIXBUF_FRAME_DISPOSE" name="Dispose"/><member cname="GDK_PIXBUF_FRAME_REVERT" name="Revert"/></enum><enum name="PixdataDumpType" cname="GdkPixdataDumpType" type="flags"><member cname="GDK_PIXDATA_DUMP_PIXDATA_STREAM" name="PixdataStream"/><member cname="GDK_PIXDATA_DUMP_PIXDATA_STRUCT" name="PixdataStruct" value="1"/><member cname="GDK_PIXDATA_DUMP_MACROS" name="Macros" value="2"/><member cname="GDK_PIXDATA_DUMP_GTYPES" name="Gtypes"/><member cname="GDK_PIXDATA_DUMP_CTYPES" name="Ctypes" value="1 &lt;&lt; 8"/><member cname="GDK_PIXDATA_DUMP_STATIC" name="Static" value="1 &lt;&lt; 9"/><member cname="GDK_PIXDATA_DUMP_CONST" name="Const" value="1 &lt;&lt; 10"/><member cname="GDK_PIXDATA_DUMP_RLE_DECODER" name="RleDecoder" value="1 &lt;&lt; 16"/></enum><enum name="PixdataType" cname="GdkPixdataType" type="enum"><member cname="GDK_PIXDATA_COLOR_TYPE_RGB" name="ColorTypeRgb" value="0x01"/><member cname="GDK_PIXDATA_COLOR_TYPE_RGBA" name="ColorTypeRgba" value="0x02"/><member cname="GDK_PIXDATA_COLOR_TYPE_MASK" name="ColorTypeMask" value="0xff"/><member cname="GDK_PIXDATA_SAMPLE_WIDTH_8" name="SampleWidth8" value="1 &lt;&lt; 16"/><member cname="GDK_PIXDATA_SAMPLE_WIDTH_MASK" name="SampleWidthMask" value="0x0f &lt;&lt; 16"/><member cname="GDK_PIXDATA_ENCODING_RAW" name="EncodingRaw" value="1 &lt;&lt; 24"/><member cname="GDK_PIXDATA_ENCODING_RLE" name="EncodingRle" value="0x02 &lt;&lt; 24"/><member cname="GDK_PIXDATA_ENCODING_MASK" name="EncodingMask" value="0x0f &lt;&lt; 24"/></enum><enum name="PropMode" cname="GdkPropMode" type="enum"><member cname="GDK_PROP_MODE_REPLACE" name="Replace"/><member cname="GDK_PROP_MODE_PREPEND" name="Prepend"/><member cname="GDK_PROP_MODE_APPEND" name="Append"/></enum><enum name="PropertyState" cname="GdkPropertyState" type="enum"><member cname="GDK_PROPERTY_NEW_VALUE" name="NewValue"/><member cname="GDK_PROPERTY_DELETE" name="Delete"/></enum><enum name="RgbDither" cname="GdkRgbDither" type="enum"><member cname="GDK_RGB_DITHER_NONE" name="None"/><member cname="GDK_RGB_DITHER_NORMAL" name="Normal"/><member cname="GDK_RGB_DITHER_MAX" name="Max"/></enum><enum name="ScrollDirection" cname="GdkScrollDirection" type="enum"><member cname="GDK_SCROLL_UP" name="Up"/><member cname="GDK_SCROLL_DOWN" name="Down"/><member cname="GDK_SCROLL_LEFT" name="Left"/><member cname="GDK_SCROLL_RIGHT" name="Right"/></enum><enum name="SettingAction" cname="GdkSettingAction" type="enum"><member cname="GDK_SETTING_ACTION_NEW" name="New"/><member cname="GDK_SETTING_ACTION_CHANGED" name="Changed"/><member cname="GDK_SETTING_ACTION_DELETED" name="Deleted"/></enum><enum name="Status" cname="GdkStatus" type="enum"><member cname="GDK_OK" name="Ok"/><member cname="GDK_ERROR" name="Error"/><member cname="GDK_ERROR_PARAM" name="ErrorParam"/><member cname="GDK_ERROR_FILE" name="ErrorFile"/><member cname="GDK_ERROR_MEM" name="ErrorMem"/></enum><enum name="SubwindowMode" cname="GdkSubwindowMode" type="enum"><member cname="GDK_CLIP_BY_CHILDREN" name="ClipByChildren"/><member cname="GDK_INCLUDE_INFERIORS" name="IncludeInferiors" value="1"/></enum><enum name="VisibilityState" cname="GdkVisibilityState" type="enum"><member cname="GDK_VISIBILITY_UNOBSCURED" name="Unobscured"/><member cname="GDK_VISIBILITY_PARTIAL" name="Partial"/><member cname="GDK_VISIBILITY_FULLY_OBSCURED" name="FullyObscured"/></enum><enum name="VisualType" cname="GdkVisualType" type="enum"><member cname="GDK_VISUAL_STATIC_GRAY" name="StaticGray"/><member cname="GDK_VISUAL_GRAYSCALE" name="Grayscale"/><member cname="GDK_VISUAL_STATIC_COLOR" name="StaticColor"/><member cname="GDK_VISUAL_PSEUDO_COLOR" name="PseudoColor"/><member cname="GDK_VISUAL_TRUE_COLOR" name="TrueColor"/><member cname="GDK_VISUAL_DIRECT_COLOR" name="DirectColor"/></enum><enum name="WMDecoration" cname="GdkWMDecoration" type="flags"><member cname="GDK_DECOR_ALL" name="All" value="1 &lt;&lt; 0"/><member cname="GDK_DECOR_BORDER" name="Border" value="1 &lt;&lt; 1"/><member cname="GDK_DECOR_RESIZEH" name="Resizeh" value="1 &lt;&lt; 2"/><member cname="GDK_DECOR_TITLE" name="Title" value="1 &lt;&lt; 3"/><member cname="GDK_DECOR_MENU" name="Menu" value="1 &lt;&lt; 4"/><member cname="GDK_DECOR_MINIMIZE" name="Minimize" value="1 &lt;&lt; 5"/><member cname="GDK_DECOR_MAXIMIZE" name="Maximize" value="1 &lt;&lt; 6"/></enum><enum name="WMFunction" cname="GdkWMFunction" type="flags"><member cname="GDK_FUNC_ALL" name="All" value="1 &lt;&lt; 0"/><member cname="GDK_FUNC_RESIZE" name="Resize" value="1 &lt;&lt; 1"/><member cname="GDK_FUNC_MOVE" name="Move" value="1 &lt;&lt; 2"/><member cname="GDK_FUNC_MINIMIZE" name="Minimize" value="1 &lt;&lt; 3"/><member cname="GDK_FUNC_MAXIMIZE" name="Maximize" value="1 &lt;&lt; 4"/><member cname="GDK_FUNC_CLOSE" name="Close" value="1 &lt;&lt; 5"/></enum><enum name="WindowAttributesType" cname="GdkWindowAttributesType" type="flags"><member cname="GDK_WA_TITLE" name="Title" value="1 &lt;&lt; 1"/><member cname="GDK_WA_X" name="X" value="1 &lt;&lt; 2"/><member cname="GDK_WA_Y" name="Y" value="1 &lt;&lt; 3"/><member cname="GDK_WA_CURSOR" name="Cursor" value="1 &lt;&lt; 4"/><member cname="GDK_WA_COLORMAP" name="Colormap" value="1 &lt;&lt; 5"/><member cname="GDK_WA_VISUAL" name="Visual" value="1 &lt;&lt; 6"/><member cname="GDK_WA_WMCLASS" name="Wmclass" value="1 &lt;&lt; 7"/><member cname="GDK_WA_NOREDIR" name="Noredir" value="1 &lt;&lt; 8"/></enum><enum name="WindowClass" cname="GdkWindowClass" type="enum"><member cname="GDK_INPUT_OUTPUT" name="Output"/><member cname="GDK_INPUT_ONLY" name="Only"/></enum><enum name="WindowEdge" cname="GdkWindowEdge" type="enum"><member cname="GDK_WINDOW_EDGE_NORTH_WEST" name="NorthWest"/><member cname="GDK_WINDOW_EDGE_NORTH" name="North"/><member cname="GDK_WINDOW_EDGE_NORTH_EAST" name="NorthEast"/><member cname="GDK_WINDOW_EDGE_WEST" name="West"/><member cname="GDK_WINDOW_EDGE_EAST" name="East"/><member cname="GDK_WINDOW_EDGE_SOUTH_WEST" name="SouthWest"/><member cname="GDK_WINDOW_EDGE_SOUTH" name="South"/><member cname="GDK_WINDOW_EDGE_SOUTH_EAST" name="SouthEast"/></enum><enum name="WindowHints" cname="GdkWindowHints" type="flags"><member cname="GDK_HINT_POS" name="Pos" value="1 &lt;&lt; 0"/><member cname="GDK_HINT_MIN_SIZE" name="MinSize" value="1 &lt;&lt; 1"/><member cname="GDK_HINT_MAX_SIZE" name="MaxSize" value="1 &lt;&lt; 2"/><member cname="GDK_HINT_BASE_SIZE" name="BaseSize" value="1 &lt;&lt; 3"/><member cname="GDK_HINT_ASPECT" name="Aspect" value="1 &lt;&lt; 4"/><member cname="GDK_HINT_RESIZE_INC" name="ResizeInc" value="1 &lt;&lt; 5"/><member cname="GDK_HINT_WIN_GRAVITY" name="WinGravity" value="1 &lt;&lt; 6"/><member cname="GDK_HINT_USER_POS" name="UserPos" value="1 &lt;&lt; 7"/><member cname="GDK_HINT_USER_SIZE" name="UserSize" value="1 &lt;&lt; 8"/></enum><enum name="WindowState" cname="GdkWindowState" type="flags"><member cname="GDK_WINDOW_STATE_WITHDRAWN" name="Withdrawn" value="1 &lt;&lt; 0"/><member cname="GDK_WINDOW_STATE_ICONIFIED" name="Iconified" value="1 &lt;&lt; 1"/><member cname="GDK_WINDOW_STATE_MAXIMIZED" name="Maximized" value="1 &lt;&lt; 2"/><member cname="GDK_WINDOW_STATE_STICKY" name="Sticky" value="1 &lt;&lt; 3"/></enum><enum name="WindowType" cname="GdkWindowType" type="enum"><member cname="GDK_WINDOW_ROOT" name="Root"/><member cname="GDK_WINDOW_TOPLEVEL" name="Toplevel"/><member cname="GDK_WINDOW_CHILD" name="Child"/><member cname="GDK_WINDOW_DIALOG" name="Dialog"/><member cname="GDK_WINDOW_TEMP" name="Temp"/><member cname="GDK_WINDOW_FOREIGN" name="Foreign"/></enum><enum name="WindowTypeHint" cname="GdkWindowTypeHint" type="enum"><member cname="GDK_WINDOW_TYPE_HINT_NORMAL" name="Normal"/><member cname="GDK_WINDOW_TYPE_HINT_DIALOG" name="Dialog"/><member cname="GDK_WINDOW_TYPE_HINT_MENU" name="Menu"/><member cname="GDK_WINDOW_TYPE_HINT_TOOLBAR" name="Toolbar"/></enum><callback name="DestroyNotify" cname="GdkDestroyNotify"><return-type type="void"/><parameters><parameter type="gpointer" name="data"/></parameters></callback><callback name="EventFunc" cname="GdkEventFunc"><return-type type="void"/><parameters><parameter type="GdkEvent*" name="event"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="FilterFunc" cname="GdkFilterFunc"><return-type type="GdkFilterReturn"/><parameters><parameter type="GdkXEvent*" name="xevent"/><parameter type="GdkEvent*" name="event"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="InputFunction" cname="GdkInputFunction"><return-type type="void"/><parameters><parameter type="gpointer" name="data"/><parameter type="gint" name="source"/><parameter type="GdkInputCondition" name="condition"/></parameters></callback><callback name="PixbufDestroyNotify" cname="GdkPixbufDestroyNotify"><return-type type="void"/><parameters><parameter type="guchar*" name="pixels"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="SpanFunc" cname="GdkSpanFunc"><return-type type="void"/><parameters><parameter type="GdkSpan*" name="span"/><parameter type="gpointer" name="data"/></parameters></callback><object name="Colormap" cname="GdkColormap" parent="GObject"><field cname="size" type="gint"/><field cname="colors" type="GdkColor*"/><field cname="visual" type="GdkVisual*"/><field cname="windowing_data" type="gpointer"/><method name="alloc_colors" cname="gdk_colormap_alloc_colors"><return-type type="gint"/></method><method name="get_visual" cname="gdk_colormap_get_visual"><return-type type="GdkVisual*"/></method><method name="alloc_color" cname="gdk_colormap_alloc_color"><return-type type="gboolean"/></method><method name="query_color" cname="gdk_colormap_query_color"><return-type type="void"/></method><method name="free_colors" cname="gdk_colormap_free_colors"><return-type type="void"/></method><constructor cname="gdk_colormap_new"/></object><object name="Device" cname="GdkDevice" parent="GObject"><field cname="name" type="gchar*"/><field cname="source" type="GdkInputSource"/><field cname="mode" type="GdkInputMode"/><field cname="has_cursor" type="gboolean"/><field cname="num_axes" type="gint"/><field cname="axes" type="GdkDeviceAxis*"/><field cname="num_keys" type="gint"/><field cname="keys" type="GdkDeviceKey*"/><method name="get_state" cname="gdk_device_get_state"><return-type type="void"/></method><method name="set_axis_use" cname="gdk_device_set_axis_use"><return-type type="void"/></method><method name="set_source" cname="gdk_device_set_source"><return-type type="void"/></method><method name="set_key" cname="gdk_device_set_key"><return-type type="void"/></method><method name="get_history" cname="gdk_device_get_history"><return-type type="gboolean"/></method><method name="set_mode" cname="gdk_device_set_mode"><return-type type="gboolean"/></method><method name="get_axis" cname="gdk_device_get_axis"><return-type type="gboolean"/></method></object><object name="DragContext" cname="GdkDragContext" parent="GObject"><field cname="protocol" type="GdkDragProtocol"/><field cname="is_source" type="gboolean"/><field cname="source_window" type="GdkWindow*"/><field cname="dest_window" type="GdkWindow*"/><field cname="targets" type="GList*"/><field cname="actions" type="GdkDragAction"/><field cname="suggested_action" type="GdkDragAction"/><field cname="action" type="GdkDragAction"/><field cname="start_time" type="guint32"/><field cname="windowing_data" type="gpointer"/><constructor cname="gdk_drag_context_new"/></object><object name="Drawable" cname="GdkDrawable" parent="GObject"><method name="get_size" cname="gdk_drawable_get_size"><return-type type="void"/></method><method name="get_colormap" cname="gdk_drawable_get_colormap"><return-type type="GdkColormap*"/></method><method name="get_visual" cname="gdk_drawable_get_visual"><return-type type="GdkVisual*"/></method><method name="get_image" cname="gdk_drawable_get_image"><return-type type="GdkImage*"/></method><method name="get_visible_region" cname="gdk_drawable_get_visible_region"><return-type type="GdkRegion*"/></method><method name="get_clip_region" cname="gdk_drawable_get_clip_region"><return-type type="GdkRegion*"/></method><method name="set_colormap" cname="gdk_drawable_set_colormap"><return-type type="void"/></method><method name="get_depth" cname="gdk_drawable_get_depth"><return-type type="gint"/></method></object><object name="GC" cname="GdkGC" parent="GObject"><field cname="clip_x_origin" type="gint"/><field cname="clip_y_origin" type="gint"/><field cname="ts_x_origin" type="gint"/><field cname="ts_y_origin" type="gint"/><field cname="colormap" type="GdkColormap*"/><method name="set_colormap" cname="gdk_gc_set_colormap"><return-type type="void"/></method><method name="set_fill" cname="gdk_gc_set_fill"><return-type type="void"/></method><method name="set_foreground" cname="gdk_gc_set_foreground"><return-type type="void"/></method><method name="get_colormap" cname="gdk_gc_get_colormap"><return-type type="GdkColormap*"/></method><method name="set_clip_region" cname="gdk_gc_set_clip_region"><return-type type="void"/></method><constructor cname="gdk_gc_new_with_values"/><method name="set_subwindow" cname="gdk_gc_set_subwindow"><return-type type="void"/></method><method name="set_values" cname="gdk_gc_set_values"><return-type type="void"/></method><method name="get_values" cname="gdk_gc_get_values"><return-type type="void"/></method><method name="set_function" cname="gdk_gc_set_function"><return-type type="void"/></method><method name="set_ts_origin" cname="gdk_gc_set_ts_origin"><return-type type="void"/></method><method name="offset" cname="gdk_gc_offset"><return-type type="void"/></method><method name="set_dashes" cname="gdk_gc_set_dashes"><return-type type="void"/></method><method name="set_tile" cname="gdk_gc_set_tile"><return-type type="void"/></method><method name="set_background" cname="gdk_gc_set_background"><return-type type="void"/></method><constructor cname="gdk_gc_new"/><method name="set_clip_rectangle" cname="gdk_gc_set_clip_rectangle"><return-type type="void"/></method><method name="set_clip_origin" cname="gdk_gc_set_clip_origin"><return-type type="void"/></method><method name="set_rgb_bg_color" cname="gdk_gc_set_rgb_bg_color"><return-type type="void"/></method><method name="set_stipple" cname="gdk_gc_set_stipple"><return-type type="void"/></method><method name="set_rgb_fg_color" cname="gdk_gc_set_rgb_fg_color"><return-type type="void"/></method><method name="set_clip_mask" cname="gdk_gc_set_clip_mask"><return-type type="void"/></method><method name="copy" cname="gdk_gc_copy"><return-type type="void"/></method><method name="set_line_attributes" cname="gdk_gc_set_line_attributes"><return-type type="void"/></method><method name="set_exposures" cname="gdk_gc_set_exposures"><return-type type="void"/></method></object><object name="Image" cname="GdkImage" parent="GObject"><field cname="type" type="GdkImageType"/><field cname="visual" type="GdkVisual*"/><field cname="byte_order" type="GdkByteOrder"/><field cname="width" type="gint"/><field cname="height" type="gint"/><field cname="depth" type="guint16"/><field cname="bpp" type="guint16"/><field cname="bpl" type="guint16"/><field cname="bits_per_pixel" type="guint16"/><field cname="mem" type="gpointer"/><field cname="colormap" type="GdkColormap*"/><field cname="windowing_data" type="gpointer"/><method name="put_pixel" cname="gdk_image_put_pixel"><return-type type="void"/></method><method name="get_pixel" cname="gdk_image_get_pixel"><return-type type="guint32"/></method><constructor cname="gdk_image_new"/><method name="set_colormap" cname="gdk_image_set_colormap"><return-type type="void"/></method><method name="get_colormap" cname="gdk_image_get_colormap"><return-type type="GdkColormap*"/></method></object><object name="Keymap" cname="GdkKeymap" parent="GObject"><signal name="direction_changed" when="LAST"><return-type type="void"/><parameters><parameter type="GdkKeymap*" name="keymap"/></parameters></signal><method name="get_direction" cname="gdk_keymap_get_direction"><return-type type="PangoDirection"/></method><method name="translate_keyboard_state" cname="gdk_keymap_translate_keyboard_state"><return-type type="gboolean"/></method><method name="get_entries_for_keyval" cname="gdk_keymap_get_entries_for_keyval"><return-type type="gboolean"/></method><method name="lookup_key" cname="gdk_keymap_lookup_key"><return-type type="guint"/></method><method name="get_entries_for_keycode" cname="gdk_keymap_get_entries_for_keycode"><return-type type="gboolean"/></method></object><object name="Pixbuf" cname="GdkPixbuf" parent="GObject"><method name="get_from_image" cname="gdk_pixbuf_get_from_image"><return-type type="GdkPixbuf*"/></method><method name="render_to_drawable_alpha" cname="gdk_pixbuf_render_to_drawable_alpha"><return-type type="void"/></method><method name="new_subpixbuf" cname="gdk_pixbuf_new_subpixbuf"><return-type type="GdkPixbuf*"/></method><constructor cname="gdk_pixbuf_new_from_xpm_data"/><constructor cname="gdk_pixbuf_new_from_inline"/><method name="render_pixmap_and_mask_for_colormap" cname="gdk_pixbuf_render_pixmap_and_mask_for_colormap"><return-type type="void"/></method><constructor cname="gdk_pixbuf_new_from_file"/><method name="render_pixmap_and_mask" cname="gdk_pixbuf_render_pixmap_and_mask"><return-type type="void"/></method><method name="render_to_drawable" cname="gdk_pixbuf_render_to_drawable"><return-type type="void"/></method><method name="get_from_drawable" cname="gdk_pixbuf_get_from_drawable"><return-type type="GdkPixbuf*"/></method><constructor cname="gdk_pixbuf_new_from_data"/><constructor cname="gdk_pixbuf_new"/><method name="savev" cname="gdk_pixbuf_savev"><return-type type="gboolean"/></method><method name="get_option" cname="gdk_pixbuf_get_option"><return-type type="const-gchar*"/></method><method name="fill" cname="gdk_pixbuf_fill"><return-type type="void"/></method><method name="render_threshold_alpha" cname="gdk_pixbuf_render_threshold_alpha"><return-type type="void"/></method><method name="save" cname="gdk_pixbuf_save"><return-type type="gboolean"/></method></object><object name="PixbufAnimation" cname="GdkPixbufAnimation" parent="GObject"><method name="get_iter" cname="gdk_pixbuf_animation_get_iter"><return-type type="GdkPixbufAnimationIter*"/></method><method name="get_static_image" cname="gdk_pixbuf_animation_get_static_image"><return-type type="GdkPixbuf*"/></method><method name="get_height" cname="gdk_pixbuf_animation_get_height"><return-type type="int"/></method><method name="get_width" cname="gdk_pixbuf_animation_get_width"><return-type type="int"/></method><method name="is_static_image" cname="gdk_pixbuf_animation_is_static_image"><return-type type="gboolean"/></method><constructor cname="gdk_pixbuf_animation_new_from_file"/></object><object name="PixbufAnimationIter" cname="GdkPixbufAnimationIter" parent="GObject"><method name="advance" cname="gdk_pixbuf_animation_iter_advance"><return-type type="gboolean"/></method><method name="on_currently_loading_frame" cname="gdk_pixbuf_animation_iter_on_currently_loading_frame"><return-type type="gboolean"/></method><method name="get_pixbuf" cname="gdk_pixbuf_animation_iter_get_pixbuf"><return-type type="GdkPixbuf*"/></method><method name="get_delay_time" cname="gdk_pixbuf_animation_iter_get_delay_time"><return-type type="int"/></method></object><object name="PixbufGifAnim" cname="GdkPixbufGifAnim" parent="GdkPixbufAnimation"><field cname="n_frames" type="int"/><field cname="total_time" type="int"/><field cname="frames" type="GList*"/><field cname="width" type="int"/><field cname="height" type="int"/><field cname="bg_red" type="guchar"/><field cname="bg_green" type="guchar"/><field cname="bg_blue" type="guchar"/><method name="frame_composite" cname="gdk_pixbuf_gif_anim_frame_composite"><return-type type="void"/></method></object><object name="PixbufGifAnimIter" cname="GdkPixbufGifAnimIter" parent="GdkPixbufAnimationIter"><field cname="gif_anim" type="GdkPixbufGifAnim*"/><field cname="start_time" type="GTimeVal"/><field cname="current_time" type="GTimeVal"/><field cname="position" type="gint"/><field cname="current_frame" type="GList*"/></object><object name="PixbufLoader" cname="GdkPixbufLoader" parent="GObject"><field cname="priv" type="gpointer"/><constructor cname="gdk_pixbuf_loader_new_with_type"/><method name="get_pixbuf" cname="gdk_pixbuf_loader_get_pixbuf"><return-type type="GdkPixbuf*"/></method><method name="write" cname="gdk_pixbuf_loader_write"><return-type type="gboolean"/></method><method name="close" cname="gdk_pixbuf_loader_close"><return-type type="gboolean"/></method><method name="get_animation" cname="gdk_pixbuf_loader_get_animation"><return-type type="GdkPixbufAnimation*"/></method><constructor cname="gdk_pixbuf_loader_new"/></object><object name="Pixmap" cname="GdkPixmap" parent="GObject"><constructor cname="gdk_pixmap_new"/></object><object name="Visual" cname="GdkVisual" parent="GObject"><field cname="type" type="GdkVisualType"/><field cname="depth" type="gint"/><field cname="byte_order" type="GdkByteOrder"/><field cname="colormap_size" type="gint"/><field cname="bits_per_rgb" type="gint"/><field cname="red_mask" type="guint32"/><field cname="red_shift" type="gint"/><field cname="red_prec" type="gint"/><field cname="green_mask" type="guint32"/><field cname="green_shift" type="gint"/><field cname="green_prec" type="gint"/><field cname="blue_mask" type="guint32"/><field cname="blue_shift" type="gint"/><field cname="blue_prec" type="gint"/></object><object name="Window" cname="GdkWindow" parent="GObject"><method name="get_geometry" cname="gdk_window_get_geometry"><return-type type="void"/></method><method name="set_icon_list" cname="gdk_window_set_icon_list"><return-type type="void"/></method><method name="get_toplevel" cname="gdk_window_get_toplevel"><return-type type="GdkWindow*"/></method><method name="set_transient_for" cname="gdk_window_set_transient_for"><return-type type="void"/></method><method name="clear_area_e" cname="gdk_window_clear_area_e"><return-type type="void"/></method><method name="get_parent" cname="gdk_window_get_parent"><return-type type="GdkWindow*"/></method><method name="set_back_pixmap" cname="gdk_window_set_back_pixmap"><return-type type="void"/></method><method name="invalidate_maybe_recurse" cname="gdk_window_invalidate_maybe_recurse"><return-type type="void"/></method><method name="set_group" cname="gdk_window_set_group"><return-type type="void"/></method><method name="scroll" cname="gdk_window_scroll"><return-type type="void"/></method><method name="merge_child_shapes" cname="gdk_window_merge_child_shapes"><return-type type="void"/></method><method name="set_icon" cname="gdk_window_set_icon"><return-type type="void"/></method><method name="set_events" cname="gdk_window_set_events"><return-type type="void"/></method><method name="lower" cname="gdk_window_lower"><return-type type="void"/></method><method name="get_events" cname="gdk_window_get_events"><return-type type="GdkEventMask"/></method><method name="get_window_type" cname="gdk_window_get_window_type"><return-type type="GdkWindowType"/></method><method name="show" cname="gdk_window_show"><return-type type="void"/></method><method name="add_filter" cname="gdk_window_add_filter"><return-type type="void"/></method><method name="set_cursor" cname="gdk_window_set_cursor"><return-type type="void"/></method><method name="set_functions" cname="gdk_window_set_functions"><return-type type="void"/></method><method name="set_title" cname="gdk_window_set_title"><return-type type="void"/></method><method name="set_background" cname="gdk_window_set_background"><return-type type="void"/></method><method name="get_update_area" cname="gdk_window_get_update_area"><return-type type="GdkRegion*"/></method><method name="begin_paint_rect" cname="gdk_window_begin_paint_rect"><return-type type="void"/></method><method name="invalidate_region" cname="gdk_window_invalidate_region"><return-type type="void"/></method><method name="withdraw" cname="gdk_window_withdraw"><return-type type="void"/></method><method name="get_pointer" cname="gdk_window_get_pointer"><return-type type="GdkWindow*"/></method><method name="set_override_redirect" cname="gdk_window_set_override_redirect"><return-type type="void"/></method><method name="destroy" cname="gdk_window_destroy"><return-type type="void"/></method><method name="set_modal_hint" cname="gdk_window_set_modal_hint"><return-type type="void"/></method><method name="hide" cname="gdk_window_hide"><return-type type="void"/></method><method name="begin_move_drag" cname="gdk_window_begin_move_drag"><return-type type="void"/></method><method name="move_resize" cname="gdk_window_move_resize"><return-type type="void"/></method><method name="set_user_data" cname="gdk_window_set_user_data"><return-type type="void"/></method><method name="get_frame_extents" cname="gdk_window_get_frame_extents"><return-type type="void"/></method><method name="get_root_origin" cname="gdk_window_get_root_origin"><return-type type="void"/></method><method name="get_state" cname="gdk_window_get_state"><return-type type="GdkWindowState"/></method><method name="is_visible" cname="gdk_window_is_visible"><return-type type="gboolean"/></method><method name="focus" cname="gdk_window_focus"><return-type type="void"/></method><method name="clear" cname="gdk_window_clear"><return-type type="void"/></method><method name="get_origin" cname="gdk_window_get_origin"><return-type type="gint"/></method><method name="begin_paint_region" cname="gdk_window_begin_paint_region"><return-type type="void"/></method><method name="resize" cname="gdk_window_resize"><return-type type="void"/></method><method name="register_dnd" cname="gdk_window_register_dnd"><return-type type="void"/></method><method name="set_static_gravities" cname="gdk_window_set_static_gravities"><return-type type="gboolean"/></method><method name="shape_combine_region" cname="gdk_window_shape_combine_region"><return-type type="void"/></method><method name="reparent" cname="gdk_window_reparent"><return-type type="void"/></method><method name="end_paint" cname="gdk_window_end_paint"><return-type type="void"/></method><method name="set_geometry_hints" cname="gdk_window_set_geometry_hints"><return-type type="void"/></method><method name="stick" cname="gdk_window_stick"><return-type type="void"/></method><method name="get_user_data" cname="gdk_window_get_user_data"><return-type type="void"/></method><method name="move" cname="gdk_window_move"><return-type type="void"/></method><method name="new" cname="gdk_window_new"><return-type type="GdkWindow*"/></method><method name="set_role" cname="gdk_window_set_role"><return-type type="void"/></method><method name="deiconify" cname="gdk_window_deiconify"><return-type type="void"/></method><method name="peek_children" cname="gdk_window_peek_children"><return-type type="GList*"/></method><method name="set_type_hint" cname="gdk_window_set_type_hint"><return-type type="void"/></method><method name="unmaximize" cname="gdk_window_unmaximize"><return-type type="void"/></method><method name="get_decorations" cname="gdk_window_get_decorations"><return-type type="gboolean"/></method><method name="begin_resize_drag" cname="gdk_window_begin_resize_drag"><return-type type="void"/></method><method name="maximize" cname="gdk_window_maximize"><return-type type="void"/></method><method name="raise" cname="gdk_window_raise"><return-type type="void"/></method><method name="shape_combine_mask" cname="gdk_window_shape_combine_mask"><return-type type="void"/></method><method name="clear_area" cname="gdk_window_clear_area"><return-type type="void"/></method><method name="get_position" cname="gdk_window_get_position"><return-type type="void"/></method><method name="set_icon_name" cname="gdk_window_set_icon_name"><return-type type="void"/></method><method name="show_unraised" cname="gdk_window_show_unraised"><return-type type="void"/></method><method name="thaw_updates" cname="gdk_window_thaw_updates"><return-type type="void"/></method><method name="set_decorations" cname="gdk_window_set_decorations"><return-type type="void"/></method><method name="unstick" cname="gdk_window_unstick"><return-type type="void"/></method><method name="invalidate_rect" cname="gdk_window_invalidate_rect"><return-type type="void"/></method><method name="get_internal_paint_info" cname="gdk_window_get_internal_paint_info"><return-type type="void"/></method><method name="iconify" cname="gdk_window_iconify"><return-type type="void"/></method><method name="get_children" cname="gdk_window_get_children"><return-type type="GList*"/></method><method name="is_viewable" cname="gdk_window_is_viewable"><return-type type="gboolean"/></method><method name="remove_filter" cname="gdk_window_remove_filter"><return-type type="void"/></method><method name="freeze_updates" cname="gdk_window_freeze_updates"><return-type type="void"/></method><method name="process_updates" cname="gdk_window_process_updates"><return-type type="void"/></method><method name="set_child_shapes" cname="gdk_window_set_child_shapes"><return-type type="void"/></method></object><struct name="Bitmap" cname="GdkBitmap"><field cname="parent_instance" type="GObject"/></struct><boxed name="Color" cname="GdkColor"><field cname="pixel" type="guint32"/><field cname="red" type="guint16"/><field cname="green" type="guint16"/><field cname="blue" type="guint16"/><method name="free" cname="gdk_color_free"><return-type type="void"/></method></boxed><boxed name="Cursor" cname="GdkCursor"><field cname="type" type="GdkCursorType"/><field cname="ref_count" type="guint"/><constructor cname="gdk_cursor_new"/><method name="unref" cname="gdk_cursor_unref"><return-type type="void"/></method><method name="ref" cname="gdk_cursor_ref"><return-type type="GdkCursor*"/></method><constructor cname="gdk_cursor_new_from_pixmap"/></boxed><struct name="DeviceAxis" cname="GdkDeviceAxis"><field cname="use" type="GdkAxisUse"/><field cname="min" type="gdouble"/><field cname="max" type="gdouble"/></struct><struct name="DeviceKey" cname="GdkDeviceKey"><field cname="keyval" type="guint"/><field cname="modifiers" type="GdkModifierType"/></struct><struct name="EventAny" cname="GdkEventAny"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/></struct><struct name="EventButton" cname="GdkEventButton"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="time" type="guint32"/><field cname="x" type="gdouble"/><field cname="y" type="gdouble"/><field cname="axes" type="gdouble*"/><field cname="state" type="guint"/><field cname="button" type="guint"/><field cname="device" type="GdkDevice*"/><field cname="x_root" type="gdouble"/><field cname="y_root" type="gdouble"/></struct><struct name="EventClient" cname="GdkEventClient"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="message_type" type="GdkAtom"/><field cname="data_format" type="gushort"/><field cname="b" array_len="20" type="union"/><field cname="s" array_len="10" type="short"/><field cname="l" array_len="5" type="long"/><field cname="data" type="}"/></struct><struct name="EventConfigure" cname="GdkEventConfigure"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="x" type="gint"/><field cname="y" type="gint"/><field cname="width" type="gint"/><field cname="height" type="gint"/></struct><struct name="EventCrossing" cname="GdkEventCrossing"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="subwindow" type="GdkWindow*"/><field cname="time" type="guint32"/><field cname="x" type="gdouble"/><field cname="y" type="gdouble"/><field cname="x_root" type="gdouble"/><field cname="y_root" type="gdouble"/><field cname="mode" type="GdkCrossingMode"/><field cname="detail" type="GdkNotifyType"/><field cname="focus" type="gboolean"/><field cname="state" type="guint"/></struct><struct name="EventDND" cname="GdkEventDND"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="context" type="GdkDragContext*"/><field cname="time" type="guint32"/><field cname="x_root" type="gshort"/><field cname="y_root" type="gshort"/></struct><struct name="EventExpose" cname="GdkEventExpose"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="area" type="GdkRectangle"/><field cname="region" type="GdkRegion*"/><field cname="count" type="gint"/></struct><struct name="EventFocus" cname="GdkEventFocus"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="in" type="gint16"/></struct><struct name="EventKey" cname="GdkEventKey"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="time" type="guint32"/><field cname="state" type="guint"/><field cname="keyval" type="guint"/><field cname="length" type="gint"/><field cname="string" type="gchar*"/><field cname="hardware_keycode" type="guint16"/><field cname="group" type="guint8"/></struct><struct name="EventMotion" cname="GdkEventMotion"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="time" type="guint32"/><field cname="x" type="gdouble"/><field cname="y" type="gdouble"/><field cname="axes" type="gdouble*"/><field cname="state" type="guint"/><field cname="is_hint" type="gint16"/><field cname="device" type="GdkDevice*"/><field cname="x_root" type="gdouble"/><field cname="y_root" type="gdouble"/></struct><struct name="EventNoExpose" cname="GdkEventNoExpose"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/></struct><struct name="EventProperty" cname="GdkEventProperty"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="atom" type="GdkAtom"/><field cname="time" type="guint32"/><field cname="state" type="guint"/></struct><struct name="EventProximity" cname="GdkEventProximity"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="time" type="guint32"/><field cname="device" type="GdkDevice*"/></struct><struct name="EventScroll" cname="GdkEventScroll"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="time" type="guint32"/><field cname="x" type="gdouble"/><field cname="y" type="gdouble"/><field cname="state" type="guint"/><field cname="direction" type="GdkScrollDirection"/><field cname="device" type="GdkDevice*"/><field cname="x_root" type="gdouble"/><field cname="y_root" type="gdouble"/></struct><struct name="EventSelection" cname="GdkEventSelection"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="selection" type="GdkAtom"/><field cname="target" type="GdkAtom"/><field cname="property" type="GdkAtom"/><field cname="time" type="guint32"/><field cname="requestor" type="GdkNativeWindow"/></struct><struct name="EventSetting" cname="GdkEventSetting"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="action" type="GdkSettingAction"/><field cname="name" type="char*"/></struct><struct name="EventVisibility" cname="GdkEventVisibility"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="state" type="GdkVisibilityState"/></struct><struct name="EventWindowState" cname="GdkEventWindowState"><field cname="type" type="GdkEventType"/><field cname="window" type="GdkWindow*"/><field cname="send_event" type="gint8"/><field cname="changed_mask" type="GdkWindowState"/><field cname="new_window_state" type="GdkWindowState"/></struct><boxed name="Font" cname="GdkFont"><field cname="type" type="GdkFontType"/><field cname="ascent" type="gint"/><field cname="descent" type="gint"/><method name="unref" cname="gdk_font_unref"><return-type type="void"/></method><method name="ref" cname="gdk_font_ref"><return-type type="GdkFont*"/></method><method name="full_name_get" cname="gdk_font_full_name_get"><return-type type="gchar*"/></method></boxed><struct name="GCValues" cname="GdkGCValues"><field cname="foreground" type="GdkColor"/><field cname="background" type="GdkColor"/><field cname="font" type="GdkFont*"/><field cname="function" type="GdkFunction"/><field cname="fill" type="GdkFill"/><field cname="tile" type="GdkPixmap*"/><field cname="stipple" type="GdkPixmap*"/><field cname="clip_mask" type="GdkPixmap*"/><field cname="subwindow_mode" type="GdkSubwindowMode"/><field cname="ts_x_origin" type="gint"/><field cname="ts_y_origin" type="gint"/><field cname="clip_x_origin" type="gint"/><field cname="clip_y_origin" type="gint"/><field cname="graphics_exposures" type="gint"/><field cname="line_width" type="gint"/><field cname="line_style" type="GdkLineStyle"/><field cname="cap_style" type="GdkCapStyle"/><field cname="join_style" type="GdkJoinStyle"/></struct><struct name="Geometry" cname="GdkGeometry"><field cname="min_width" type="gint"/><field cname="min_height" type="gint"/><field cname="max_width" type="gint"/><field cname="max_height" type="gint"/><field cname="base_width" type="gint"/><field cname="base_height" type="gint"/><field cname="width_inc" type="gint"/><field cname="height_inc" type="gint"/><field cname="min_aspect" type="gdouble"/><field cname="max_aspect" type="gdouble"/><field cname="win_gravity" type="GdkGravity"/></struct><struct name="KeymapKey" cname="GdkKeymapKey"><field cname="keycode" type="guint"/><field cname="group" type="gint"/><field cname="level" type="gint"/></struct><alias name="NativeWindow" cname="GdkNativeWindow" type="guint32 "/><struct name="PangoAttrEmbossed" cname="GdkPangoAttrEmbossed"><field cname="attr" type="PangoAttribute"/><field cname="embossed" type="gboolean"/><constructor cname="gdk_pango_attr_embossed_new"/></struct><struct name="PangoAttrStipple" cname="GdkPangoAttrStipple"><field cname="attr" type="PangoAttribute"/><field cname="stipple" type="GdkBitmap*"/><constructor cname="gdk_pango_attr_stipple_new"/></struct><struct name="PixbufFrame" cname="GdkPixbufFrame"><field cname="pixbuf" type="GdkPixbuf*"/><field cname="x_offset" type="int"/><field cname="y_offset" type="int"/><field cname="delay_time" type="int"/><field cname="elapsed" type="int"/><field cname="action" type="GdkPixbufFrameAction"/><field cname="need_recomposite" type="gboolean"/><field cname="bg_transparent" type="gboolean"/><field cname="composited" type="GdkPixbuf*"/><field cname="revert" type="GdkPixbuf*"/></struct><struct name="PixbufModule" cname="GdkPixbufModule"><field cname="module_name" type="char*"/><callback cname="format_check"><return-type type="gboolean"/><parameters><parameter type="guchar*" name="buffer,"/></parameters></callback><field cname="module" type="GModule*"/><callback cname="load"><return-type type="GdkPixbuf*"/><parameters><parameter type="FILE*" name="f,GError**"/></parameters></callback><callback cname="load_xpm_data"><return-type type="GdkPixbuf*"/><parameters><parameter type="const-char**" name="data"/></parameters></callback><callback cname="begin_load"><return-type type="gpointer"/><parameters><parameter type="ModulePreparedNotifyFunc" name="prepare_func,ModuleUpdatedNotifyFunc"/></parameters></callback><callback cname="stop_load"><return-type type="gboolean"/><parameters><parameter type="gpointer" name="context,GError**"/></parameters></callback><callback cname="load_increment"><return-type type="gboolean"/><parameters><parameter type="gpointer" name="context,const-guchar*"/></parameters></callback><callback cname="load_animation"><return-type type="GdkPixbufAnimation*"/><parameters><parameter type="FILE*" name="f,GError**"/></parameters></callback><callback cname="save"><return-type type="gboolean"/><parameters><parameter type="FILE*" name="f,GdkPixbuf*"/></parameters></callback></struct><struct name="Pixdata" cname="GdkPixdata"><field cname="magic" type="guint32"/><field cname="length" type="gint32"/><field cname="pixdata_type" type="guint32"/><field cname="rowstride" type="guint32"/><field cname="width" type="guint32"/><field cname="height" type="guint32"/><field cname="pixel_data" type="guint8*"/><method name="deserialize" cname="gdk_pixdata_deserialize"><return-type type="gboolean"/></method><method name="from_pixbuf" cname="gdk_pixdata_from_pixbuf"><return-type type="gpointer"/></method><method name="to_csource" cname="gdk_pixdata_to_csource"><return-type type="GString*"/></method></struct><struct name="PixmapObject" cname="GdkPixmapObject"><field cname="parent_instance" type="GdkDrawable"/><field cname="impl" type="GdkDrawable*"/><field cname="depth" type="gint"/></struct><struct name="Point" cname="GdkPoint"><field cname="x" type="gint"/><field cname="y" type="gint"/></struct><struct name="PointerHooks" cname="GdkPointerHooks"><callback cname="get_pointer"><return-type type="GdkWindow*"/><parameters><parameter type="GdkWindow*" name="window,gint*"/></parameters></callback><callback cname="window_at_pointer"><return-type type="GdkWindow*"/><parameters><parameter type="GdkScreen*" name="screen,"/></parameters></callback></struct><boxed name="Rectangle" cname="GdkRectangle"><field cname="x" type="gint"/><field cname="y" type="gint"/><field cname="width" type="gint"/><field cname="height" type="gint"/><method name="intersect" cname="gdk_rectangle_intersect"><return-type type="gboolean"/></method><method name="union" cname="gdk_rectangle_union"><return-type type="void"/></method></boxed><struct name="Region" cname="GdkRegion"><field cname="size" type="long"/><field cname="numRects" type="long"/><field cname="rects" type="GdkRegionBox*"/><field cname="extents" type="GdkRegionBox"/><method name="get_rectangles" cname="gdk_region_get_rectangles"><return-type type="void"/></method><method name="destroy" cname="gdk_region_destroy"><return-type type="void"/></method><method name="get_clipbox" cname="gdk_region_get_clipbox"><return-type type="void"/></method><method name="shrink" cname="gdk_region_shrink"><return-type type="void"/></method><method name="spans_intersect_foreach" cname="gdk_region_spans_intersect_foreach"><return-type type="void"/></method><method name="copy" cname="gdk_region_copy"><return-type type="GdkRegion*"/></method><method name="point_in" cname="gdk_region_point_in"><return-type type="gboolean"/></method><method name="rect_in" cname="gdk_region_rect_in"><return-type type="GdkOverlapType"/></method><method name="union" cname="gdk_region_union"><return-type type="void"/></method><method name="union_with_rect" cname="gdk_region_union_with_rect"><return-type type="void"/></method><method name="empty" cname="gdk_region_empty"><return-type type="gboolean"/></method><method name="xor" cname="gdk_region_xor"><return-type type="void"/></method><method name="intersect" cname="gdk_region_intersect"><return-type type="void"/></method><method name="equal" cname="gdk_region_equal"><return-type type="gboolean"/></method><method name="offset" cname="gdk_region_offset"><return-type type="void"/></method><method name="subtract" cname="gdk_region_subtract"><return-type type="void"/></method><constructor cname="gdk_region_new"/></struct><alias name="RegionBox" cname="GdkRegionBox" type="GdkSegment "/><struct name="RgbCmap" cname="GdkRgbCmap"><field cname="colors" array_len="256" type="guint32"/><field cname="n_colors" type="gint"/><field cname="info_list" type="GSList*"/><constructor cname="gdk_rgb_cmap_new"/><method name="free" cname="gdk_rgb_cmap_free"><return-type type="void"/></method></struct><struct name="Segment" cname="GdkSegment"><field cname="x1" type="gint"/><field cname="y1" type="gint"/><field cname="x2" type="gint"/><field cname="y2" type="gint"/></struct><struct name="Span" cname="GdkSpan"><field cname="x" type="gint"/><field cname="y" type="gint"/><field cname="width" type="gint"/></struct><struct name="TimeCoord" cname="GdkTimeCoord"><field cname="time" type="guint32"/><field cname="axes" array_len="GDK_MAX_TIMECOORD_AXES" type="gdouble"/></struct><alias name="WChar" cname="GdkWChar" type="guint32       "/><struct name="WindowAttr" cname="GdkWindowAttr"><field cname="title" type="gchar*"/><field cname="event_mask" type="gint"/><field cname="x" type="gint"/><field cname="y" type="gint"/><field cname="width" type="gint"/><field cname="height" type="gint"/><field cname="wclass" type="GdkWindowClass"/><field cname="visual" type="GdkVisual*"/><field cname="colormap" type="GdkColormap*"/><field cname="window_type" type="GdkWindowType"/><field cname="cursor" type="GdkCursor*"/><field cname="wmclass_name" type="gchar*"/><field cname="wmclass_class" type="gchar*"/><field cname="override_redirect" type="gboolean"/></struct><struct name="WindowObject" cname="GdkWindowObject"><field cname="parent_instance" type="GdkDrawable"/><field cname="impl" type="GdkDrawable*"/><field cname="parent" type="GdkWindowObject*"/><field cname="user_data" type="gpointer"/><field cname="x" type="gint"/><field cname="y" type="gint"/><field cname="extension_events" type="gint"/><field cname="filters" type="GList*"/><field cname="children" type="GList*"/><field cname="bg_color" type="GdkColor"/><field cname="bg_pixmap" type="GdkPixmap*"/><field cname="paint_stack" type="GSList*"/><field cname="update_area" type="GdkRegion*"/><field cname="update_freeze_count" type="guint"/><field cname="window_type" type="guint8"/><field cname="depth" type="guint8"/><field cname="resize_count" type="guint8"/><field cname="state" type="GdkWindowState"/><field cname="guffaw_gravity" bits="1" type="guint"/><field cname="input_only" bits="1" type="guint"/><field cname="modal_hint" bits="1" type="guint"/><field cname="destroyed" bits="2" type="guint"/></struct><alias name="XEvent" cname="GdkXEvent" type="void "/></namespace><namespace name="Gtk"><enum name="AccelFlags" cname="GtkAccelFlags" type="flags"><member cname="GTK_ACCEL_VISIBLE" name="Visible" value="1 &lt;&lt; 0"/><member cname="GTK_ACCEL_LOCKED" name="Locked" value="1 &lt;&lt; 1"/><member cname="GTK_ACCEL_MASK" name="Mask" value="0x07"/></enum><enum name="AnchorType" cname="GtkAnchorType" type="enum"><member cname="GTK_ANCHOR_CENTER" name="Center"/><member cname="GTK_ANCHOR_NORTH" name="North"/><member cname="GTK_ANCHOR_NORTH_WEST" name="NorthWest"/><member cname="GTK_ANCHOR_NORTH_EAST" name="NorthEast"/><member cname="GTK_ANCHOR_SOUTH" name="South"/><member cname="GTK_ANCHOR_SOUTH_WEST" name="SouthWest"/><member cname="GTK_ANCHOR_SOUTH_EAST" name="SouthEast"/><member cname="GTK_ANCHOR_WEST" name="West"/><member cname="GTK_ANCHOR_EAST" name="East"/><member cname="GTK_ANCHOR_N" name="N"/><member cname="GTK_ANCHOR_NW" name="Nw"/><member cname="GTK_ANCHOR_NE" name="Ne"/><member cname="GTK_ANCHOR_S" name="S"/><member cname="GTK_ANCHOR_SW" name="Sw"/><member cname="GTK_ANCHOR_SE" name="Se"/><member cname="GTK_ANCHOR_W" name="W"/><member cname="GTK_ANCHOR_E" name="E"/></enum><enum name="ArrowType" cname="GtkArrowType" type="enum"><member cname="GTK_ARROW_UP" name="Up"/><member cname="GTK_ARROW_DOWN" name="Down"/><member cname="GTK_ARROW_LEFT" name="Left"/><member cname="GTK_ARROW_RIGHT" name="Right"/></enum><enum name="AttachOptions" cname="GtkAttachOptions" type="flags"><member cname="GTK_EXPAND" name="Expand" value="1 &lt;&lt; 0"/><member cname="GTK_SHRINK" name="Shrink" value="1 &lt;&lt; 1"/><member cname="GTK_FILL" name="Fill" value="1 &lt;&lt; 2"/></enum><enum name="ButtonAction" cname="GtkButtonAction" type="flags"><member cname="GTK_BUTTON_IGNORED" name="Ignored"/><member cname="GTK_BUTTON_SELECTS" name="Selects" value="1 &lt;&lt; 0"/><member cname="GTK_BUTTON_DRAGS" name="Drags" value="1 &lt;&lt; 1"/><member cname="GTK_BUTTON_EXPANDS" name="Expands" value="1 &lt;&lt; 2"/></enum><enum name="ButtonBoxStyle" cname="GtkButtonBoxStyle" type="enum"><member cname="GTK_BUTTONBOX_DEFAULT_STYLE" name="DefaultStyle"/><member cname="GTK_BUTTONBOX_SPREAD" name="Spread"/><member cname="GTK_BUTTONBOX_EDGE" name="Edge"/><member cname="GTK_BUTTONBOX_START" name="Start"/><member cname="GTK_BUTTONBOX_END" name="End"/></enum><enum name="ButtonsType" cname="GtkButtonsType" type="enum"><member cname="GTK_BUTTONS_NONE" name="None"/><member cname="GTK_BUTTONS_OK" name="Ok"/><member cname="GTK_BUTTONS_CLOSE" name="Close"/><member cname="GTK_BUTTONS_CANCEL" name="Cancel"/><member cname="GTK_BUTTONS_YES_NO" name="YesNo"/><member cname="GTK_BUTTONS_OK_CANCEL" name="OkCancel"/></enum><enum name="CListDragPos" cname="GtkCListDragPos" type="enum"><member cname="GTK_CLIST_DRAG_NONE" name="None"/><member cname="GTK_CLIST_DRAG_BEFORE" name="Before"/><member cname="GTK_CLIST_DRAG_INTO" name="Into"/><member cname="GTK_CLIST_DRAG_AFTER" name="After"/></enum><enum name="CTreeExpanderStyle" cname="GtkCTreeExpanderStyle" type="enum"><member cname="GTK_CTREE_EXPANDER_NONE" name="None"/><member cname="GTK_CTREE_EXPANDER_SQUARE" name="Square"/><member cname="GTK_CTREE_EXPANDER_TRIANGLE" name="Triangle"/><member cname="GTK_CTREE_EXPANDER_CIRCULAR" name="Circular"/></enum><enum name="CTreeExpansionType" cname="GtkCTreeExpansionType" type="enum"><member cname="GTK_CTREE_EXPANSION_EXPAND" name="Expand"/><member cname="GTK_CTREE_EXPANSION_EXPAND_RECURSIVE" name="ExpandRecursive"/><member cname="GTK_CTREE_EXPANSION_COLLAPSE" name="Collapse"/><member cname="GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE" name="CollapseRecursive"/><member cname="GTK_CTREE_EXPANSION_TOGGLE" name="Toggle"/><member cname="GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE" name="ToggleRecursive"/></enum><enum name="CTreeLineStyle" cname="GtkCTreeLineStyle" type="enum"><member cname="GTK_CTREE_LINES_NONE" name="None"/><member cname="GTK_CTREE_LINES_SOLID" name="Solid"/><member cname="GTK_CTREE_LINES_DOTTED" name="Dotted"/><member cname="GTK_CTREE_LINES_TABBED" name="Tabbed"/></enum><enum name="CTreePos" cname="GtkCTreePos" type="enum"><member cname="GTK_CTREE_POS_BEFORE" name="Before"/><member cname="GTK_CTREE_POS_AS_CHILD" name="AsChild"/><member cname="GTK_CTREE_POS_AFTER" name="After"/></enum><enum name="CalendarDisplayOptions" cname="GtkCalendarDisplayOptions" type="flags"><member cname="GTK_CALENDAR_SHOW_HEADING" name="ShowHeading" value="1 &lt;&lt; 0"/><member cname="GTK_CALENDAR_SHOW_DAY_NAMES" name="ShowDayNames" value="1 &lt;&lt; 1"/><member cname="GTK_CALENDAR_NO_MONTH_CHANGE" name="NoMonthChange" value="1 &lt;&lt; 2"/><member cname="GTK_CALENDAR_SHOW_WEEK_NUMBERS" name="ShowWeekNumbers" value="1 &lt;&lt; 3"/><member cname="GTK_CALENDAR_WEEK_START_MONDAY" name="WeekStartMonday" value="1 &lt;&lt; 4"/></enum><enum name="CellRendererMode" cname="GtkCellRendererMode" type="enum"><member cname="GTK_CELL_RENDERER_MODE_INERT" name="Inert"/><member cname="GTK_CELL_RENDERER_MODE_ACTIVATABLE" name="Activatable"/><member cname="GTK_CELL_RENDERER_MODE_EDITABLE" name="Editable"/></enum><enum name="CellRendererState" cname="GtkCellRendererState" type="flags"><member cname="GTK_CELL_RENDERER_SELECTED" name="Selected" value="1 &lt;&lt; 0"/><member cname="GTK_CELL_RENDERER_PRELIT" name="Prelit" value="1 &lt;&lt; 1"/><member cname="GTK_CELL_RENDERER_INSENSITIVE" name="Insensitive" value="1 &lt;&lt; 2"/><member cname="GTK_CELL_RENDERER_SORTED" name="Sorted" value="1 &lt;&lt; 3"/></enum><enum name="CellType" cname="GtkCellType" type="enum"><member cname="GTK_CELL_EMPTY" name="Empty"/><member cname="GTK_CELL_TEXT" name="Text"/><member cname="GTK_CELL_PIXMAP" name="Pixmap"/><member cname="GTK_CELL_PIXTEXT" name="Pixtext"/><member cname="GTK_CELL_WIDGET" name="Widget"/></enum><enum name="CornerType" cname="GtkCornerType" type="enum"><member cname="GTK_CORNER_TOP_LEFT" name="TopLeft"/><member cname="GTK_CORNER_BOTTOM_LEFT" name="BottomLeft"/><member cname="GTK_CORNER_TOP_RIGHT" name="TopRight"/><member cname="GTK_CORNER_BOTTOM_RIGHT" name="BottomRight"/></enum><enum name="CurveType" cname="GtkCurveType" type="enum"><member cname="GTK_CURVE_TYPE_LINEAR" name="Linear"/><member cname="GTK_CURVE_TYPE_SPLINE" name="Spline"/><member cname="GTK_CURVE_TYPE_FREE" name="Free"/></enum><enum name="DebugFlag" cname="GtkDebugFlag" type="flags"><member cname="GTK_DEBUG_MISC" name="Misc" value="1 &lt;&lt; 0"/><member cname="GTK_DEBUG_PLUGSOCKET" name="Plugsocket" value="1 &lt;&lt; 1"/><member cname="GTK_DEBUG_TEXT" name="Text" value="1 &lt;&lt; 2"/><member cname="GTK_DEBUG_TREE" name="Tree" value="1 &lt;&lt; 3"/><member cname="GTK_DEBUG_UPDATES" name="Updates" value="1 &lt;&lt; 4"/></enum><enum name="DeleteType" cname="GtkDeleteType" type="enum"><member cname="GTK_DELETE_CHARS" name="Chars"/><member cname="GTK_DELETE_WORD_ENDS" name="WordEnds"/><member cname="GTK_DELETE_PARAGRAPHS" name="Paragraphs"/><member cname="GTK_DELETE_WHITESPACE" name="Whitespace"/></enum><enum name="DestDefaults" cname="GtkDestDefaults" type="flags"><member cname="GTK_DEST_DEFAULT_MOTION" name="Motion" value="1 &lt;&lt; 0"/><member cname="GTK_DEST_DEFAULT_HIGHLIGHT" name="Highlight" value="1 &lt;&lt; 1"/><member cname="GTK_DEST_DEFAULT_DROP" name="Drop" value="1 &lt;&lt; 2"/><member cname="GTK_DEST_DEFAULT_ALL" name="All" value="0x07"/></enum><enum name="DialogFlags" cname="GtkDialogFlags" type="enum"><member cname="GTK_DIALOG_MODAL" name="Modal"/><member cname="GTK_DIALOG_DESTROY_WITH_PARENT" name="DestroyWithParent"/><member cname="GTK_DIALOG_NO_SEPARATOR" name="NoSeparator"/></enum><enum name="DirectionType" cname="GtkDirectionType" type="enum"><member cname="GTK_DIR_TAB_FORWARD" name="TabForward"/><member cname="GTK_DIR_TAB_BACKWARD" name="TabBackward"/><member cname="GTK_DIR_UP" name="Up"/><member cname="GTK_DIR_DOWN" name="Down"/><member cname="GTK_DIR_LEFT" name="Left"/><member cname="GTK_DIR_RIGHT" name="Right"/></enum><enum name="ExpanderStyle" cname="GtkExpanderStyle" type="enum"><member cname="GTK_EXPANDER_COLLAPSED" name="Collapsed"/><member cname="GTK_EXPANDER_SEMI_COLLAPSED" name="SemiCollapsed"/><member cname="GTK_EXPANDER_SEMI_EXPANDED" name="SemiExpanded"/><member cname="GTK_EXPANDER_EXPANDED" name="Expanded"/></enum><enum name="IconSize" cname="GtkIconSize" type="enum"><member cname="GTK_ICON_SIZE_INVALID" name="Invalid"/><member cname="GTK_ICON_SIZE_MENU" name="Menu"/><member cname="GTK_ICON_SIZE_SMALL_TOOLBAR" name="SmallToolbar"/><member cname="GTK_ICON_SIZE_LARGE_TOOLBAR" name="LargeToolbar"/><member cname="GTK_ICON_SIZE_BUTTON" name="Button"/><member cname="GTK_ICON_SIZE_DND" name="Dnd"/><member cname="GTK_ICON_SIZE_DIALOG" name="Dialog"/></enum><enum name="ImageType" cname="GtkImageType" type="enum"><member cname="GTK_IMAGE_EMPTY" name="Empty"/><member cname="GTK_IMAGE_PIXMAP" name="Pixmap"/><member cname="GTK_IMAGE_IMAGE" name="Image"/><member cname="GTK_IMAGE_PIXBUF" name="Pixbuf"/><member cname="GTK_IMAGE_STOCK" name="Stock"/><member cname="GTK_IMAGE_ICON_SET" name="IconSet"/><member cname="GTK_IMAGE_ANIMATION" name="Animation"/></enum><enum name="Justification" cname="GtkJustification" type="enum"><member cname="GTK_JUSTIFY_LEFT" name="Left"/><member cname="GTK_JUSTIFY_RIGHT" name="Right"/><member cname="GTK_JUSTIFY_CENTER" name="Center"/><member cname="GTK_JUSTIFY_FILL" name="Fill"/></enum><enum name="MatchType" cname="GtkMatchType" type="enum"><member cname="GTK_MATCH_ALL" name="All"/><member cname="GTK_MATCH_ALL_TAIL" name="AllTail"/><member cname="GTK_MATCH_HEAD" name="Head"/><member cname="GTK_MATCH_TAIL" name="Tail"/><member cname="GTK_MATCH_EXACT" name="Exact"/><member cname="GTK_MATCH_LAST" name="Last"/></enum><enum name="MenuDirectionType" cname="GtkMenuDirectionType" type="enum"><member cname="GTK_MENU_DIR_PARENT" name="Parent"/><member cname="GTK_MENU_DIR_CHILD" name="Child"/><member cname="GTK_MENU_DIR_NEXT" name="Next"/><member cname="GTK_MENU_DIR_PREV" name="Prev"/></enum><enum name="MessageType" cname="GtkMessageType" type="enum"><member cname="GTK_MESSAGE_INFO" name="Info"/><member cname="GTK_MESSAGE_WARNING" name="Warning"/><member cname="GTK_MESSAGE_QUESTION" name="Question"/><member cname="GTK_MESSAGE_ERROR" name="Error"/></enum><enum name="MetricType" cname="GtkMetricType" type="enum"><member cname="GTK_PIXELS" name="Pixels"/><member cname="GTK_INCHES" name="Inches"/><member cname="GTK_CENTIMETERS" name="Centimeters"/></enum><enum name="MovementStep" cname="GtkMovementStep" type="enum"><member cname="GTK_MOVEMENT_LOGICAL_POSITIONS" name="LogicalPositions"/><member cname="GTK_MOVEMENT_VISUAL_POSITIONS" name="VisualPositions"/><member cname="GTK_MOVEMENT_WORDS" name="Words"/><member cname="GTK_MOVEMENT_DISPLAY_LINES" name="DisplayLines"/><member cname="GTK_MOVEMENT_DISPLAY_LINE_ENDS" name="DisplayLineEnds"/><member cname="GTK_MOVEMENT_PARAGRAPHS" name="Paragraphs"/><member cname="GTK_MOVEMENT_PARAGRAPH_ENDS" name="ParagraphEnds"/><member cname="GTK_MOVEMENT_PAGES" name="Pages"/><member cname="GTK_MOVEMENT_BUFFER_ENDS" name="BufferEnds"/></enum><enum name="NotebookTab" cname="GtkNotebookTab" type="enum"><member cname="GTK_NOTEBOOK_TAB_FIRST" name="First"/><member cname="GTK_NOTEBOOK_TAB_LAST" name="Last"/></enum><enum name="ObjectFlags" cname="GtkObjectFlags" type="flags"><member cname="GTK_IN_DESTRUCTION" name="InDestruction" value="1 &lt;&lt; 0"/><member cname="GTK_FLOATING" name="Floating" value="1 &lt;&lt; 1"/><member cname="GTK_RESERVED_1" name="Reserved1" value="1 &lt;&lt; 2"/><member cname="GTK_RESERVED_2" name="Reserved2" value="1 &lt;&lt; 3"/></enum><enum name="Orientation" cname="GtkOrientation" type="enum"><member cname="GTK_ORIENTATION_HORIZONTAL" name="Horizontal"/><member cname="GTK_ORIENTATION_VERTICAL" name="Vertical"/></enum><enum name="PackType" cname="GtkPackType" type="enum"><member cname="GTK_PACK_START" name="Start"/><member cname="GTK_PACK_END" name="End"/></enum><enum name="PathPriorityType" cname="GtkPathPriorityType" type="enum"><member cname="GTK_PATH_PRIO_LOWEST" name="Lowest"/><member cname="GTK_PATH_PRIO_GTK" name="Gtk" value="4"/><member cname="GTK_PATH_PRIO_APPLICATION" name="Application" value="8"/><member cname="GTK_PATH_PRIO_THEME" name="Theme" value="10"/><member cname="GTK_PATH_PRIO_RC" name="Rc" value="12"/><member cname="GTK_PATH_PRIO_HIGHEST" name="Highest" value="15"/></enum><enum name="PathType" cname="GtkPathType" type="enum"><member cname="GTK_PATH_WIDGET" name="Widget"/><member cname="GTK_PATH_WIDGET_CLASS" name="WidgetClass"/><member cname="GTK_PATH_CLASS" name="Class"/></enum><enum name="PolicyType" cname="GtkPolicyType" type="enum"><member cname="GTK_POLICY_ALWAYS" name="Always"/><member cname="GTK_POLICY_AUTOMATIC" name="Automatic"/><member cname="GTK_POLICY_NEVER" name="Never"/></enum><enum name="PositionType" cname="GtkPositionType" type="enum"><member cname="GTK_POS_LEFT" name="Left"/><member cname="GTK_POS_RIGHT" name="Right"/><member cname="GTK_POS_TOP" name="Top"/><member cname="GTK_POS_BOTTOM" name="Bottom"/></enum><enum name="PreviewType" cname="GtkPreviewType" type="enum"><member cname="GTK_PREVIEW_COLOR" name="Color"/><member cname="GTK_PREVIEW_GRAYSCALE" name="Grayscale"/></enum><enum name="ProgressBarOrientation" cname="GtkProgressBarOrientation" type="enum"><member cname="GTK_PROGRESS_LEFT_TO_RIGHT" name="LeftToRight"/><member cname="GTK_PROGRESS_RIGHT_TO_LEFT" name="RightToLeft"/><member cname="GTK_PROGRESS_BOTTOM_TO_TOP" name="BottomToTop"/><member cname="GTK_PROGRESS_TOP_TO_BOTTOM" name="TopToBottom"/></enum><enum name="ProgressBarStyle" cname="GtkProgressBarStyle" type="enum"><member cname="GTK_PROGRESS_CONTINUOUS" name="Continuous"/><member cname="GTK_PROGRESS_DISCRETE" name="Discrete"/></enum><enum name="RBNodeColor" cname="GtkRBNodeColor" type="flags"><member cname="GTK_RBNODE_BLACK" name="Black" value="1 &lt;&lt; 0"/><member cname="GTK_RBNODE_RED" name="Red" value="1 &lt;&lt; 1"/><member cname="GTK_RBNODE_IS_PARENT" name="IsParent" value="1 &lt;&lt; 2"/><member cname="GTK_RBNODE_IS_SELECTED" name="IsSelected" value="1 &lt;&lt; 3"/><member cname="GTK_RBNODE_IS_PRELIT" name="IsPrelit" value="1 &lt;&lt; 4"/><member cname="GTK_RBNODE_IS_SEMI_COLLAPSED" name="IsSemiCollapsed" value="1 &lt;&lt; 5"/><member cname="GTK_RBNODE_IS_SEMI_EXPANDED" name="IsSemiExpanded" value="1 &lt;&lt; 6"/><member cname="GTK_RBNODE_INVALID" name="Invalid" value="1 &lt;&lt; 7"/><member cname="GTK_RBNODE_COLUMN_INVALID" name="ColumnInvalid" value="1 &lt;&lt; 8"/><member cname="GTK_RBNODE_DESCENDANTS_INVALID" name="DescendantsInvalid" value="1 &lt;&lt; 9"/><member cname="GTK_RBNODE_NON_COLORS" name="NonColors"/></enum><enum name="RcFlags" cname="GtkRcFlags" type="flags"><member cname="GTK_RC_FG" name="Fg" value="1 &lt;&lt; 0"/><member cname="GTK_RC_BG" name="Bg" value="1 &lt;&lt; 1"/><member cname="GTK_RC_TEXT" name="Text" value="1 &lt;&lt; 2"/><member cname="GTK_RC_BASE" name="Base" value="1 &lt;&lt; 3"/></enum><enum name="RcTokenType" cname="GtkRcTokenType" type="enum"><member cname="GTK_RC_TOKEN_INVALID" name="Invalid"/><member cname="GTK_RC_TOKEN_INCLUDE" name="Include"/><member cname="GTK_RC_TOKEN_NORMAL" name="Normal"/><member cname="GTK_RC_TOKEN_ACTIVE" name="Active"/><member cname="GTK_RC_TOKEN_PRELIGHT" name="Prelight"/><member cname="GTK_RC_TOKEN_SELECTED" name="Selected"/><member cname="GTK_RC_TOKEN_INSENSITIVE" name="Insensitive"/><member cname="GTK_RC_TOKEN_FG" name="Fg"/><member cname="GTK_RC_TOKEN_BG" name="Bg"/><member cname="GTK_RC_TOKEN_TEXT" name="Text"/><member cname="GTK_RC_TOKEN_BASE" name="Base"/><member cname="GTK_RC_TOKEN_XTHICKNESS" name="Xthickness"/><member cname="GTK_RC_TOKEN_YTHICKNESS" name="Ythickness"/><member cname="GTK_RC_TOKEN_FONT" name="Font"/><member cname="GTK_RC_TOKEN_FONTSET" name="Fontset"/><member cname="GTK_RC_TOKEN_FONT_NAME" name="FontName"/><member cname="GTK_RC_TOKEN_BG_PIXMAP" name="BgPixmap"/><member cname="GTK_RC_TOKEN_PIXMAP_PATH" name="PixmapPath"/><member cname="GTK_RC_TOKEN_STYLE" name="Style"/><member cname="GTK_RC_TOKEN_BINDING" name="Binding"/><member cname="GTK_RC_TOKEN_BIND" name="Bind"/><member cname="GTK_RC_TOKEN_WIDGET" name="Widget"/><member cname="GTK_RC_TOKEN_WIDGET_CLASS" name="WidgetClass"/><member cname="GTK_RC_TOKEN_CLASS" name="Class"/><member cname="GTK_RC_TOKEN_LOWEST" name="Lowest"/><member cname="GTK_RC_TOKEN_GTK" name="Gtk"/><member cname="GTK_RC_TOKEN_APPLICATION" name="Application"/><member cname="GTK_RC_TOKEN_THEME" name="Theme"/><member cname="GTK_RC_TOKEN_RC" name="Rc"/><member cname="GTK_RC_TOKEN_HIGHEST" name="Highest"/><member cname="GTK_RC_TOKEN_ENGINE" name="Engine"/><member cname="GTK_RC_TOKEN_MODULE_PATH" name="ModulePath"/><member cname="GTK_RC_TOKEN_IM_MODULE_PATH" name="ImModulePath"/><member cname="GTK_RC_TOKEN_IM_MODULE_FILE" name="ImModuleFile"/><member cname="GTK_RC_TOKEN_STOCK" name="Stock"/><member cname="GTK_RC_TOKEN_LTR" name="Ltr"/><member cname="GTK_RC_TOKEN_RTL" name="Rtl"/><member cname="GTK_RC_TOKEN_LAST" name="Last"/></enum><enum name="ReliefStyle" cname="GtkReliefStyle" type="enum"><member cname="GTK_RELIEF_NORMAL" name="Normal"/><member cname="GTK_RELIEF_HALF" name="Half"/><member cname="GTK_RELIEF_NONE" name="None"/></enum><enum name="ResizeMode" cname="GtkResizeMode" type="enum"><member cname="GTK_RESIZE_PARENT" name="Parent"/><member cname="GTK_RESIZE_QUEUE" name="Queue"/><member cname="GTK_RESIZE_IMMEDIATE" name="Immediate"/></enum><enum name="ResponseType" cname="GtkResponseType" type="enum"><member cname="GTK_RESPONSE_NONE" name="None"/><member cname="GTK_RESPONSE_REJECT" name="Reject"/><member cname="GTK_RESPONSE_ACCEPT" name="Accept"/><member cname="GTK_RESPONSE_DELETE_EVENT" name="DeleteEvent"/><member cname="GTK_RESPONSE_OK" name="Ok"/><member cname="GTK_RESPONSE_CANCEL" name="Cancel"/><member cname="GTK_RESPONSE_CLOSE" name="Close"/><member cname="GTK_RESPONSE_YES" name="Yes"/><member cname="GTK_RESPONSE_NO" name="No"/><member cname="GTK_RESPONSE_APPLY" name="Apply"/><member cname="GTK_RESPONSE_HELP" name="Help"/></enum><enum name="ScrollType" cname="GtkScrollType" type="enum"><member cname="GTK_SCROLL_NONE" name="None"/><member cname="GTK_SCROLL_JUMP" name="Jump"/><member cname="GTK_SCROLL_STEP_BACKWARD" name="StepBackward"/><member cname="GTK_SCROLL_STEP_FORWARD" name="StepForward"/><member cname="GTK_SCROLL_PAGE_BACKWARD" name="PageBackward"/><member cname="GTK_SCROLL_PAGE_FORWARD" name="PageForward"/><member cname="GTK_SCROLL_STEP_UP" name="StepUp"/><member cname="GTK_SCROLL_STEP_DOWN" name="StepDown"/><member cname="GTK_SCROLL_PAGE_UP" name="PageUp"/><member cname="GTK_SCROLL_PAGE_DOWN" name="PageDown"/><member cname="GTK_SCROLL_STEP_LEFT" name="StepLeft"/><member cname="GTK_SCROLL_STEP_RIGHT" name="StepRight"/><member cname="GTK_SCROLL_PAGE_LEFT" name="PageLeft"/><member cname="GTK_SCROLL_PAGE_RIGHT" name="PageRight"/><member cname="GTK_SCROLL_START" name="Start"/><member cname="GTK_SCROLL_END" name="End"/></enum><enum name="SelectionMode" cname="GtkSelectionMode" type="enum"><member cname="GTK_SELECTION_NONE" name="None"/><member cname="GTK_SELECTION_SINGLE" name="Single"/><member cname="GTK_SELECTION_BROWSE" name="Browse"/><member cname="GTK_SELECTION_MULTIPLE" name="Multiple"/><member cname="GTK_SELECTION_EXTENDED" name="Extended"/></enum><enum name="ShadowType" cname="GtkShadowType" type="enum"><member cname="GTK_SHADOW_NONE" name="None"/><member cname="GTK_SHADOW_IN" name="In"/><member cname="GTK_SHADOW_OUT" name="Out"/><member cname="GTK_SHADOW_ETCHED_IN" name="EtchedIn"/><member cname="GTK_SHADOW_ETCHED_OUT" name="EtchedOut"/></enum><enum name="SideType" cname="GtkSideType" type="enum"><member cname="GTK_SIDE_TOP" name="Top"/><member cname="GTK_SIDE_BOTTOM" name="Bottom"/><member cname="GTK_SIDE_LEFT" name="Left"/><member cname="GTK_SIDE_RIGHT" name="Right"/></enum><enum name="SignalRunType" cname="GtkSignalRunType" type="enum"><member cname="GTK_RUN_FIRST" name="First"/><member cname="GTK_RUN_LAST" name="Last"/><member cname="GTK_RUN_BOTH" name="Both"/><member cname="GTK_RUN_NO_RECURSE" name="NoRecurse"/><member cname="GTK_RUN_ACTION" name="Action"/><member cname="GTK_RUN_NO_HOOKS" name="NoHooks"/></enum><enum name="SizeGroupMode" cname="GtkSizeGroupMode" type="enum"><member cname="GTK_SIZE_GROUP_NONE" name="None"/><member cname="GTK_SIZE_GROUP_HORIZONTAL" name="Horizontal"/><member cname="GTK_SIZE_GROUP_VERTICAL" name="Vertical"/><member cname="GTK_SIZE_GROUP_BOTH" name="Both"/></enum><enum name="SortType" cname="GtkSortType" type="enum"><member cname="GTK_SORT_ASCENDING" name="Ascending"/><member cname="GTK_SORT_DESCENDING" name="Descending"/></enum><enum name="SpinButtonUpdatePolicy" cname="GtkSpinButtonUpdatePolicy" type="enum"><member cname="GTK_UPDATE_ALWAYS" name="Always"/><member cname="GTK_UPDATE_IF_VALID" name="IfValid"/></enum><enum name="SpinType" cname="GtkSpinType" type="enum"><member cname="GTK_SPIN_STEP_FORWARD" name="StepForward"/><member cname="GTK_SPIN_STEP_BACKWARD" name="StepBackward"/><member cname="GTK_SPIN_PAGE_FORWARD" name="PageForward"/><member cname="GTK_SPIN_PAGE_BACKWARD" name="PageBackward"/><member cname="GTK_SPIN_HOME" name="Home"/><member cname="GTK_SPIN_END" name="End"/><member cname="GTK_SPIN_USER_DEFINED" name="UserDefined"/></enum><enum name="StateType" cname="GtkStateType" type="enum"><member cname="GTK_STATE_NORMAL" name="Normal"/><member cname="GTK_STATE_ACTIVE" name="Active"/><member cname="GTK_STATE_PRELIGHT" name="Prelight"/><member cname="GTK_STATE_SELECTED" name="Selected"/><member cname="GTK_STATE_INSENSITIVE" name="Insensitive"/></enum><enum name="SubmenuDirection" cname="GtkSubmenuDirection" type="enum"><member cname="GTK_DIRECTION_LEFT" name="Left"/><member cname="GTK_DIRECTION_RIGHT" name="Right"/></enum><enum name="SubmenuPlacement" cname="GtkSubmenuPlacement" type="enum"><member cname="GTK_TOP_BOTTOM" name="TopBottom"/><member cname="GTK_LEFT_RIGHT" name="LeftRight"/></enum><enum name="TargetFlags" cname="GtkTargetFlags" type="flags"><member cname="GTK_TARGET_SAME_APP" name="App" value="1 &lt;&lt; 0"/><member cname="GTK_TARGET_SAME_WIDGET" name="Widget" value="1 &lt;&lt; 1"/></enum><enum name="TextDirection" cname="GtkTextDirection" type="enum"><member cname="GTK_TEXT_DIR_NONE" name="None"/><member cname="GTK_TEXT_DIR_LTR" name="Ltr"/><member cname="GTK_TEXT_DIR_RTL" name="Rtl"/></enum><enum name="TextSearchFlags" cname="GtkTextSearchFlags" type="enum"><member cname="GTK_TEXT_SEARCH_VISIBLE_ONLY" name="VisibleOnly"/><member cname="GTK_TEXT_SEARCH_TEXT_ONLY" name="TextOnly"/></enum><enum name="TextWindowType" cname="GtkTextWindowType" type="enum"><member cname="GTK_TEXT_WINDOW_PRIVATE" name="Private"/><member cname="GTK_TEXT_WINDOW_WIDGET" name="Widget"/><member cname="GTK_TEXT_WINDOW_TEXT" name="Text"/><member cname="GTK_TEXT_WINDOW_LEFT" name="Left"/><member cname="GTK_TEXT_WINDOW_RIGHT" name="Right"/><member cname="GTK_TEXT_WINDOW_TOP" name="Top"/><member cname="GTK_TEXT_WINDOW_BOTTOM" name="Bottom"/></enum><enum name="ToolbarChildType" cname="GtkToolbarChildType" type="enum"><member cname="GTK_TOOLBAR_CHILD_SPACE" name="Space"/><member cname="GTK_TOOLBAR_CHILD_BUTTON" name="Button"/><member cname="GTK_TOOLBAR_CHILD_TOGGLEBUTTON" name="Togglebutton"/><member cname="GTK_TOOLBAR_CHILD_RADIOBUTTON" name="Radiobutton"/><member cname="GTK_TOOLBAR_CHILD_WIDGET" name="Widget"/></enum><enum name="ToolbarSpaceStyle" cname="GtkToolbarSpaceStyle" type="enum"><member cname="GTK_TOOLBAR_SPACE_EMPTY" name="Empty"/><member cname="GTK_TOOLBAR_SPACE_LINE" name="Line"/></enum><enum name="ToolbarStyle" cname="GtkToolbarStyle" type="enum"><member cname="GTK_TOOLBAR_ICONS" name="Icons"/><member cname="GTK_TOOLBAR_TEXT" name="Text"/><member cname="GTK_TOOLBAR_BOTH" name="Both"/><member cname="GTK_TOOLBAR_BOTH_HORIZ" name="BothHoriz"/></enum><enum name="TreeModelFlags" cname="GtkTreeModelFlags" type="flags"><member cname="GTK_TREE_MODEL_ITERS_PERSIST" name="ItersPersist" value="1 &lt;&lt; 0"/><member cname="GTK_TREE_MODEL_LIST_ONLY" name="ListOnly" value="1 &lt;&lt; 1"/></enum><enum name="TreeViewColumnSizing" cname="GtkTreeViewColumnSizing" type="enum"><member cname="GTK_TREE_VIEW_COLUMN_GROW_ONLY" name="GrowOnly"/><member cname="GTK_TREE_VIEW_COLUMN_AUTOSIZE" name="Autosize"/><member cname="GTK_TREE_VIEW_COLUMN_FIXED" name="Fixed"/></enum><enum name="TreeViewDropPosition" cname="GtkTreeViewDropPosition" type="enum"><member cname="GTK_TREE_VIEW_DROP_BEFORE" name="Before"/><member cname="GTK_TREE_VIEW_DROP_AFTER" name="After"/><member cname="GTK_TREE_VIEW_DROP_INTO_OR_BEFORE" name="IntoOrBefore"/><member cname="GTK_TREE_VIEW_DROP_INTO_OR_AFTER" name="IntoOrAfter"/></enum><enum name="TreeViewMode" cname="GtkTreeViewMode" type="enum"><member cname="GTK_TREE_VIEW_LINE" name="Line"/><member cname="GTK_TREE_VIEW_ITEM" name="Item"/></enum><enum name="UpdateType" cname="GtkUpdateType" type="enum"><member cname="GTK_UPDATE_CONTINUOUS" name="Continuous"/><member cname="GTK_UPDATE_DISCONTINUOUS" name="Discontinuous"/><member cname="GTK_UPDATE_DELAYED" name="Delayed"/></enum><enum name="Visibility" cname="GtkVisibility" type="enum"><member cname="GTK_VISIBILITY_NONE" name="None"/><member cname="GTK_VISIBILITY_PARTIAL" name="Partial"/><member cname="GTK_VISIBILITY_FULL" name="Full"/></enum><enum name="WidgetFlags" cname="GtkWidgetFlags" type="flags"><member cname="GTK_TOPLEVEL" name="Toplevel" value="1 &lt;&lt; 4"/><member cname="GTK_NO_WINDOW" name="NoWindow" value="1 &lt;&lt; 5"/><member cname="GTK_REALIZED" name="Realized" value="1 &lt;&lt; 6"/><member cname="GTK_MAPPED" name="Mapped" value="1 &lt;&lt; 7"/><member cname="GTK_VISIBLE" name="Visible" value="1 &lt;&lt; 8"/><member cname="GTK_SENSITIVE" name="Sensitive" value="1 &lt;&lt; 9"/><member cname="GTK_PARENT_SENSITIVE" name="ParentSensitive" value="1 &lt;&lt; 10"/><member cname="GTK_CAN_FOCUS" name="CanFocus" value="1 &lt;&lt; 11"/><member cname="GTK_HAS_FOCUS" name="HasFocus" value="1 &lt;&lt; 12"/><member cname="GTK_CAN_DEFAULT" name="CanDefault" value="1 &lt;&lt; 13"/><member cname="GTK_HAS_DEFAULT" name="HasDefault" value="1 &lt;&lt; 14"/><member cname="GTK_HAS_GRAB" name="HasGrab" value="1 &lt;&lt; 15"/><member cname="GTK_RC_STYLE" name="RcStyle" value="1 &lt;&lt; 16"/><member cname="GTK_COMPOSITE_CHILD" name="CompositeChild" value="1 &lt;&lt; 17"/><member cname="GTK_NO_REPARENT" name="NoReparent" value="1 &lt;&lt; 18"/><member cname="GTK_APP_PAINTABLE" name="AppPaintable" value="1 &lt;&lt; 19"/><member cname="GTK_RECEIVES_DEFAULT" name="ReceivesDefault" value="1 &lt;&lt; 20"/><member cname="GTK_DOUBLE_BUFFERED" name="DoubleBuffered" value="1 &lt;&lt; 21"/></enum><enum name="WidgetHelpType" cname="GtkWidgetHelpType" type="enum"><member cname="GTK_WIDGET_HELP_TOOLTIP" name="Tooltip"/><member cname="GTK_WIDGET_HELP_WHATS_THIS" name="WhatsThis"/></enum><enum name="WindowPosition" cname="GtkWindowPosition" type="enum"><member cname="GTK_WIN_POS_NONE" name="None"/><member cname="GTK_WIN_POS_CENTER" name="Center"/><member cname="GTK_WIN_POS_MOUSE" name="Mouse"/><member cname="GTK_WIN_POS_CENTER_ALWAYS" name="CenterAlways"/><member cname="GTK_WIN_POS_CENTER_ON_PARENT" name="CenterOnParent"/></enum><enum name="WindowType" cname="GtkWindowType" type="enum"><member cname="GTK_WINDOW_TOPLEVEL" name="Toplevel"/><member cname="GTK_WINDOW_POPUP" name="Popup"/></enum><enum name="WrapMode" cname="GtkWrapMode" type="enum"><member cname="GTK_WRAP_NONE" name="None"/><member cname="GTK_WRAP_CHAR" name="Char"/><member cname="GTK_WRAP_WORD" name="Word"/></enum><callback name="AccelGroupActivate" cname="GtkAccelGroupActivate"><return-type type="gboolean"/><parameters><parameter type="GtkAccelGroup*" name="accel_group"/><parameter type="GObject*" name="acceleratable"/><parameter type="guint" name="keyval"/><parameter type="GdkModifierType" name="modifier"/></parameters></callback><callback name="AccelMapForeach" cname="GtkAccelMapForeach"><return-type type="void"/><parameters><parameter type="gpointer" name="data"/><parameter type="const-gchar*" name="accel_path"/><parameter type="guint" name="accel_key"/><parameter type="guint" name="accel_mods"/><parameter type="gboolean" name="changed"/></parameters></callback><callback name="CListCompareFunc" cname="GtkCListCompareFunc"><return-type type="gint"/><parameters><parameter type="GtkCList*" name="clist"/><parameter type="gconstpointer" name="ptr1"/><parameter type="gconstpointer" name="ptr2"/></parameters></callback><callback name="CTreeCompareDragFunc" cname="GtkCTreeCompareDragFunc"><return-type type="gboolean"/><parameters><parameter type="GtkCTree*" name="ctree"/><parameter type="GtkCTreeNode*" name="source_node"/><parameter type="GtkCTreeNode*" name="new_parent"/><parameter type="GtkCTreeNode*" name="new_sibling"/></parameters></callback><callback name="CTreeFunc" cname="GtkCTreeFunc"><return-type type="void"/><parameters><parameter type="GtkCTree*" name="ctree"/><parameter type="GtkCTreeNode*" name="node"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="CTreeGNodeFunc" cname="GtkCTreeGNodeFunc"><return-type type="gboolean"/><parameters><parameter type="GtkCTree*" name="ctree"/><parameter type="guint" name="depth"/><parameter type="GNode*" name="gnode"/><parameter type="GtkCTreeNode*" name="cnode"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="Callback" cname="GtkCallback"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="CallbackMarshal" cname="GtkCallbackMarshal"><return-type type="void"/><parameters><parameter type="GtkObject*" name="object"/><parameter type="gpointer" name="data"/><parameter type="guint" name="n_args"/><parameter type="GtkArg*" name="args"/></parameters></callback><callback name="ClipboardClearFunc" cname="GtkClipboardClearFunc"><return-type type="void"/><parameters><parameter type="GtkClipboard*" name="clipboard"/><parameter type="gpointer" name="user_data_or_owner"/></parameters></callback><callback name="ClipboardGetFunc" cname="GtkClipboardGetFunc"><return-type type="void"/><parameters><parameter type="GtkClipboard*" name="clipboard"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="gpointer" name="user_data_or_owner"/></parameters></callback><callback name="ClipboardReceivedFunc" cname="GtkClipboardReceivedFunc"><return-type type="void"/><parameters><parameter type="GtkClipboard*" name="clipboard"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="ClipboardTextReceivedFunc" cname="GtkClipboardTextReceivedFunc"><return-type type="void"/><parameters><parameter type="GtkClipboard*" name="clipboard"/><parameter type="const-gchar*" name="text"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="ColorSelectionChangePaletteFunc" cname="GtkColorSelectionChangePaletteFunc"><return-type type="void"/><parameters><parameter type="const-GdkColor*" name="colors"/><parameter type="gint" name="n_colors"/></parameters></callback><callback name="DestroyNotify" cname="GtkDestroyNotify"><return-type type="void"/><parameters><parameter type="gpointer" name="data"/></parameters></callback><callback name="Function" cname="GtkFunction"><return-type type="gboolean"/><parameters><parameter type="gpointer" name="data"/></parameters></callback><callback name="ItemFactoryCallback" cname="GtkItemFactoryCallback"><return-type type="void"/></callback><callback name="ItemFactoryCallback1" cname="GtkItemFactoryCallback1"><return-type type="void"/><parameters><parameter type="gpointer" name="callback_data"/><parameter type="guint" name="callback_action"/><parameter type="GtkWidget*" name="widget"/></parameters></callback><callback name="KeySnoopFunc" cname="GtkKeySnoopFunc"><return-type type="gint"/><parameters><parameter type="GtkWidget*" name="grab_widget"/><parameter type="GdkEventKey*" name="event"/><parameter type="gpointer" name="func_data"/></parameters></callback><callback name="MenuDetachFunc" cname="GtkMenuDetachFunc"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="attach_widget"/><parameter type="GtkMenu*" name="menu"/></parameters></callback><callback name="MenuPositionFunc" cname="GtkMenuPositionFunc"><return-type type="void"/><parameters><parameter type="GtkMenu*" name="menu"/><parameter type="gint*" name="x"/><parameter type="gint*" name="y"/><parameter type="gboolean*" name="push_in"/><parameter type="gpointer" name="user_data"/></parameters></callback><callback name="ModuleInitFunc" cname="GtkModuleInitFunc"><return-type type="void"/><parameters><parameter type="gint*" name="argc"/><parameter type="gchar*" name="**argv"/></parameters></callback><callback name="PrintFunc" cname="GtkPrintFunc"><return-type type="void"/><parameters><parameter type="gpointer" name="func_data"/><parameter type="const-gchar*" name="str"/></parameters></callback><callback name="RBTreeTraverseFunc" cname="GtkRBTreeTraverseFunc"><return-type type="void"/><parameters><parameter type="GtkRBTree*" name="tree"/><parameter type="GtkRBNode*" name="node"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="RcPropertyParser" cname="GtkRcPropertyParser"><return-type type="gboolean"/><parameters><parameter type="const-GParamSpec*" name="pspec"/><parameter type="const-GString*" name="rc_string"/><parameter type="GValue*" name="property_value"/></parameters></callback><callback name="SignalFunc" cname="GtkSignalFunc"><return-type type="void"/></callback><callback name="TextCharPredicate" cname="GtkTextCharPredicate"><return-type type="gboolean"/><parameters><parameter type="gunichar" name="ch"/><parameter type="gpointer" name="user_data"/></parameters></callback><callback name="TextFunction" cname="GtkTextFunction"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="guint32" name="time"/></parameters></callback><callback name="TextSegCheckFunc" cname="GtkTextSegCheckFunc"><return-type type="void"/><parameters><parameter type="GtkTextLineSegment*" name="seg"/><parameter type="GtkTextLine*" name="line"/></parameters></callback><callback name="TextSegCleanupFunc" cname="GtkTextSegCleanupFunc"><return-type type="GtkTextLineSegment*"/><parameters><parameter type="GtkTextLineSegment*" name="seg"/><parameter type="GtkTextLine*" name="line"/></parameters></callback><callback name="TextSegDeleteFunc" cname="GtkTextSegDeleteFunc"><return-type type="gboolean"/><parameters><parameter type="GtkTextLineSegment*" name="seg"/><parameter type="GtkTextLine*" name="line"/><parameter type="gboolean" name="tree_gone"/></parameters></callback><callback name="TextSegLineChangeFunc" cname="GtkTextSegLineChangeFunc"><return-type type="void"/><parameters><parameter type="GtkTextLineSegment*" name="seg"/><parameter type="GtkTextLine*" name="line"/></parameters></callback><callback name="TextSegSplitFunc" cname="GtkTextSegSplitFunc"><return-type type="GtkTextLineSegment*"/><parameters><parameter type="GtkTextLineSegment*" name="seg"/><parameter type="gint" name="index"/></parameters></callback><callback name="TextTagTableForeach" cname="GtkTextTagTableForeach"><return-type type="void"/><parameters><parameter type="GtkTextTag*" name="tag"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="TextUtilCharChosenFunc" cname="GtkTextUtilCharChosenFunc"><return-type type="void"/><parameters><parameter type="const-char*" name="text"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="TranslateFunc" cname="GtkTranslateFunc"><return-type type="gchar*"/><parameters><parameter type="const-gchar*" name="path"/><parameter type="gpointer" name="func_data"/></parameters></callback><callback name="TreeCellDataFunc" cname="GtkTreeCellDataFunc"><return-type type="void"/><parameters><parameter type="GtkTreeViewColumn*" name="tree_column"/><parameter type="GtkCellRenderer*" name="cell"/><parameter type="GtkTreeModel*" name="tree_model"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="TreeDestroyCountFunc" cname="GtkTreeDestroyCountFunc"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkTreePath*" name="path"/><parameter type="gint" name="children"/><parameter type="gpointer" name="user_data"/></parameters></callback><callback name="TreeIterCompareFunc" cname="GtkTreeIterCompareFunc"><return-type type="gint"/><parameters><parameter type="GtkTreeModel*" name="model"/><parameter type="GtkTreeIter*" name="a"/><parameter type="GtkTreeIter*" name="b"/><parameter type="gpointer" name="user_data"/></parameters></callback><callback name="TreeModelForeachFunc" cname="GtkTreeModelForeachFunc"><return-type type="gboolean"/><parameters><parameter type="GtkTreeModel*" name="model"/><parameter type="GtkTreePath*" name="path"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="TreeSelectionForeachFunc" cname="GtkTreeSelectionForeachFunc"><return-type type="void"/><parameters><parameter type="GtkTreeModel*" name="model"/><parameter type="GtkTreePath*" name="path"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="TreeSelectionFunc" cname="GtkTreeSelectionFunc"><return-type type="gboolean"/><parameters><parameter type="GtkTreeSelection*" name="selection"/><parameter type="GtkTreeModel*" name="model"/><parameter type="GtkTreePath*" name="path"/><parameter type="gboolean" name="path_currently_selected"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="TreeViewColumnDropFunc" cname="GtkTreeViewColumnDropFunc"><return-type type="gboolean"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkTreeViewColumn*" name="column"/><parameter type="GtkTreeViewColumn*" name="prev_column"/><parameter type="GtkTreeViewColumn*" name="next_column"/><parameter type="gpointer" name="data"/></parameters></callback><callback name="TreeViewMappingFunc" cname="GtkTreeViewMappingFunc"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkTreePath*" name="path"/><parameter type="gpointer" name="user_data"/></parameters></callback><callback name="TreeViewSearchEqualFunc" cname="GtkTreeViewSearchEqualFunc"><return-type type="gboolean"/><parameters><parameter type="GtkTreeModel*" name="model"/><parameter type="gint" name="column"/><parameter type="const-gchar*" name="key"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="gpointer" name="search_data"/></parameters></callback><interface name="CellEditable" cname="GtkCellEditable"><method name="start_editing" cname="gtk_cell_editable_start_editing"><return-type type="void"/></method><method name="remove_widget" cname="gtk_cell_editable_remove_widget"><return-type type="void"/></method><method name="editing_done" cname="gtk_cell_editable_editing_done"><return-type type="void"/></method></interface><interface name="Editable" cname="GtkEditable"><method name="delete_selection" cname="gtk_editable_delete_selection"><return-type type="void"/></method><method name="set_editable" cname="gtk_editable_set_editable"><return-type type="void"/></method><method name="delete_text" cname="gtk_editable_delete_text"><return-type type="void"/></method><method name="insert_text" cname="gtk_editable_insert_text"><return-type type="void"/></method><method name="copy_clipboard" cname="gtk_editable_copy_clipboard"><return-type type="void"/></method><method name="paste_clipboard" cname="gtk_editable_paste_clipboard"><return-type type="void"/></method><method name="set_position" cname="gtk_editable_set_position"><return-type type="void"/></method><method name="get_editable" cname="gtk_editable_get_editable"><return-type type="gboolean"/></method><method name="get_chars" cname="gtk_editable_get_chars"><return-type type="gchar*"/></method><method name="cut_clipboard" cname="gtk_editable_cut_clipboard"><return-type type="void"/></method><method name="get_selection_bounds" cname="gtk_editable_get_selection_bounds"><return-type type="gboolean"/></method><method name="get_position" cname="gtk_editable_get_position"><return-type type="gint"/></method><method name="select_region" cname="gtk_editable_select_region"><return-type type="void"/></method></interface><interface name="TreeDragDest" cname="GtkTreeDragDest"><method name="row_drop_possible" cname="gtk_tree_drag_dest_row_drop_possible"><return-type type="gboolean"/></method><method name="drag_data_received" cname="gtk_tree_drag_dest_drag_data_received"><return-type type="gboolean"/></method></interface><interface name="TreeDragSource" cname="GtkTreeDragSource"><method name="row_draggable" cname="gtk_tree_drag_source_row_draggable"><return-type type="gboolean"/></method><method name="drag_data_delete" cname="gtk_tree_drag_source_drag_data_delete"><return-type type="gboolean"/></method><method name="drag_data_get" cname="gtk_tree_drag_source_drag_data_get"><return-type type="gboolean"/></method></interface><interface name="TreeModel" cname="GtkTreeModel"><method name="get_n_columns" cname="gtk_tree_model_get_n_columns"><return-type type="gint"/></method><method name="row_has_child_toggled" cname="gtk_tree_model_row_has_child_toggled"><return-type type="void"/></method><method name="iter_parent" cname="gtk_tree_model_iter_parent"><return-type type="gboolean"/></method><method name="get_iter" cname="gtk_tree_model_get_iter"><return-type type="gboolean"/></method><method name="get_column_type" cname="gtk_tree_model_get_column_type"><return-type type="GType"/></method><method name="get_flags" cname="gtk_tree_model_get_flags"><return-type type="GtkTreeModelFlags"/></method><method name="iter_nth_child" cname="gtk_tree_model_iter_nth_child"><return-type type="gboolean"/></method><method name="ref_node" cname="gtk_tree_model_ref_node"><return-type type="void"/></method><method name="row_inserted" cname="gtk_tree_model_row_inserted"><return-type type="void"/></method><method name="get_valist" cname="gtk_tree_model_get_valist"><return-type type="void"/></method><method name="get_iter_root" cname="gtk_tree_model_get_iter_root"><return-type type="gboolean"/></method><method name="foreach" cname="gtk_tree_model_foreach"><return-type type="void"/></method><method name="iter_next" cname="gtk_tree_model_iter_next"><return-type type="gboolean"/></method><method name="iter_has_child" cname="gtk_tree_model_iter_has_child"><return-type type="gboolean"/></method><method name="get_path" cname="gtk_tree_model_get_path"><return-type type="GtkTreePath*"/></method><method name="rows_reordered" cname="gtk_tree_model_rows_reordered"><return-type type="void"/></method><method name="get" cname="gtk_tree_model_get"><return-type type="void"/></method><method name="get_iter_from_string" cname="gtk_tree_model_get_iter_from_string"><return-type type="gboolean"/></method><method name="row_changed" cname="gtk_tree_model_row_changed"><return-type type="void"/></method><method name="unref_node" cname="gtk_tree_model_unref_node"><return-type type="void"/></method><method name="sort_new_with_model" cname="gtk_tree_model_sort_new_with_model"><return-type type="GtkTreeModel*"/></method><method name="row_deleted" cname="gtk_tree_model_row_deleted"><return-type type="void"/></method><method name="iter_children" cname="gtk_tree_model_iter_children"><return-type type="gboolean"/></method><method name="iter_n_children" cname="gtk_tree_model_iter_n_children"><return-type type="gint"/></method><method name="get_value" cname="gtk_tree_model_get_value"><return-type type="void"/></method></interface><interface name="TreeSortable" cname="GtkTreeSortable"><method name="set_default_sort_func" cname="gtk_tree_sortable_set_default_sort_func"><return-type type="void"/></method><method name="set_sort_column_id" cname="gtk_tree_sortable_set_sort_column_id"><return-type type="void"/></method><method name="set_sort_func" cname="gtk_tree_sortable_set_sort_func"><return-type type="void"/></method><method name="get_sort_column_id" cname="gtk_tree_sortable_get_sort_column_id"><return-type type="gboolean"/></method><method name="has_default_sort_func" cname="gtk_tree_sortable_has_default_sort_func"><return-type type="gboolean"/></method><method name="sort_column_changed" cname="gtk_tree_sortable_sort_column_changed"><return-type type="void"/></method></interface><object name="AccelGroup" cname="GtkAccelGroup" parent="GObject"><field cname="lock_count" type="guint"/><field cname="modifier_mask" type="GdkModifierType"/><field cname="acceleratables" type="GSList*"/><field cname="n_accels" type="guint"/><field cname="priv_accels" type="GtkAccelGroupEntry*"/><signal name="accel_activate"><return-type type="GBoolean"/><parameters><parameter name="p0" type="GObject"/></parameters></signal><signal name="accel_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkAccelGroup*" name="accel_group"/><parameter type="guint" name="keyval"/><parameter type="GdkModifierType" name="modifier"/><parameter type="GClosure*" name="accel_closure"/></parameters></signal><method name="connect" cname="gtk_accel_group_connect"><return-type type="void"/></method><method name="find" cname="gtk_accel_group_find"><return-type type="GtkAccelKey*"/></method><method name="reconnect" cname="_gtk_accel_group_reconnect"><return-type type="void"/></method><method name="disconnect_key" cname="gtk_accel_group_disconnect_key"><return-type type="gboolean"/></method><method name="connect_by_path" cname="gtk_accel_group_connect_by_path"><return-type type="void"/></method><method name="detach" cname="_gtk_accel_group_detach"><return-type type="void"/></method><constructor cname="gtk_accel_group_new"/><method name="unlock" cname="gtk_accel_group_unlock"><return-type type="void"/></method><method name="disconnect" cname="gtk_accel_group_disconnect"><return-type type="gboolean"/></method><method name="lock" cname="gtk_accel_group_lock"><return-type type="void"/></method><method name="attach" cname="_gtk_accel_group_attach"><return-type type="void"/></method><method name="query" cname="gtk_accel_group_query"><return-type type="GtkAccelGroupEntry*"/></method></object><object name="AccelLabel" cname="GtkAccelLabel" parent="GtkLabel"><field cname="queue_id" type="guint"/><field cname="accel_padding" type="guint"/><field cname="accel_widget" type="GtkWidget*"/><field cname="accel_closure" type="GClosure*"/><field cname="accel_group" type="GtkAccelGroup*"/><field cname="accel_string" type="gchar*"/><field cname="accel_string_width" type="guint16"/><property name="AccelClosure" cname="accel_closure" type="GClosure" doc-string=" _(The closure to be monitored for accelerator changes)" readable="true" writeable="true"/><property name="AccelWidget" cname="accel_widget" type="GtkWidget" doc-string=" _(The widget to be monitored for accelerator changes)" readable="true" writeable="true"/><method name="set_accel_widget" cname="gtk_accel_label_set_accel_widget"><return-type type="void"/></method><method name="get_accel_width" cname="gtk_accel_label_get_accel_width"><return-type type="guint"/></method><method name="refetch" cname="gtk_accel_label_refetch"><return-type type="gboolean"/></method><constructor cname="gtk_accel_label_new"/><method name="set_accel_closure" cname="gtk_accel_label_set_accel_closure"><return-type type="void"/></method><method name="get_accel_widget" cname="gtk_accel_label_get_accel_widget"><return-type type="GtkWidget*"/></method></object><object name="Accessible" cname="GtkAccessible" parent="AtkObject"><field cname="widget" type="GtkWidget*"/><method name="connect_widget_destroyed" cname="gtk_accessible_connect_widget_destroyed"><return-type type="void"/></method></object><object name="Adjustment" cname="GtkAdjustment" parent="GtkObject"><field cname="lower" type="gdouble"/><field cname="upper" type="gdouble"/><field cname="value" type="gdouble"/><field cname="step_increment" type="gdouble"/><field cname="page_increment" type="gdouble"/><field cname="page_size" type="gdouble"/><signal name="changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkAdjustment*" name="adjustment);void"/></parameters></signal><signal name="value_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkAdjustment*" name="adjustment"/></parameters></signal><method name="set_value" cname="gtk_adjustment_set_value"><return-type type="void"/></method><method name="get_value" cname="gtk_adjustment_get_value"><return-type type="gdouble"/></method><method name="clamp_page" cname="gtk_adjustment_clamp_page"><return-type type="void"/></method><method name="changed" cname="gtk_adjustment_changed"><return-type type="void"/></method><method name="value_changed" cname="gtk_adjustment_value_changed"><return-type type="void"/></method><constructor cname="gtk_adjustment_new"/></object><object name="Alignment" cname="GtkAlignment" parent="GtkBin"><field cname="xalign" type="gfloat"/><field cname="yalign" type="gfloat"/><field cname="xscale" type="gfloat"/><field cname="yscale" type="gfloat"/><property name="Xalign" cname="xalign" type="gfloat" doc-string=" _(Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned)" readable="true" writeable="true"/><property name="Yalign" cname="yalign" type="gfloat" doc-string=" _(Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned)" readable="true" writeable="true"/><property name="Xscale" cname="xscale" type="gfloat" doc-string=" _(If available horizontal space is bigger than needed for the child, how much of it to use for the child. 0.0 means none, 1.0 means all)" readable="true" writeable="true"/><property name="Yscale" cname="yscale" type="gfloat" doc-string=" _(If available vertical space is bigger than needed for the child, how much of it to use for the child. 0.0 means none, 1.0 means all)" readable="true" writeable="true"/><method name="set" cname="gtk_alignment_set"><return-type type="void"/></method><constructor cname="gtk_alignment_new"/></object><object name="Arrow" cname="GtkArrow" parent="GtkMisc"><field cname="arrow_type" type="gint16"/><field cname="shadow_type" type="gint16"/><property name="ArrowType" cname="arrow_type" type="GtkArrowType" doc-string=" _(The direction the arrow should point)" readable="true" writeable="true"/><property name="ShadowType" cname="shadow_type" type="GtkShadowType" doc-string=" _(Appearance of the shadow surrounding the arrow)" readable="true" writeable="true"/><method name="set" cname="gtk_arrow_set"><return-type type="void"/></method><constructor cname="gtk_arrow_new"/></object><object name="AspectFrame" cname="GtkAspectFrame" parent="GtkFrame"><field cname="xalign" type="gfloat"/><field cname="yalign" type="gfloat"/><field cname="ratio" type="gfloat"/><field cname="obey_child" type="gboolean"/><field cname="center_allocation" type="GtkAllocation"/><property name="Xalign" cname="xalign" type="gfloat" doc-string=" _(X alignment of the child)" readable="true" writeable="true"/><property name="Yalign" cname="yalign" type="gfloat" doc-string=" _(Y alignment of the child)" readable="true" writeable="true"/><property name="Ratio" cname="ratio" type="gfloat" doc-string=" _(Aspect ratio if obey_child is FALSE)" readable="true" writeable="true"/><property name="ObeyChild" cname="obey_child" type="gboolean" doc-string=" _(Force aspect ratio to match that of the frame's child)" readable="true" writeable="true"/><method name="set" cname="gtk_aspect_frame_set"><return-type type="void"/></method><constructor cname="gtk_aspect_frame_new"/></object><object name="Bin" cname="GtkBin" parent="GtkContainer"><field cname="child" type="GtkWidget*"/><method name="get_child" cname="gtk_bin_get_child"><return-type type="GtkWidget*"/></method></object><object name="Box" cname="GtkBox" parent="GtkContainer"><field cname="children" type="GList*"/><field cname="spacing" type="gint16"/><field cname="homogeneous" bits="1" type="guint"/><property name="Spacing" cname="spacing" type="gint" doc-string=" _(The amount of space between children.)" readable="true" writeable="true"/><property name="Homogeneous" cname="homogeneous" type="gboolean" doc-string=" _(Whether the children should all be the same size.)" readable="true" writeable="true"/><method name="get_spacing" cname="gtk_box_get_spacing"><return-type type="gint"/></method><method name="pack_end" cname="gtk_box_pack_end"><return-type type="void"/></method><method name="pack_start" cname="gtk_box_pack_start"><return-type type="void"/></method><method name="query_child_packing" cname="gtk_box_query_child_packing"><return-type type="void"/></method><method name="pack_end_defaults" cname="gtk_box_pack_end_defaults"><return-type type="void"/></method><method name="set_spacing" cname="gtk_box_set_spacing"><return-type type="void"/></method><method name="set_child_packing" cname="gtk_box_set_child_packing"><return-type type="void"/></method><method name="pack_start_defaults" cname="gtk_box_pack_start_defaults"><return-type type="void"/></method><method name="reorder_child" cname="gtk_box_reorder_child"><return-type type="void"/></method><method name="set_homogeneous" cname="gtk_box_set_homogeneous"><return-type type="void"/></method><method name="get_homogeneous" cname="gtk_box_get_homogeneous"><return-type type="gboolean"/></method></object><object name="Button" cname="GtkButton" parent="GtkBin"><field cname="event_window" type="GdkWindow*"/><field cname="label_text" type="gchar*"/><field cname="activate_timeout" type="guint"/><field cname="constructed" bits="1" type="guint"/><field cname="in_button" bits="1" type="guint"/><field cname="button_down" bits="1" type="guint"/><field cname="relief" bits="2" type="guint"/><field cname="use_underline" bits="1" type="guint"/><field cname="use_stock" bits="1" type="guint"/><field cname="depressed" bits="1" type="guint"/><property name="Label" cname="label" type="gchar*" doc-string=" _(Text of the label widget inside the button, if the button contains a label widget.)" readable="true" writeable="true" construct-only="true"/><property name="UseUnderline" cname="use_underline" type="gboolean" doc-string=" _(If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key)" readable="true" writeable="true" construct-only="true"/><property name="UseStock" cname="use_stock" type="gboolean" doc-string=" _(If set, the label is used to pick a stock item instead of being displayed)" readable="true" writeable="true" construct-only="true"/><property name="Relief" cname="relief" type="GtkReliefStyle" doc-string=" _(The border relief style.)" readable="true" writeable="true"/><signal name="pressed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkButton*" name="button);void"/></parameters></signal><signal name="released" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkButton*" name="button);void"/></parameters></signal><signal name="clicked" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkButton*" name="button);void"/></parameters></signal><signal name="enter" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkButton*" name="button);void"/></parameters></signal><signal name="leave" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkButton*" name="button);void"/></parameters></signal><signal name="activate" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkButton*" name="button"/></parameters></signal><method name="set_use_underline" cname="gtk_button_set_use_underline"><return-type type="void"/></method><method name="set_label" cname="gtk_button_set_label"><return-type type="void"/></method><method name="set_depressed" cname="_gtk_button_set_depressed"><return-type type="void"/></method><constructor cname="gtk_button_new"/><method name="get_use_stock" cname="gtk_button_get_use_stock"><return-type type="gboolean"/></method><constructor cname="gtk_button_new_with_mnemonic"/><method name="get_label" cname="gtk_button_get_label"><return-type type="const-gchar*"/></method><method name="get_use_underline" cname="gtk_button_get_use_underline"><return-type type="gboolean"/></method><method name="set_relief" cname="gtk_button_set_relief"><return-type type="void"/></method><method name="released" cname="gtk_button_released"><return-type type="void"/></method><method name="enter" cname="gtk_button_enter"><return-type type="void"/></method><method name="clicked" cname="gtk_button_clicked"><return-type type="void"/></method><constructor cname="gtk_button_new_with_label"/><constructor cname="gtk_button_new_from_stock"/><method name="leave" cname="gtk_button_leave"><return-type type="void"/></method><method name="paint" cname="_gtk_button_paint"><return-type type="void"/></method><method name="get_relief" cname="gtk_button_get_relief"><return-type type="GtkReliefStyle"/></method><method name="set_use_stock" cname="gtk_button_set_use_stock"><return-type type="void"/></method><method name="pressed" cname="gtk_button_pressed"><return-type type="void"/></method></object><object name="ButtonBox" cname="GtkButtonBox" parent="GtkBox"><field cname="child_min_width" type="gint"/><field cname="child_min_height" type="gint"/><field cname="child_ipad_x" type="gint"/><field cname="child_ipad_y" type="gint"/><field cname="layout_style" type="GtkButtonBoxStyle"/><property name="LayoutStyle" cname="layout_style" type="GtkButtonBoxStyle" doc-string=" _(How to layout the buttons in the box. Possible values are default, spread, edge, start and end)" readable="true" writeable="true"/><method name="set_layout" cname="gtk_button_box_set_layout"><return-type type="void"/></method><method name="set_child_secondary" cname="gtk_button_box_set_child_secondary"><return-type type="void"/></method><method name="get_layout" cname="gtk_button_box_get_layout"><return-type type="GtkButtonBoxStyle"/></method></object><object name="Calendar" cname="GtkCalendar" parent="GtkWidget"><field cname="header_style" type="GtkStyle*"/><field cname="label_style" type="GtkStyle*"/><field cname="month" type="gint"/><field cname="year" type="gint"/><field cname="selected_day" type="gint"/><field cname="day_month" array_len="6][7" type="gint"/><field cname="day" array_len="6][7" type="gint"/><field cname="num_marked_dates" type="gint"/><field cname="marked_date" array_len="31" type="gint"/><field cname="display_flags" type="GtkCalendarDisplayOptions"/><field cname="marked_date_color" array_len="31" type="GdkColor"/><field cname="gc" type="GdkGC*"/><field cname="xor_gc" type="GdkGC*"/><field cname="focus_row" type="gint"/><field cname="focus_col" type="gint"/><field cname="highlight_row" type="gint"/><field cname="highlight_col" type="gint"/><field cname="private_data" type="gpointer"/><field cname="grow_space" array_len="32" type="gchar"/><signal name="month_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCalendar*" name="calendar);void"/></parameters></signal><signal name="day_selected" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCalendar*" name="calendar);void"/></parameters></signal><signal name="day_selected_double_click" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCalendar*" name="calendar);void"/></parameters></signal><signal name="prev_month" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCalendar*" name="calendar);void"/></parameters></signal><signal name="next_month" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCalendar*" name="calendar);void"/></parameters></signal><signal name="prev_year" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCalendar*" name="calendar);void"/></parameters></signal><signal name="next_year" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCalendar*" name="calendar"/></parameters></signal><method name="freeze" cname="gtk_calendar_freeze"><return-type type="void"/></method><constructor cname="gtk_calendar_new"/><method name="get_date" cname="gtk_calendar_get_date"><return-type type="void"/></method><method name="select_month" cname="gtk_calendar_select_month"><return-type type="gboolean"/></method><method name="display_options" cname="gtk_calendar_display_options"><return-type type="void"/></method><method name="thaw" cname="gtk_calendar_thaw"><return-type type="void"/></method><method name="unmark_day" cname="gtk_calendar_unmark_day"><return-type type="gboolean"/></method><method name="mark_day" cname="gtk_calendar_mark_day"><return-type type="gboolean"/></method><method name="select_day" cname="gtk_calendar_select_day"><return-type type="void"/></method><method name="clear_marks" cname="gtk_calendar_clear_marks"><return-type type="void"/></method></object><object name="CellRenderer" cname="GtkCellRenderer" parent="GtkObject"><field cname="xalign" type="gfloat"/><field cname="yalign" type="gfloat"/><field cname="width" type="gint"/><field cname="height" type="gint"/><field cname="xpad" type="guint16"/><field cname="ypad" type="guint16"/><field cname="mode" bits="2" type="guint"/><field cname="visible" bits="1" type="guint"/><field cname="is_expander" bits="1" type="guint"/><field cname="is_expanded" bits="1" type="guint"/><property name="Mode" cname="mode" type="GtkCellRendererMode" doc-string=" _(Editable mode of the CellRenderer)" readable="true" writeable="true"/><property name="Visible" cname="visible" type="gboolean" doc-string=" _(Display the cell)" readable="true" writeable="true"/><property name="Xalign" cname="xalign" type="gfloat" doc-string=" _(The x-align.)" readable="true" writeable="true"/><property name="Yalign" cname="yalign" type="gfloat" doc-string=" _(The y-align.)" readable="true" writeable="true"/><property name="Xpad" cname="xpad" type="guint" doc-string=" _(The xpad.)" readable="true" writeable="true"/><property name="Ypad" cname="ypad" type="guint" doc-string=" _(The ypad.)" readable="true" writeable="true"/><property name="Width" cname="width" type="gint" doc-string=" _(The fixed width.)" readable="true" writeable="true"/><property name="Height" cname="height" type="gint" doc-string=" _(The fixed height.)" readable="true" writeable="true"/><property name="IsExpander" cname="is_expander" type="gboolean" doc-string=" _(Row has children.)" readable="true" writeable="true"/><property name="IsExpanded" cname="is_expanded" type="gboolean" doc-string=" _(Row is an expander row, and is expanded)" readable="true" writeable="true"/><method name="start_editing" cname="gtk_cell_renderer_start_editing"><return-type type="GtkCellEditable*"/></method><method name="activate" cname="gtk_cell_renderer_activate"><return-type type="gboolean"/></method><method name="get_fixed_size" cname="gtk_cell_renderer_get_fixed_size"><return-type type="void"/></method><method name="render" cname="gtk_cell_renderer_render"><return-type type="void"/></method><method name="set_fixed_size" cname="gtk_cell_renderer_set_fixed_size"><return-type type="void"/></method><method name="get_size" cname="gtk_cell_renderer_get_size"><return-type type="void"/></method></object><object name="CellRendererPixbuf" cname="GtkCellRendererPixbuf" parent="GtkCellRenderer"><field cname="pixbuf" type="GdkPixbuf*"/><field cname="pixbuf_expander_open" type="GdkPixbuf*"/><field cname="pixbuf_expander_closed" type="GdkPixbuf*"/><property name="Pixbuf" cname="pixbuf" type="GdkPixbuf" doc-string=" _(The pixbuf to render.)" readable="true" writeable="true"/><property name="PixbufExpanderOpen" cname="pixbuf_expander_open" type="GdkPixbuf" doc-string=" _(Pixbuf for open expander.)" readable="true" writeable="true"/><property name="PixbufExpanderClosed" cname="pixbuf_expander_closed" type="GdkPixbuf" doc-string=" _(Pixbuf for closed expander.)" readable="true" writeable="true"/><constructor cname="gtk_cell_renderer_pixbuf_new"/></object><object name="CellRendererText" cname="GtkCellRendererText" parent="GtkCellRenderer"><field cname="text" type="gchar*"/><field cname="font" type="PangoFontDescription*"/><field cname="font_scale" type="gdouble"/><field cname="foreground" type="PangoColor"/><field cname="background" type="PangoColor"/><field cname="extra_attrs" type="PangoAttrList*"/><field cname="underline_style" type="PangoUnderline"/><field cname="rise" type="gint"/><field cname="fixed_height_rows" type="gint"/><field cname="strikethrough" bits="1" type="guint"/><field cname="editable" bits="1" type="guint"/><field cname="scale_set" bits="1" type="guint"/><field cname="foreground_set" bits="1" type="guint"/><field cname="background_set" bits="1" type="guint"/><field cname="underline_set" bits="1" type="guint"/><field cname="rise_set" bits="1" type="guint"/><field cname="strikethrough_set" bits="1" type="guint"/><field cname="editable_set" bits="1" type="guint"/><field cname="calc_fixed_height" bits="1" type="guint"/><property name="Text" cname="text" type="gchar*" doc-string=" _(Text to render)" readable="true" writeable="true"/><property name="Markup" cname="markup" type="gchar*" doc-string=" _(Marked up text to render)" writeable="true"/><property name="Attributes" cname="attributes" type="PangoAttrList" doc-string=" _(A list of style attributes to apply to the text of the renderer.)" readable="true" writeable="true"/><property name="Background" cname="background" type="gchar*" doc-string=" _(Background color as a string)" writeable="true"/><property name="BackgroundGdk" cname="background_gdk" type="GdkColor" doc-string=" _(Background color as a GdkColor)" readable="true" writeable="true"/><property name="Foreground" cname="foreground" type="gchar*" doc-string=" _(Foreground color as a string)" writeable="true"/><property name="ForegroundGdk" cname="foreground_gdk" type="GdkColor" doc-string=" _(Foreground color as a GdkColor)" readable="true" writeable="true"/><property name="Editable" cname="editable" type="gboolean" doc-string=" _(Whether the text can be modified by the user)" readable="true" writeable="true"/><property name="Font" cname="font" type="gchar*" doc-string=" _(Font description as a string)" readable="true" writeable="true"/><property name="FontDesc" cname="font_desc" type="PangoFontDescription" doc-string=" _(Font description as a PangoFontDescription struct)" readable="true" writeable="true"/><property name="Family" cname="family" type="gchar*" doc-string=" _(Name of the font family, e.g. Sans, Helvetica, Times, Monospace)" readable="true" writeable="true"/><property name="Style" cname="style" type="PangoStyle" doc-string=" _(Font style)" readable="true" writeable="true"/><property name="Variant" cname="variant" type="PangoVariant" doc-string=" _(Font variant)" readable="true" writeable="true"/><property name="Weight" cname="weight" type="gint" doc-string=" _(Font weight)" readable="true" writeable="true"/><property name="Stretch" cname="stretch" type="PangoStretch" doc-string=" _(Font stretch)" readable="true" writeable="true"/><property name="Size" cname="size" type="gint" doc-string=" _(Font size)" readable="true" writeable="true"/><property name="SizePoints" cname="size_points" type="gdouble" doc-string=" _(Font size in points)" readable="true" writeable="true"/><property name="Scale" cname="scale" type="gdouble" doc-string=" _(Font scaling factor)" readable="true" writeable="true"/><property name="Rise" cname="rise" type="gint" doc-string=" _(Offset of text above the baseline (below the baseline if rise is negative))" readable="true" writeable="true"/><property name="Strikethrough" cname="strikethrough" type="gboolean" doc-string=" _(Whether to strike through the text)" readable="true" writeable="true"/><property name="Underline" cname="underline" type="PangoUnderline" doc-string=" _(Style of underline for this text)" readable="true" writeable="true"/><signal name="edited" when="LAST"><return-type type="void"/><parameters><parameter type="GtkCellRendererText*" name="cell_renderer_text"/><parameter type="const-gchar*" name="path"/><parameter type="const-gchar*" name="new_text"/></parameters></signal><method name="set_fixed_height_from_font" cname="gtk_cell_renderer_text_set_fixed_height_from_font"><return-type type="void"/></method><constructor cname="gtk_cell_renderer_text_new"/></object><object name="CellRendererToggle" cname="GtkCellRendererToggle" parent="GtkCellRenderer"><field cname="active" bits="1" type="guint"/><field cname="activatable" bits="1" type="guint"/><field cname="radio" bits="1" type="guint"/><property name="Active" cname="active" type="gboolean" doc-string=" _(The toggle state of the button)" readable="true" writeable="true"/><property name="Activatable" cname="activatable" type="gboolean" doc-string=" _(The toggle button can be activated)" readable="true" writeable="true"/><property name="Radio" cname="radio" type="gboolean" doc-string=" _(Draw the toggle button as a radio button)" readable="true" writeable="true"/><signal name="toggled" when="LAST"><return-type type="void"/><parameters><parameter type="GtkCellRendererToggle*" name="cell_renderer_toggle"/><parameter type="const-gchar*" name="path"/></parameters></signal><method name="set_active" cname="gtk_cell_renderer_toggle_set_active"><return-type type="void"/></method><method name="get_radio" cname="gtk_cell_renderer_toggle_get_radio"><return-type type="gboolean"/></method><constructor cname="gtk_cell_renderer_toggle_new"/><method name="get_active" cname="gtk_cell_renderer_toggle_get_active"><return-type type="gboolean"/></method><method name="set_radio" cname="gtk_cell_renderer_toggle_set_radio"><return-type type="void"/></method></object><object name="CheckButton" cname="GtkCheckButton" parent="GtkToggleButton"><constructor cname="gtk_check_button_new_with_label"/><constructor cname="gtk_check_button_new"/><constructor cname="gtk_check_button_new_with_mnemonic"/><method name="get_props" cname="_gtk_check_button_get_props"><return-type type="void"/></method></object><object name="CheckMenuItem" cname="GtkCheckMenuItem" parent="GtkMenuItem"><field cname="active" bits="1" type="guint"/><field cname="always_show_toggle" bits="1" type="guint"/><field cname="inconsistent" bits="1" type="guint"/><property name="Active" cname="active" type="gboolean" doc-string=" _(Whether the menu item is checked.)" readable="true" writeable="true"/><property name="Inconsistent" cname="inconsistent" type="gboolean" doc-string=" _(Whether to display an \inconsistent\ state.)" readable="true" writeable="true"/><signal name="toggled" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCheckMenuItem*" name="check_menu_item);void"/><parameter type="GdkRectangle*" name="area"/></parameters></signal><method name="toggled" cname="gtk_check_menu_item_toggled"><return-type type="void"/></method><constructor cname="gtk_check_menu_item_new"/><method name="set_inconsistent" cname="gtk_check_menu_item_set_inconsistent"><return-type type="void"/></method><method name="set_active" cname="gtk_check_menu_item_set_active"><return-type type="void"/></method><constructor cname="gtk_check_menu_item_new_with_label"/><constructor cname="gtk_check_menu_item_new_with_mnemonic"/><method name="get_inconsistent" cname="gtk_check_menu_item_get_inconsistent"><return-type type="gboolean"/></method><method name="get_active" cname="gtk_check_menu_item_get_active"><return-type type="gboolean"/></method></object><object name="CList" cname="GtkCList" parent="GtkContainer"><field cname="flags" type="guint16"/><field cname="row_mem_chunk" type="GMemChunk*"/><field cname="cell_mem_chunk" type="GMemChunk*"/><field cname="freeze_count" type="guint"/><field cname="internal_allocation" type="GdkRectangle"/><field cname="rows" type="gint"/><field cname="row_height" type="gint"/><field cname="row_list" type="GList*"/><field cname="row_list_end" type="GList*"/><field cname="columns" type="gint"/><field cname="column_title_area" type="GdkRectangle"/><field cname="title_window" type="GdkWindow*"/><field cname="column" type="GtkCListColumn*"/><field cname="clist_window" type="GdkWindow*"/><field cname="clist_window_width" type="gint"/><field cname="clist_window_height" type="gint"/><field cname="hoffset" type="gint"/><field cname="voffset" type="gint"/><field cname="shadow_type" type="GtkShadowType"/><field cname="selection_mode" type="GtkSelectionMode"/><field cname="selection" type="GList*"/><field cname="selection_end" type="GList*"/><field cname="undo_selection" type="GList*"/><field cname="undo_unselection" type="GList*"/><field cname="undo_anchor" type="gint"/><field cname="button_actions" array_len="5" type="guint8"/><field cname="drag_button" type="guint8"/><field cname="click_cell" type="GtkCListCellInfo"/><field cname="hadjustment" type="GtkAdjustment*"/><field cname="vadjustment" type="GtkAdjustment*"/><field cname="xor_gc" type="GdkGC*"/><field cname="fg_gc" type="GdkGC*"/><field cname="bg_gc" type="GdkGC*"/><field cname="cursor_drag" type="GdkCursor*"/><field cname="x_drag" type="gint"/><field cname="focus_row" type="gint"/><field cname="focus_header_column" type="gint"/><field cname="anchor" type="gint"/><field cname="anchor_state" type="GtkStateType"/><field cname="drag_pos" type="gint"/><field cname="htimer" type="gint"/><field cname="vtimer" type="gint"/><field cname="sort_type" type="GtkSortType"/><field cname="compare" type="GtkCListCompareFunc"/><field cname="sort_column" type="gint"/><field cname="drag_highlight_row" type="gint"/><field cname="drag_highlight_pos" type="GtkCListDragPos"/><method name="get_pixmap" cname="gtk_clist_get_pixmap"><return-type type="gint"/></method><method name="set_column_auto_resize" cname="gtk_clist_set_column_auto_resize"><return-type type="void"/></method><method name="get_selection_info" cname="gtk_clist_get_selection_info"><return-type type="gint"/></method><method name="set_column_widget" cname="gtk_clist_set_column_widget"><return-type type="void"/></method><method name="get_hadjustment" cname="gtk_clist_get_hadjustment"><return-type type="GtkAdjustment*"/></method><method name="column_titles_active" cname="gtk_clist_column_titles_active"><return-type type="void"/></method><method name="set_foreground" cname="gtk_clist_set_foreground"><return-type type="void"/></method><method name="set_row_data" cname="gtk_clist_set_row_data"><return-type type="void"/></method><method name="set_column_resizeable" cname="gtk_clist_set_column_resizeable"><return-type type="void"/></method><method name="get_vadjustment" cname="gtk_clist_get_vadjustment"><return-type type="GtkAdjustment*"/></method><method name="select_row" cname="gtk_clist_select_row"><return-type type="void"/></method><method name="set_column_width" cname="gtk_clist_set_column_width"><return-type type="void"/></method><method name="unselect_all" cname="gtk_clist_unselect_all"><return-type type="void"/></method><method name="find_row_from_data" cname="gtk_clist_find_row_from_data"><return-type type="gint"/></method><method name="set_column_justification" cname="gtk_clist_set_column_justification"><return-type type="void"/></method><method name="set_column_visibility" cname="gtk_clist_set_column_visibility"><return-type type="void"/></method><method name="get_cell_style" cname="gtk_clist_get_cell_style"><return-type type="GtkStyle*"/></method><method name="set_row_style" cname="gtk_clist_set_row_style"><return-type type="void"/></method><method name="optimal_column_width" cname="gtk_clist_optimal_column_width"><return-type type="gint"/></method><method name="get_pixtext" cname="gtk_clist_get_pixtext"><return-type type="gint"/></method><method name="moveto" cname="gtk_clist_moveto"><return-type type="void"/></method><method name="get_text" cname="gtk_clist_get_text"><return-type type="gint"/></method><method name="set_button_actions" cname="gtk_clist_set_button_actions"><return-type type="void"/></method><method name="set_column_max_width" cname="gtk_clist_set_column_max_width"><return-type type="void"/></method><method name="set_column_title" cname="gtk_clist_set_column_title"><return-type type="void"/></method><method name="swap_rows" cname="gtk_clist_swap_rows"><return-type type="void"/></method><method name="set_cell_style" cname="gtk_clist_set_cell_style"><return-type type="void"/></method><method name="get_selectable" cname="gtk_clist_get_selectable"><return-type type="gboolean"/></method><method name="get_column_widget" cname="gtk_clist_get_column_widget"><return-type type="GtkWidget*"/></method><method name="set_reorderable" cname="gtk_clist_set_reorderable"><return-type type="void"/></method><method name="set_pixmap" cname="gtk_clist_set_pixmap"><return-type type="void"/></method><method name="get_cell_type" cname="gtk_clist_get_cell_type"><return-type type="GtkCellType"/></method><method name="create_cell_layout" cname="_gtk_clist_create_cell_layout"><return-type type="PangoLayout*"/></method><method name="column_titles_passive" cname="gtk_clist_column_titles_passive"><return-type type="void"/></method><method name="remove" cname="gtk_clist_remove"><return-type type="void"/></method><method name="clear" cname="gtk_clist_clear"><return-type type="void"/></method><method name="set_sort_type" cname="gtk_clist_set_sort_type"><return-type type="void"/></method><method name="set_column_min_width" cname="gtk_clist_set_column_min_width"><return-type type="void"/></method><method name="freeze" cname="gtk_clist_freeze"><return-type type="void"/></method><method name="get_row_style" cname="gtk_clist_get_row_style"><return-type type="GtkStyle*"/></method><method name="unselect_row" cname="gtk_clist_unselect_row"><return-type type="void"/></method><method name="set_selectable" cname="gtk_clist_set_selectable"><return-type type="void"/></method><method name="thaw" cname="gtk_clist_thaw"><return-type type="void"/></method><method name="set_text" cname="gtk_clist_set_text"><return-type type="void"/></method><method name="prepend" cname="gtk_clist_prepend"><return-type type="gint"/></method><method name="columns_autosize" cname="gtk_clist_columns_autosize"><return-type type="gint"/></method><method name="sort" cname="gtk_clist_sort"><return-type type="void"/></method><method name="set_compare_func" cname="gtk_clist_set_compare_func"><return-type type="void"/></method><constructor cname="gtk_clist_new_with_titles"/><method name="column_titles_show" cname="gtk_clist_column_titles_show"><return-type type="void"/></method><method name="set_pixtext" cname="gtk_clist_set_pixtext"><return-type type="void"/></method><method name="set_row_height" cname="gtk_clist_set_row_height"><return-type type="void"/></method><method name="set_row_data_full" cname="gtk_clist_set_row_data_full"><return-type type="void"/></method><method name="column_title_active" cname="gtk_clist_column_title_active"><return-type type="void"/></method><method name="get_row_data" cname="gtk_clist_get_row_data"><return-type type="gpointer"/></method><method name="undo_selection" cname="gtk_clist_undo_selection"><return-type type="void"/></method><method name="set_selection_mode" cname="gtk_clist_set_selection_mode"><return-type type="void"/></method><method name="set_background" cname="gtk_clist_set_background"><return-type type="void"/></method><constructor cname="gtk_clist_new"/><method name="set_shadow_type" cname="gtk_clist_set_shadow_type"><return-type type="void"/></method><method name="get_column_title" cname="gtk_clist_get_column_title"><return-type type="gchar*"/></method><method name="row_is_visible" cname="gtk_clist_row_is_visible"><return-type type="GtkVisibility"/></method><method name="select_all" cname="gtk_clist_select_all"><return-type type="void"/></method><method name="set_hadjustment" cname="gtk_clist_set_hadjustment"><return-type type="void"/></method><method name="set_shift" cname="gtk_clist_set_shift"><return-type type="void"/></method><method name="insert" cname="gtk_clist_insert"><return-type type="gint"/></method><method name="column_title_passive" cname="gtk_clist_column_title_passive"><return-type type="void"/></method><method name="set_sort_column" cname="gtk_clist_set_sort_column"><return-type type="void"/></method><method name="set_use_drag_icons" cname="gtk_clist_set_use_drag_icons"><return-type type="void"/></method><method name="append" cname="gtk_clist_append"><return-type type="gint"/></method><method name="set_auto_sort" cname="gtk_clist_set_auto_sort"><return-type type="void"/></method><method name="row_move" cname="gtk_clist_row_move"><return-type type="void"/></method><method name="set_vadjustment" cname="gtk_clist_set_vadjustment"><return-type type="void"/></method><method name="column_titles_hide" cname="gtk_clist_column_titles_hide"><return-type type="void"/></method></object><object name="ColorSelection" cname="GtkColorSelection" parent="GtkVBox"><field cname="private_data" type="gpointer"/><property name="HasOpacityControl" cname="has_opacity_control" type="gboolean" doc-string=" _(Whether the color selector should allow setting opacity)" readable="true" writeable="true"/><property name="HasPalette" cname="has_palette" type="gboolean" doc-string=" _(Whether a palette should be used)" readable="true" writeable="true"/><property name="CurrentColor" cname="current_color" type="GdkColor" doc-string=" _(The current color)" readable="true" writeable="true"/><property name="CurrentAlpha" cname="current_alpha" type="guint" doc-string=" _(The current opacity value (0 fully transparent, 65535 fully opaque))" readable="true" writeable="true"/><signal name="color_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkColorSelection*" name="color_selection"/></parameters></signal><method name="is_adjusting" cname="gtk_color_selection_is_adjusting"><return-type type="gboolean"/></method><method name="get_has_palette" cname="gtk_color_selection_get_has_palette"><return-type type="gboolean"/></method><method name="set_previous_color" cname="gtk_color_selection_set_previous_color"><return-type type="void"/></method><method name="get_current_color" cname="gtk_color_selection_get_current_color"><return-type type="void"/></method><method name="set_has_opacity_control" cname="gtk_color_selection_set_has_opacity_control"><return-type type="void"/></method><method name="set_current_alpha" cname="gtk_color_selection_set_current_alpha"><return-type type="void"/></method><method name="get_previous_color" cname="gtk_color_selection_get_previous_color"><return-type type="void"/></method><constructor cname="gtk_color_selection_new"/><method name="set_previous_alpha" cname="gtk_color_selection_set_previous_alpha"><return-type type="void"/></method><method name="get_current_alpha" cname="gtk_color_selection_get_current_alpha"><return-type type="guint16"/></method><method name="get_has_opacity_control" cname="gtk_color_selection_get_has_opacity_control"><return-type type="gboolean"/></method><method name="get_previous_alpha" cname="gtk_color_selection_get_previous_alpha"><return-type type="guint16"/></method><method name="set_current_color" cname="gtk_color_selection_set_current_color"><return-type type="void"/></method><method name="set_has_palette" cname="gtk_color_selection_set_has_palette"><return-type type="void"/></method></object><object name="ColorSelectionDialog" cname="GtkColorSelectionDialog" parent="GtkDialog"><field cname="colorsel" type="GtkWidget*"/><field cname="ok_button" type="GtkWidget*"/><field cname="cancel_button" type="GtkWidget*"/><field cname="help_button" type="GtkWidget*"/><constructor cname="gtk_color_selection_dialog_new"/></object><object name="Combo" cname="GtkCombo" parent="GtkHBox"><field cname="entry" type="GtkWidget*"/><field cname="button" type="GtkWidget*"/><field cname="popup" type="GtkWidget*"/><field cname="popwin" type="GtkWidget*"/><field cname="list" type="GtkWidget*"/><field cname="entry_change_id" type="guint"/><field cname="list_change_id" type="guint"/><field cname="value_in_list" bits="1" type="guint"/><field cname="ok_if_empty" bits="1" type="guint"/><field cname="case_sensitive" bits="1" type="guint"/><field cname="use_arrows" bits="1" type="guint"/><field cname="use_arrows_always" bits="1" type="guint"/><field cname="current_button" type="guint16"/><field cname="activate_id" type="guint"/><property name="EnableArrowKeys" cname="enable_arrow_keys" type="gboolean" doc-string=" _(Whether the arrow keys move through the list of items)" readable="true" writeable="true"/><property name="EnableArrowsAlways" cname="enable_arrows_always" type="gboolean" doc-string=" _(Whether the arrow keys work, even if the entry contents are not in the list)" readable="true" writeable="true"/><property name="CaseSensitive" cname="case_sensitive" type="gboolean" doc-string=" _(Whether list item matching is case sensitive)" readable="true" writeable="true"/><property name="AllowEmpty" cname="allow_empty" type="gboolean" doc-string=" _(Whether an empty value may be entered in this field)" readable="true" writeable="true"/><property name="ValueInList" cname="value_in_list" type="gboolean" doc-string=" _(Whether entered values must already be present in the list)" readable="true" writeable="true"/><method name="set_item_string" cname="gtk_combo_set_item_string"><return-type type="void"/></method><method name="set_use_arrows" cname="gtk_combo_set_use_arrows"><return-type type="void"/></method><constructor cname="gtk_combo_new"/><method name="disable_activate" cname="gtk_combo_disable_activate"><return-type type="void"/></method><method name="set_case_sensitive" cname="gtk_combo_set_case_sensitive"><return-type type="void"/></method><method name="set_value_in_list" cname="gtk_combo_set_value_in_list"><return-type type="void"/></method><method name="set_popdown_strings" cname="gtk_combo_set_popdown_strings"><return-type type="void"/></method><method name="set_use_arrows_always" cname="gtk_combo_set_use_arrows_always"><return-type type="void"/></method></object><object name="Container" cname="GtkContainer" parent="GtkWidget"><field cname="focus_child" type="GtkWidget*"/><field cname="border_width" bits="16" type="guint"/><field cname="need_resize" bits="1" type="guint"/><field cname="resize_mode" bits="2" type="guint"/><field cname="reallocate_redraws" bits="1" type="guint"/><field cname="has_focus_chain" bits="1" type="guint"/><property name="ResizeMode" cname="resize_mode" type="GtkResizeMode" doc-string=" _(Specify how resize events are handled)" readable="true" writeable="true"/><property name="BorderWidth" cname="border_width" type="guint" doc-string=" _(The width of the empty border outside the containers children.)" readable="true" writeable="true"/><property name="Child" cname="child" type="GtkWidget" doc-string=" _(Can be used to add a new child to the container.)" writeable="true"/><signal name="add" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkContainer*" name="container"/><parameter type="GtkWidget*" name="widget);void"/><parameter type="GtkWidget*" name="widget);void"/><parameter type="gboolean" name="include_internals"/><parameter type="GtkCallback" name="callback"/><parameter type="gpointer" name="callback_data);void"/><parameter type="GtkWidget*" name="widget);GtkType"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/><parameter type="guint" name="property_id"/><parameter type="const-GValue*" name="value"/><parameter type="GParamSpec*" name="pspec);void"/><parameter type="GtkWidget*" name="child"/><parameter type="guint" name="property_id"/><parameter type="GValue*" name="value"/><parameter type="GParamSpec*" name="pspec"/></parameters></signal><signal name="remove" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkContainer*" name="container"/><parameter type="GtkWidget*" name="widget);void"/><parameter type="gboolean" name="include_internals"/><parameter type="GtkCallback" name="callback"/><parameter type="gpointer" name="callback_data);void"/><parameter type="GtkWidget*" name="widget);GtkType"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/><parameter type="guint" name="property_id"/><parameter type="const-GValue*" name="value"/><parameter type="GParamSpec*" name="pspec);void"/><parameter type="GtkWidget*" name="child"/><parameter type="guint" name="property_id"/><parameter type="GValue*" name="value"/><parameter type="GParamSpec*" name="pspec"/></parameters></signal><signal name="check_resize" when="LAST"><return-type type="void"/><parameters><parameter type="GtkContainer*" name="container);void"/><parameter type="gboolean" name="include_internals"/><parameter type="GtkCallback" name="callback"/><parameter type="gpointer" name="callback_data);void"/><parameter type="GtkWidget*" name="widget);GtkType"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/><parameter type="guint" name="property_id"/><parameter type="const-GValue*" name="value"/><parameter type="GParamSpec*" name="pspec);void"/><parameter type="GtkWidget*" name="child"/><parameter type="guint" name="property_id"/><parameter type="GValue*" name="value"/><parameter type="GParamSpec*" name="pspec"/></parameters></signal><signal when="FIRST"><return-type type="void"/><parameters><parameter type="GtkContainer*" name="container"/><parameter type="GtkWidget*" name="widget);GtkType"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/><parameter type="guint" name="property_id"/><parameter type="const-GValue*" name="value"/><parameter type="GParamSpec*" name="pspec);void"/><parameter type="GtkWidget*" name="child"/><parameter type="guint" name="property_id"/><parameter type="GValue*" name="value"/><parameter type="GParamSpec*" name="pspec"/></parameters></signal><method name="add_with_properties" cname="gtk_container_add_with_properties"><return-type type="void"/></method><method name="check_resize" cname="gtk_container_check_resize"><return-type type="void"/></method><method name="child_type" cname="gtk_container_child_type"><return-type type="GtkType"/></method><method name="child_composite_name" cname="_gtk_container_child_composite_name"><return-type type="gchar*"/></method><method name="dequeue_resize_handler" cname="_gtk_container_dequeue_resize_handler"><return-type type="void"/></method><method name="set_focus_hadjustment" cname="gtk_container_set_focus_hadjustment"><return-type type="void"/></method><method name="child_set_valist" cname="gtk_container_child_set_valist"><return-type type="void"/></method><method name="remove" cname="gtk_container_remove"><return-type type="void"/></method><method name="child_get" cname="gtk_container_child_get"><return-type type="void"/></method><method name="set_focus_vadjustment" cname="gtk_container_set_focus_vadjustment"><return-type type="void"/></method><method name="get_focus_chain" cname="gtk_container_get_focus_chain"><return-type type="gboolean"/></method><method name="set_border_width" cname="gtk_container_set_border_width"><return-type type="void"/></method><method name="clear_resize_widgets" cname="_gtk_container_clear_resize_widgets"><return-type type="void"/></method><method name="add" cname="gtk_container_add"><return-type type="void"/></method><method name="set_focus_child" cname="gtk_container_set_focus_child"><return-type type="void"/></method><method name="child_get_property" cname="gtk_container_child_get_property"><return-type type="void"/></method><method name="unset_focus_chain" cname="gtk_container_unset_focus_chain"><return-type type="void"/></method><method name="forall" cname="gtk_container_forall"><return-type type="void"/></method><method name="resize_children" cname="gtk_container_resize_children"><return-type type="void"/></method><method name="get_children" cname="gtk_container_get_children"><return-type type="GList*"/></method><method name="get_focus_hadjustment" cname="gtk_container_get_focus_hadjustment"><return-type type="GtkAdjustment*"/></method><method name="child_get_valist" cname="gtk_container_child_get_valist"><return-type type="void"/></method><method name="queue_resize" cname="_gtk_container_queue_resize"><return-type type="void"/></method><method name="get_border_width" cname="gtk_container_get_border_width"><return-type type="guint"/></method><method name="set_reallocate_redraws" cname="gtk_container_set_reallocate_redraws"><return-type type="void"/></method><method name="get_focus_vadjustment" cname="gtk_container_get_focus_vadjustment"><return-type type="GtkAdjustment*"/></method><method name="set_resize_mode" cname="gtk_container_set_resize_mode"><return-type type="void"/></method><method name="propagate_expose" cname="gtk_container_propagate_expose"><return-type type="void"/></method><method name="child_set" cname="gtk_container_child_set"><return-type type="void"/></method><method name="foreach" cname="gtk_container_foreach"><return-type type="void"/></method><method name="child_set_property" cname="gtk_container_child_set_property"><return-type type="void"/></method><method name="get_resize_mode" cname="gtk_container_get_resize_mode"><return-type type="GtkResizeMode"/></method><method name="set_focus_chain" cname="gtk_container_set_focus_chain"><return-type type="void"/></method></object><object name="CTree" cname="GtkCTree" parent="GtkCList"><field cname="lines_gc" type="GdkGC*"/><field cname="tree_indent" type="gint"/><field cname="tree_spacing" type="gint"/><field cname="tree_column" type="gint"/><field cname="line_style" bits="2" type="guint"/><field cname="expander_style" bits="2" type="guint"/><field cname="show_stub" bits="1" type="guint"/><field cname="drag_compare" type="GtkCTreeCompareDragFunc"/><method name="toggle_expansion" cname="gtk_ctree_toggle_expansion"><return-type type="void"/></method><method name="node_moveto" cname="gtk_ctree_node_moveto"><return-type type="void"/></method><method name="set_line_style" cname="gtk_ctree_set_line_style"><return-type type="void"/></method><constructor cname="gtk_ctree_new"/><method name="real_select_recursive" cname="gtk_ctree_real_select_recursive"><return-type type="void"/></method><method name="remove_node" cname="gtk_ctree_remove_node"><return-type type="void"/></method><method name="find_all_by_row_data" cname="gtk_ctree_find_all_by_row_data"><return-type type="GList*"/></method><method name="node_set_row_data" cname="gtk_ctree_node_set_row_data"><return-type type="void"/></method><method name="set_node_info" cname="gtk_ctree_set_node_info"><return-type type="void"/></method><method name="node_nth" cname="gtk_ctree_node_nth"><return-type type="GtkCTreeNode*"/></method><method name="find_by_row_data" cname="gtk_ctree_find_by_row_data"><return-type type="GtkCTreeNode*"/></method><method name="select_recursive" cname="gtk_ctree_select_recursive"><return-type type="void"/></method><method name="toggle_expansion_recursive" cname="gtk_ctree_toggle_expansion_recursive"><return-type type="void"/></method><method name="node_is_visible" cname="gtk_ctree_node_is_visible"><return-type type="GtkVisibility"/></method><method name="find_by_row_data_custom" cname="gtk_ctree_find_by_row_data_custom"><return-type type="GtkCTreeNode*"/></method><method name="post_recursive_to_depth" cname="gtk_ctree_post_recursive_to_depth"><return-type type="void"/></method><method name="post_recursive" cname="gtk_ctree_post_recursive"><return-type type="void"/></method><method name="find_all_by_row_data_custom" cname="gtk_ctree_find_all_by_row_data_custom"><return-type type="GList*"/></method><method name="node_set_foreground" cname="gtk_ctree_node_set_foreground"><return-type type="void"/></method><method name="node_set_row_data_full" cname="gtk_ctree_node_set_row_data_full"><return-type type="void"/></method><method name="node_get_pixmap" cname="gtk_ctree_node_get_pixmap"><return-type type="gboolean"/></method><method name="find" cname="gtk_ctree_find"><return-type type="gboolean"/></method><method name="set_drag_compare_func" cname="gtk_ctree_set_drag_compare_func"><return-type type="void"/></method><method name="insert_gnode" cname="gtk_ctree_insert_gnode"><return-type type="GtkCTreeNode*"/></method><method name="insert_node" cname="gtk_ctree_insert_node"><return-type type="GtkCTreeNode*"/></method><method name="node_set_row_style" cname="gtk_ctree_node_set_row_style"><return-type type="void"/></method><method name="node_get_cell_style" cname="gtk_ctree_node_get_cell_style"><return-type type="GtkStyle*"/></method><method name="get_node_info" cname="gtk_ctree_get_node_info"><return-type type="gboolean"/></method><method name="move" cname="gtk_ctree_move"><return-type type="void"/></method><method name="pre_recursive_to_depth" cname="gtk_ctree_pre_recursive_to_depth"><return-type type="void"/></method><method name="node_get_pixtext" cname="gtk_ctree_node_get_pixtext"><return-type type="gboolean"/></method><method name="sort_recursive" cname="gtk_ctree_sort_recursive"><return-type type="void"/></method><constructor cname="gtk_ctree_new_with_titles"/><method name="node_get_text" cname="gtk_ctree_node_get_text"><return-type type="gboolean"/></method><method name="node_set_cell_style" cname="gtk_ctree_node_set_cell_style"><return-type type="void"/></method><method name="collapse" cname="gtk_ctree_collapse"><return-type type="void"/></method><method name="set_expander_style" cname="gtk_ctree_set_expander_style"><return-type type="void"/></method><method name="node_get_selectable" cname="gtk_ctree_node_get_selectable"><return-type type="gboolean"/></method><method name="set_spacing" cname="gtk_ctree_set_spacing"><return-type type="void"/></method><method name="node_get_cell_type" cname="gtk_ctree_node_get_cell_type"><return-type type="GtkCellType"/></method><method name="last" cname="gtk_ctree_last"><return-type type="GtkCTreeNode*"/></method><method name="is_viewable" cname="gtk_ctree_is_viewable"><return-type type="gboolean"/></method><method name="is_hot_spot" cname="gtk_ctree_is_hot_spot"><return-type type="gboolean"/></method><method name="collapse_recursive" cname="gtk_ctree_collapse_recursive"><return-type type="void"/></method><method name="select" cname="gtk_ctree_select"><return-type type="void"/></method><method name="node_get_row_data" cname="gtk_ctree_node_get_row_data"><return-type type="gpointer"/></method><method name="node_get_row_style" cname="gtk_ctree_node_get_row_style"><return-type type="GtkStyle*"/></method><method name="expand" cname="gtk_ctree_expand"><return-type type="void"/></method><method name="node_set_shift" cname="gtk_ctree_node_set_shift"><return-type type="void"/></method><method name="sort_node" cname="gtk_ctree_sort_node"><return-type type="void"/></method><method name="node_set_selectable" cname="gtk_ctree_node_set_selectable"><return-type type="void"/></method><method name="pre_recursive" cname="gtk_ctree_pre_recursive"><return-type type="void"/></method><method name="set_show_stub" cname="gtk_ctree_set_show_stub"><return-type type="void"/></method><method name="export_to_gnode" cname="gtk_ctree_export_to_gnode"><return-type type="GNode*"/></method><method name="node_set_pixmap" cname="gtk_ctree_node_set_pixmap"><return-type type="void"/></method><method name="is_ancestor" cname="gtk_ctree_is_ancestor"><return-type type="gboolean"/></method><method name="node_set_text" cname="gtk_ctree_node_set_text"><return-type type="void"/></method><method name="node_set_pixtext" cname="gtk_ctree_node_set_pixtext"><return-type type="void"/></method><method name="node_set_background" cname="gtk_ctree_node_set_background"><return-type type="void"/></method><method name="set_indent" cname="gtk_ctree_set_indent"><return-type type="void"/></method><method name="collapse_to_depth" cname="gtk_ctree_collapse_to_depth"><return-type type="void"/></method><method name="expand_to_depth" cname="gtk_ctree_expand_to_depth"><return-type type="void"/></method><method name="unselect_recursive" cname="gtk_ctree_unselect_recursive"><return-type type="void"/></method><method name="find_node_ptr" cname="gtk_ctree_find_node_ptr"><return-type type="GtkCTreeNode*"/></method><method name="unselect" cname="gtk_ctree_unselect"><return-type type="void"/></method><method name="expand_recursive" cname="gtk_ctree_expand_recursive"><return-type type="void"/></method></object><object name="Curve" cname="GtkCurve" parent="GtkDrawingArea"><field cname="cursor_type" type="gint"/><field cname="min_x" type="gfloat"/><field cname="max_x" type="gfloat"/><field cname="min_y" type="gfloat"/><field cname="max_y" type="gfloat"/><field cname="pixmap" type="GdkPixmap*"/><field cname="curve_type" type="GtkCurveType"/><field cname="height" type="gint"/><field cname="grab_point" type="gint"/><field cname="last" type="gint"/><field cname="num_points" type="gint"/><field cname="point" type="GdkPoint*"/><field cname="num_ctlpoints" type="gint"/><field cname="(*ctlpoint)[2]" type="gfloat"/><property name="CurveType" cname="curve_type" type="GtkCurveType" doc-string=" _(Is this curve linear, spline interpolated, or free-form)" readable="true" writeable="true"/><property name="MinX" cname="min_x" type="gfloat" doc-string=" _(Minimum possible value for X)" readable="true" writeable="true"/><property name="MaxX" cname="max_x" type="gfloat" doc-string=" _(Maximum possible X value.)" readable="true" writeable="true"/><property name="MinY" cname="min_y" type="gfloat" doc-string=" _(Minimum possible value for Y)" readable="true" writeable="true"/><property name="MaxY" cname="max_y" type="gfloat" doc-string=" _(Maximum possible value for Y)" readable="true" writeable="true"/><signal name="curve_type_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkCurve*" name="curve"/></parameters></signal><method name="set_gamma" cname="gtk_curve_set_gamma"><return-type type="void"/></method><method name="set_curve_type" cname="gtk_curve_set_curve_type"><return-type type="void"/></method><method name="get_vector" cname="gtk_curve_get_vector"><return-type type="void"/></method><method name="set_range" cname="gtk_curve_set_range"><return-type type="void"/></method><method name="reset" cname="gtk_curve_reset"><return-type type="void"/></method><constructor cname="gtk_curve_new"/><method name="set_vector" cname="gtk_curve_set_vector"><return-type type="void"/></method></object><object name="Dialog" cname="GtkDialog" parent="GtkWindow"><field cname="vbox" type="GtkWidget*"/><field cname="action_area" type="GtkWidget*"/><field cname="separator" type="GtkWidget*"/><property name="HasSeparator" cname="has_separator" type="gboolean" doc-string=" _(The dialog has a separator bar above its buttons)" readable="true" writeable="true"/><signal name="response" when="LAST"><return-type type="void"/><parameters><parameter type="GtkDialog*" name="dialog"/><parameter type="gint" name="response_id);void"/></parameters></signal><signal name="close" when="LAST"><return-type type="void"/><parameters><parameter type="GtkDialog*" name="dialog"/></parameters></signal><constructor cname="gtk_dialog_new_with_buttons"/><method name="set_has_separator" cname="gtk_dialog_set_has_separator"><return-type type="void"/></method><method name="run" cname="gtk_dialog_run"><return-type type="gint"/></method><method name="set_default_response" cname="gtk_dialog_set_default_response"><return-type type="void"/></method><method name="set_response_sensitive" cname="gtk_dialog_set_response_sensitive"><return-type type="void"/></method><method name="response" cname="gtk_dialog_response"><return-type type="void"/></method><method name="get_has_separator" cname="gtk_dialog_get_has_separator"><return-type type="gboolean"/></method><constructor cname="gtk_dialog_new"/><method name="add_action_widget" cname="gtk_dialog_add_action_widget"><return-type type="void"/></method><method name="add_buttons" cname="gtk_dialog_add_buttons"><return-type type="void"/></method><method name="add_button" cname="gtk_dialog_add_button"><return-type type="GtkWidget*"/></method></object><object name="DrawingArea" cname="GtkDrawingArea" parent="GtkWidget"><field cname="draw_data" type="gpointer"/><constructor cname="gtk_drawing_area_new"/></object><object name="Entry" cname="GtkEntry" parent="GtkWidget"><field cname="text" type="gchar*"/><field cname="editable" bits="1" type="guint"/><field cname="visible" bits="1" type="guint"/><field cname="overwrite_mode" bits="1" type="guint"/><field cname="in_drag" bits="1" type="guint"/><field cname="text_length" type="guint16"/><field cname="text_max_length" type="guint16"/><field cname="text_area" type="GdkWindow*"/><field cname="im_context" type="GtkIMContext*"/><field cname="popup_menu" type="GtkWidget*"/><field cname="current_pos" type="gint"/><field cname="selection_bound" type="gint"/><field cname="cached_layout" type="PangoLayout*"/><field cname="cache_includes_preedit" bits="1" type="guint"/><field cname="need_im_reset" bits="1" type="guint"/><field cname="has_frame" bits="1" type="guint"/><field cname="activates_default" bits="1" type="guint"/><field cname="cursor_visible" bits="1" type="guint"/><field cname="in_click" bits="1" type="guint"/><field cname="is_cell_renderer" bits="1" type="guint"/><field cname="editing_canceled" bits="1" type="guint"/><field cname="button" type="guint"/><field cname="blink_timeout" type="guint"/><field cname="recompute_idle" type="guint"/><field cname="scroll_offset" type="gint"/><field cname="ascent" type="gint"/><field cname="descent" type="gint"/><field cname="text_size" type="guint16"/><field cname="n_bytes" type="guint16"/><field cname="preedit_length" type="guint16"/><field cname="preedit_cursor" type="guint16"/><field cname="dnd_position" type="gint"/><field cname="drag_start_x" type="gint"/><field cname="drag_start_y" type="gint"/><field cname="invisible_char" type="gunichar"/><field cname="width_chars" type="gint"/><field cname="cursor_gc" type="GdkGC*"/><property name="CursorPosition" cname="cursor_position" type="gint" doc-string=" _(The current position of the insertion cursor in chars.)" readable="true"/><property name="SelectionBound" cname="selection_bound" type="gint" doc-string=" _(The position of the opposite end of the selection from the cursor in chars.)" readable="true"/><property name="Editable" cname="editable" type="gboolean" doc-string=" _(Whether the entry contents can be edited)" readable="true" writeable="true"/><property name="MaxLength" cname="max_length" type="gint" doc-string=" _(Maximum number of characters for this entry)" readable="true" writeable="true"/><property name="Visibility" cname="visibility" type="gboolean" doc-string=" _(FALSE displays the \invisible char\ instead of the actual text (password mode))" readable="true" writeable="true"/><property name="HasFrame" cname="has_frame" type="gboolean" doc-string=" _(FALSE removes outside bevel from entry.)" readable="true" writeable="true"/><property name="InvisibleChar" cname="invisible_char" type="unichar" doc-string=" _(The character to use when masking entry contents (in \password mode\))" readable="true" writeable="true"/><property name="ActivatesDefault" cname="activates_default" type="gboolean" doc-string=" _(Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed.)" readable="true" writeable="true"/><property name="WidthChars" cname="width_chars" type="gint" doc-string=" _(Number of characters to leave space for in the entry.)" readable="true" writeable="true"/><property name="ScrollOffset" cname="scroll_offset" type="gint" doc-string=" _(Number of pixels of the entry scrolled off the screen to the left)" readable="true"/><property name="Text" cname="text" type="gchar*" doc-string=" _(The contents of the entry)" readable="true" writeable="true"/><signal name="populate_popup" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry"/><parameter type="GtkMenu*" name="menu);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count"/><parameter type="gboolean" name="extend_selection);void"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="activate" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count"/><parameter type="gboolean" name="extend_selection);void"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="move_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count"/><parameter type="gboolean" name="extend_selection);void"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="insert_at_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="delete_from_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="cut_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry);void"/></parameters></signal><signal name="copy_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry);void"/></parameters></signal><signal name="paste_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry);void"/></parameters></signal><signal name="toggle_overwrite" when="LAST"><return-type type="void"/><parameters><parameter type="GtkEntry*" name="entry"/></parameters></signal><method name="get_invisible_char" cname="gtk_entry_get_invisible_char"><return-type type="gunichar"/></method><method name="get_layout" cname="gtk_entry_get_layout"><return-type type="PangoLayout*"/></method><method name="get_layout_offsets" cname="gtk_entry_get_layout_offsets"><return-type type="void"/></method><method name="get_max_length" cname="gtk_entry_get_max_length"><return-type type="gint"/></method><method name="get_text" cname="gtk_entry_get_text"><return-type type="const-gchar*"/></method><method name="set_has_frame" cname="gtk_entry_set_has_frame"><return-type type="void"/></method><method name="set_max_length" cname="gtk_entry_set_max_length"><return-type type="void"/></method><method name="get_activates_default" cname="gtk_entry_get_activates_default"><return-type type="gboolean"/></method><method name="get_visibility" cname="gtk_entry_get_visibility"><return-type type="gboolean"/></method><method name="set_width_chars" cname="gtk_entry_set_width_chars"><return-type type="void"/></method><method name="set_visibility" cname="gtk_entry_set_visibility"><return-type type="void"/></method><constructor cname="gtk_entry_new"/><method name="set_text" cname="gtk_entry_set_text"><return-type type="void"/></method><method name="get_has_frame" cname="gtk_entry_get_has_frame"><return-type type="gboolean"/></method><method name="get_width_chars" cname="gtk_entry_get_width_chars"><return-type type="gint"/></method><method name="set_activates_default" cname="gtk_entry_set_activates_default"><return-type type="void"/></method><method name="set_invisible_char" cname="gtk_entry_set_invisible_char"><return-type type="void"/></method></object><object name="EventBox" cname="GtkEventBox" parent="GtkBin"><constructor cname="gtk_event_box_new"/></object><object name="FileSelection" cname="GtkFileSelection" parent="GtkDialog"><field cname="dir_list" type="GtkWidget*"/><field cname="file_list" type="GtkWidget*"/><field cname="selection_entry" type="GtkWidget*"/><field cname="selection_text" type="GtkWidget*"/><field cname="main_vbox" type="GtkWidget*"/><field cname="ok_button" type="GtkWidget*"/><field cname="cancel_button" type="GtkWidget*"/><field cname="help_button" type="GtkWidget*"/><field cname="history_pulldown" type="GtkWidget*"/><field cname="history_menu" type="GtkWidget*"/><field cname="history_list" type="GList*"/><field cname="fileop_dialog" type="GtkWidget*"/><field cname="fileop_entry" type="GtkWidget*"/><field cname="fileop_file" type="gchar*"/><field cname="cmpl_state" type="gpointer"/><field cname="fileop_c_dir" type="GtkWidget*"/><field cname="fileop_del_file" type="GtkWidget*"/><field cname="fileop_ren_file" type="GtkWidget*"/><field cname="button_area" type="GtkWidget*"/><field cname="action_area" type="GtkWidget*"/><property name="Filename" cname="filename" type="gchar*" doc-string=" _(The currently selected filename.)" readable="true" writeable="true"/><property name="ShowFileops" cname="show_fileops" type="gboolean" doc-string=" _(Whether buttons for creating/manipulating files should be displayed.)" readable="true" writeable="true"/><method name="set_filename" cname="gtk_file_selection_set_filename"><return-type type="void"/></method><constructor cname="gtk_file_selection_new"/><method name="get_filename" cname="gtk_file_selection_get_filename"><return-type type="const-gchar*"/></method><method name="complete" cname="gtk_file_selection_complete"><return-type type="void"/></method><method name="show_fileop_buttons" cname="gtk_file_selection_show_fileop_buttons"><return-type type="void"/></method><method name="hide_fileop_buttons" cname="gtk_file_selection_hide_fileop_buttons"><return-type type="void"/></method></object><object name="Fixed" cname="GtkFixed" parent="GtkContainer"><field cname="children" type="GList*"/><method name="put" cname="gtk_fixed_put"><return-type type="void"/></method><method name="get_has_window" cname="gtk_fixed_get_has_window"><return-type type="gboolean"/></method><method name="set_has_window" cname="gtk_fixed_set_has_window"><return-type type="void"/></method><method name="move" cname="gtk_fixed_move"><return-type type="void"/></method><constructor cname="gtk_fixed_new"/></object><object name="FontSelection" cname="GtkFontSelection" parent="GtkVBox"><field cname="font_label" type="GtkWidget*"/><field cname="font_entry" type="GtkWidget*"/><field cname="font_clist" type="GtkWidget*"/><field cname="font_style_entry" type="GtkWidget*"/><field cname="font_style_clist" type="GtkWidget*"/><field cname="size_entry" type="GtkWidget*"/><field cname="size_clist" type="GtkWidget*"/><field cname="pixels_button" type="GtkWidget*"/><field cname="points_button" type="GtkWidget*"/><field cname="filter_button" type="GtkWidget*"/><field cname="preview_entry" type="GtkWidget*"/><field cname="families" type="PangoFontFamily**"/><field cname="family" type="PangoFontFamily*"/><field cname="faces" type="PangoFontFace**"/><field cname="face" type="PangoFontFace*"/><field cname="size" type="gint"/><field cname="font" type="GdkFont*"/><property name="FontName" cname="font_name" type="gchar*" doc-string=" _(The X string that represents this font.)" readable="true" writeable="true"/><property name="Font" cname="font" type="GdkFont" doc-string=" _(The GdkFont that is currently selected.)" readable="true"/><property name="PreviewText" cname="preview_text" type="gchar*" doc-string=" _(The text to display in order to demonstrate the selected font.)" readable="true" writeable="true"/><method name="set_font_name" cname="gtk_font_selection_set_font_name"><return-type type="gboolean"/></method><constructor cname="gtk_font_selection_new"/><method name="get_preview_text" cname="gtk_font_selection_get_preview_text"><return-type type="const-gchar*"/></method><method name="get_font_name" cname="gtk_font_selection_get_font_name"><return-type type="gchar*"/></method><method name="set_preview_text" cname="gtk_font_selection_set_preview_text"><return-type type="void"/></method></object><object name="FontSelectionDialog" cname="GtkFontSelectionDialog" parent="GtkDialog"><field cname="fontsel" type="GtkWidget*"/><field cname="main_vbox" type="GtkWidget*"/><field cname="action_area" type="GtkWidget*"/><field cname="ok_button" type="GtkWidget*"/><field cname="apply_button" type="GtkWidget*"/><field cname="cancel_button" type="GtkWidget*"/><field cname="dialog_width" type="gint"/><field cname="auto_resize" type="gboolean"/><method name="get_preview_text" cname="gtk_font_selection_dialog_get_preview_text"><return-type type="const-gchar*"/></method><constructor cname="gtk_font_selection_dialog_new"/><method name="set_font_name" cname="gtk_font_selection_dialog_set_font_name"><return-type type="gboolean"/></method><method name="get_font_name" cname="gtk_font_selection_dialog_get_font_name"><return-type type="gchar*"/></method><method name="set_preview_text" cname="gtk_font_selection_dialog_set_preview_text"><return-type type="void"/></method></object><object name="Frame" cname="GtkFrame" parent="GtkBin"><field cname="label_widget" type="GtkWidget*"/><field cname="shadow_type" type="gint16"/><field cname="label_xalign" type="gfloat"/><field cname="label_yalign" type="gfloat"/><field cname="child_allocation" type="GtkAllocation"/><property name="Label" cname="label" type="gchar*" doc-string=" _(Text of the frame's label.)" readable="true" writeable="true"/><property name="LabelXalign" cname="label_xalign" type="gfloat" doc-string=" _(The horizontal alignment of the label.)" readable="true" writeable="true"/><property name="LabelYalign" cname="label_yalign" type="gfloat" doc-string=" _(The vertical alignment of the label.)" readable="true" writeable="true"/><property name="Shadow" cname="shadow" type="GtkShadowType" doc-string=" _(Deprecated property, use shadow_type instead.)" readable="true" writeable="true"/><property name="ShadowType" cname="shadow_type" type="GtkShadowType" doc-string=" _(Appearance of the frame border.)" readable="true" writeable="true"/><property name="LabelWidget" cname="label_widget" type="GtkWidget" doc-string=" _(A widget to display in place of the usual frame label.)" readable="true" writeable="true"/><method name="set_label_widget" cname="gtk_frame_set_label_widget"><return-type type="void"/></method><method name="set_label_align" cname="gtk_frame_set_label_align"><return-type type="void"/></method><constructor cname="gtk_frame_new"/><method name="set_shadow_type" cname="gtk_frame_set_shadow_type"><return-type type="void"/></method><method name="set_label" cname="gtk_frame_set_label"><return-type type="void"/></method><method name="get_label_align" cname="gtk_frame_get_label_align"><return-type type="void"/></method><method name="get_label_widget" cname="gtk_frame_get_label_widget"><return-type type="GtkWidget*"/></method><method name="get_shadow_type" cname="gtk_frame_get_shadow_type"><return-type type="GtkShadowType"/></method><method name="get_label" cname="gtk_frame_get_label"><return-type type="const-gchar*"/></method></object><object name="GammaCurve" cname="GtkGammaCurve" parent="GtkVBox"><field cname="table" type="GtkWidget*"/><field cname="curve" type="GtkWidget*"/><field cname="button" array_len="5" type="GtkWidget*"/><field cname="gamma" type="gfloat"/><field cname="gamma_dialog" type="GtkWidget*"/><field cname="gamma_text" type="GtkWidget*"/><constructor cname="gtk_gamma_curve_new"/></object><object name="HandleBox" cname="GtkHandleBox" parent="GtkBin"><field cname="bin_window" type="GdkWindow*"/><field cname="float_window" type="GdkWindow*"/><field cname="shadow_type" type="GtkShadowType"/><field cname="handle_position" bits="2" type="guint"/><field cname="float_window_mapped" bits="1" type="guint"/><field cname="child_detached" bits="1" type="guint"/><field cname="in_drag" bits="1" type="guint"/><field cname="shrink_on_detach" bits="1" type="guint"/><field cname="snap_edge" bits="3" type="gint"/><field cname="deskoff_x" type="gint"/><field cname="deskoff_y" type="gint"/><field cname="attach_allocation" type="GtkAllocation"/><field cname="float_allocation" type="GtkAllocation"/><property name="Shadow" cname="shadow" type="GtkShadowType" doc-string=" _(Deprecated property, use shadow_type instead.)" readable="true" writeable="true"/><property name="ShadowType" cname="shadow_type" type="GtkShadowType" doc-string=" _(Appearance of the shadow that surrounds the container.)" readable="true" writeable="true"/><property name="HandlePosition" cname="handle_position" type="GtkPositionType" doc-string=" _(Position of the handle relative to the child widget.)" readable="true" writeable="true"/><property name="SnapEdge" cname="snap_edge" type="GtkPositionType" doc-string=" _(Side of the handlebox that's lined up with the docking point to dock the handlebox.)" readable="true" writeable="true"/><signal name="child_attached" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkHandleBox*" name="handle_box"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/></parameters></signal><signal name="child_detached" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkHandleBox*" name="handle_box"/><parameter type="GtkWidget*" name="child"/></parameters></signal><method name="get_handle_position" cname="gtk_handle_box_get_handle_position"><return-type type="GtkPositionType"/></method><method name="get_snap_edge" cname="gtk_handle_box_get_snap_edge"><return-type type="GtkPositionType"/></method><method name="set_handle_position" cname="gtk_handle_box_set_handle_position"><return-type type="void"/></method><method name="set_shadow_type" cname="gtk_handle_box_set_shadow_type"><return-type type="void"/></method><constructor cname="gtk_handle_box_new"/><method name="set_snap_edge" cname="gtk_handle_box_set_snap_edge"><return-type type="void"/></method><method name="get_shadow_type" cname="gtk_handle_box_get_shadow_type"><return-type type="GtkShadowType"/></method></object><object name="HBox" cname="GtkHBox" parent="GtkBox"><constructor cname="gtk_hbox_new"/></object><object name="HButtonBox" cname="GtkHButtonBox" parent="GtkButtonBox"><constructor cname="gtk_hbutton_box_new"/></object><object name="HPaned" cname="GtkHPaned" parent="GtkPaned"><constructor cname="gtk_hpaned_new"/></object><object name="HRuler" cname="GtkHRuler" parent="GtkRuler"><constructor cname="gtk_hruler_new"/></object><object name="HScale" cname="GtkHScale" parent="GtkScale"><constructor cname="gtk_hscale_new_with_range"/><constructor cname="gtk_hscale_new"/></object><object name="HScrollbar" cname="GtkHScrollbar" parent="GtkScrollbar"><constructor cname="gtk_hscrollbar_new"/></object><object name="HSeparator" cname="GtkHSeparator" parent="GtkSeparator"><constructor cname="gtk_hseparator_new"/></object><object name="HSV" cname="GtkHSV" parent="GtkWidget"><field cname="priv" type="gpointer"/><method name="get_color" cname="gtk_hsv_get_color"><return-type type="void"/></method><method name="set_metrics" cname="gtk_hsv_set_metrics"><return-type type="void"/></method><method name="get_metrics" cname="gtk_hsv_get_metrics"><return-type type="void"/></method><method name="set_color" cname="gtk_hsv_set_color"><return-type type="void"/></method><constructor cname="gtk_hsv_new"/><method name="is_adjusting" cname="gtk_hsv_is_adjusting"><return-type type="gboolean"/></method></object><object name="IconFactory" cname="GtkIconFactory" parent="GObject"><field cname="icons" type="GHashTable*"/><method name="lookup" cname="gtk_icon_factory_lookup"><return-type type="GtkIconSet*"/></method><method name="add" cname="gtk_icon_factory_add"><return-type type="void"/></method><constructor cname="gtk_icon_factory_new"/><method name="remove_default" cname="gtk_icon_factory_remove_default"><return-type type="void"/></method><method name="add_default" cname="gtk_icon_factory_add_default"><return-type type="void"/></method></object><object name="Image" cname="GtkImage" parent="GtkMisc"><field cname="storage_type" type="GtkImageType"/><field cname="pixmap" type="union{GtkImagePixmapData"/><field cname="image" type="GtkImageImageData"/><field cname="pixbuf" type="GtkImagePixbufData"/><field cname="stock" type="GtkImageStockData"/><field cname="icon_set" type="GtkImageIconSetData"/><field cname="anim" type="GtkImageAnimationData"/><field cname="data" type="}"/><field cname="mask" type="GdkBitmap*"/><field cname="icon_size" type="GtkIconSize"/><property name="Pixbuf" cname="pixbuf" type="GdkPixbuf" doc-string=" _(A GdkPixbuf to display.)" readable="true" writeable="true"/><property name="Pixmap" cname="pixmap" type="GdkPixmap" doc-string=" _(A GdkPixmap to display.)" readable="true" writeable="true"/><property name="Image" cname="image" type="GdkImage" doc-string=" _(A GdkImage to display.)" readable="true" writeable="true"/><property name="Mask" cname="mask" type="GdkPixmap" doc-string=" _(Mask bitmap to use with GdkImage or GdkPixmap)" readable="true" writeable="true"/><property name="File" cname="file" type="gchar*" doc-string=" _(Filename to load and siplay.)" writeable="true"/><property name="Stock" cname="stock" type="gchar*" doc-string=" _(Stock ID for a stock image to display.)" readable="true" writeable="true"/><property name="IconSet" cname="icon_set" type="GtkIconSet" doc-string=" _(Icon set to display.)" readable="true" writeable="true"/><property name="IconSize" cname="icon_size" type="gint" doc-string=" _(Size to use for stock icon or icon set.)" readable="true" writeable="true"/><property name="PixbufAnimation" cname="pixbuf_animation" type="GdkPixbufAnimation" doc-string=" _(GdkPixbufAnimation to display.)" readable="true" writeable="true"/><property name="StorageType" cname="storage_type" type="GtkImageType" doc-string=" _(The representation being used for image data.)" readable="true"/><method name="get_pixbuf" cname="gtk_image_get_pixbuf"><return-type type="GdkPixbuf*"/></method><method name="get_stock" cname="gtk_image_get_stock"><return-type type="void"/></method><method name="set_from_icon_set" cname="gtk_image_set_from_icon_set"><return-type type="void"/></method><method name="get_image" cname="gtk_image_get_image"><return-type type="void"/></method><method name="get_animation" cname="gtk_image_get_animation"><return-type type="GdkPixbufAnimation*"/></method><constructor cname="gtk_image_new_from_animation"/><constructor cname="gtk_image_new_from_stock"/><method name="set_from_stock" cname="gtk_image_set_from_stock"><return-type type="void"/></method><method name="get_storage_type" cname="gtk_image_get_storage_type"><return-type type="GtkImageType"/></method><constructor cname="gtk_image_new_from_image"/><method name="set_from_image" cname="gtk_image_set_from_image"><return-type type="void"/></method><constructor cname="gtk_image_new_from_pixmap"/><method name="set_from_animation" cname="gtk_image_set_from_animation"><return-type type="void"/></method><method name="get_icon_set" cname="gtk_image_get_icon_set"><return-type type="void"/></method><method name="set_from_pixmap" cname="gtk_image_set_from_pixmap"><return-type type="void"/></method><constructor cname="gtk_image_new"/><method name="get_pixmap" cname="gtk_image_get_pixmap"><return-type type="void"/></method><constructor cname="gtk_image_new_from_file"/><method name="set_from_file" cname="gtk_image_set_from_file"><return-type type="void"/></method><constructor cname="gtk_image_new_from_icon_set"/><constructor cname="gtk_image_new_from_pixbuf"/><method name="set_from_pixbuf" cname="gtk_image_set_from_pixbuf"><return-type type="void"/></method></object><object name="ImageMenuItem" cname="GtkImageMenuItem" parent="GtkMenuItem"><field cname="image" type="GtkWidget*"/><property name="Image" cname="image" type="GtkWidget" doc-string=" _(Child widget to appear next to the menu text)" readable="true" writeable="true"/><method name="get_image" cname="gtk_image_menu_item_get_image"><return-type type="GtkWidget*"/></method><constructor cname="gtk_image_menu_item_new"/><constructor cname="gtk_image_menu_item_new_with_label"/><method name="set_image" cname="gtk_image_menu_item_set_image"><return-type type="void"/></method><constructor cname="gtk_image_menu_item_new_with_mnemonic"/><constructor cname="gtk_image_menu_item_new_from_stock"/></object><object name="IMContext" cname="GtkIMContext" parent="GObject"/><object name="IMContextSimple" cname="GtkIMContextSimple" parent="GtkIMContext"><field cname="tables" type="GSList*"/><field cname="compose_buffer" array_len="GTK_MAX_COMPOSE_LEN + 1" type="guint"/><field cname="tentative_match" type="gunichar"/><field cname="tentative_match_len" type="gint"/><field cname="in_hex_sequence" bits="1" type="guint"/></object><object name="IMMulticontext" cname="GtkIMMulticontext" parent="GtkIMContext"><field cname="slave" type="GtkIMContext*"/><field cname="client_window" type="GdkWindow*"/><field cname="context_id" type="const-gchar*"/></object><object name="InputDialog" cname="GtkInputDialog" parent="GtkDialog"><field cname="axis_list" type="GtkWidget*"/><field cname="axis_listbox" type="GtkWidget*"/><field cname="mode_optionmenu" type="GtkWidget*"/><field cname="close_button" type="GtkWidget*"/><field cname="save_button" type="GtkWidget*"/><field cname="axis_items" array_len="GDK_AXIS_LAST" type="GtkWidget*"/><field cname="current_device" type="GdkDevice*"/><field cname="keys_list" type="GtkWidget*"/><field cname="keys_listbox" type="GtkWidget*"/><signal name="enable_device" when="LAST"><return-type type="void"/><parameters><parameter type="GtkInputDialog*" name="inputd"/><parameter type="GdkDevice*" name="device);void"/><parameter type="GdkDevice*" name="device"/></parameters></signal><signal name="disable_device" when="LAST"><return-type type="void"/><parameters><parameter type="GtkInputDialog*" name="inputd"/><parameter type="GdkDevice*" name="device"/></parameters></signal><constructor cname="gtk_input_dialog_new"/></object><object name="Invisible" cname="GtkInvisible" parent="GtkWidget"><field cname="has_user_ref_count" type="gboolean"/><field cname="gtk_reserved1" type="gpointer"/><constructor cname="gtk_invisible_new"/></object><object name="Item" cname="GtkItem" parent="GtkBin"><signal name="select" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkItem*" name="item);void"/></parameters></signal><signal name="deselect" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkItem*" name="item);void"/></parameters></signal><signal name="toggle" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkItem*" name="item"/></parameters></signal><method name="select" cname="gtk_item_select"><return-type type="void"/></method><method name="deselect" cname="gtk_item_deselect"><return-type type="void"/></method><method name="toggle" cname="gtk_item_toggle"><return-type type="void"/></method></object><object name="ItemFactory" cname="GtkItemFactory" parent="GtkObject"><field cname="path" type="gchar*"/><field cname="accel_group" type="GtkAccelGroup*"/><field cname="widget" type="GtkWidget*"/><field cname="items" type="GSList*"/><field cname="translate_func" type="GtkTranslateFunc"/><field cname="translate_data" type="gpointer"/><field cname="translate_notify" type="GtkDestroyNotify"/><method name="delete_entries" cname="gtk_item_factory_delete_entries"><return-type type="void"/></method><method name="popup" cname="gtk_item_factory_popup"><return-type type="void"/></method><method name="construct" cname="gtk_item_factory_construct"><return-type type="void"/></method><method name="get_item_by_action" cname="gtk_item_factory_get_item_by_action"><return-type type="GtkWidget*"/></method><method name="create_items" cname="gtk_item_factory_create_items"><return-type type="void"/></method><constructor cname="gtk_item_factory_new"/><method name="delete_item" cname="gtk_item_factory_delete_item"><return-type type="void"/></method><method name="get_item" cname="gtk_item_factory_get_item"><return-type type="GtkWidget*"/></method><method name="create_item" cname="gtk_item_factory_create_item"><return-type type="void"/></method><method name="set_translate_func" cname="gtk_item_factory_set_translate_func"><return-type type="void"/></method><method name="get_widget" cname="gtk_item_factory_get_widget"><return-type type="GtkWidget*"/></method><method name="get_widget_by_action" cname="gtk_item_factory_get_widget_by_action"><return-type type="GtkWidget*"/></method><method name="delete_entry" cname="gtk_item_factory_delete_entry"><return-type type="void"/></method><method name="popup_data" cname="gtk_item_factory_popup_data"><return-type type="gpointer"/></method><method name="popup_with_data" cname="gtk_item_factory_popup_with_data"><return-type type="void"/></method></object><object name="Label" cname="GtkLabel" parent="GtkMisc"><field cname="label" type="gchar*"/><field cname="jtype" bits="2" type="guint"/><field cname="wrap" bits="1" type="guint"/><field cname="use_underline" bits="1" type="guint"/><field cname="use_markup" bits="1" type="guint"/><field cname="mnemonic_keyval" type="guint"/><field cname="text" type="gchar*"/><field cname="attrs" type="PangoAttrList*"/><field cname="effective_attrs" type="PangoAttrList*"/><field cname="layout" type="PangoLayout*"/><field cname="mnemonic_widget" type="GtkWidget*"/><field cname="mnemonic_window" type="GtkWindow*"/><field cname="select_info" type="GtkLabelSelectionInfo*"/><signal name="move_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkLabel*" name="label"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count"/><parameter type="gboolean" name="extend_selection);void"/><parameter type="GtkMenu*" name="menu"/></parameters></signal><signal name="copy_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkLabel*" name="label);void"/><parameter type="GtkMenu*" name="menu"/></parameters></signal><signal name="populate_popup" when="LAST"><return-type type="void"/><parameters><parameter type="GtkLabel*" name="label"/><parameter type="GtkMenu*" name="menu"/></parameters></signal><property name="Label" cname="label" type="gchar*" doc-string=" _(The text of the label.)" readable="true" writeable="true"/><property name="Attributes" cname="attributes" type="PangoAttrList" doc-string=" _(A list of style attributes to apply to the text of the label.)" readable="true" writeable="true"/><property name="UseMarkup" cname="use_markup" type="gboolean" doc-string=" _(The text of the label includes XML markup. See pango_parse_markup().)" readable="true" writeable="true"/><property name="UseUnderline" cname="use_underline" type="gboolean" doc-string=" _(If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key)" readable="true" writeable="true"/><property name="Justify" cname="justify" type="GtkJustification" doc-string=" _(The alignment of the lines in the text of the label relative to each other. This does NOT affect the alignment of the label within its allocation. See GtkMisc::xalign for that.)" readable="true" writeable="true"/><property name="Pattern" cname="pattern" type="gchar*" doc-string=" _(A string with _ characters in positions correspond to characters in the text to underline.)" writeable="true"/><property name="Wrap" cname="wrap" type="gboolean" doc-string=" _(If set, wrap lines if the text becomes too wide.)" readable="true" writeable="true"/><property name="Selectable" cname="selectable" type="gboolean" doc-string=" _(Whether the label text can be selected with the mouse.)" readable="true" writeable="true"/><property name="MnemonicKeyval" cname="mnemonic_keyval" type="guint" doc-string=" _(The mnemonic accelerator key for this label.)" readable="true"/><property name="MnemonicWidget" cname="mnemonic_widget" type="GtkWidget" doc-string=" _(The widget to be activated when the label's mnemonic key is pressed.)" readable="true" writeable="true"/><property name="CursorPosition" cname="cursor_position" type="gint" doc-string=" _(The current position of the insertion cursor in chars.)" readable="true"/><property name="SelectionBound" cname="selection_bound" type="gint" doc-string=" _(The position of the opposite end of the selection from the cursor in chars.)" readable="true"/><method name="set_attributes" cname="gtk_label_set_attributes"><return-type type="void"/></method><method name="get_label" cname="gtk_label_get_label"><return-type type="const-gchar*"/></method><method name="set_use_markup" cname="gtk_label_set_use_markup"><return-type type="void"/></method><method name="set_line_wrap" cname="gtk_label_set_line_wrap"><return-type type="void"/></method><method name="set_markup" cname="gtk_label_set_markup"><return-type type="void"/></method><method name="set_use_underline" cname="gtk_label_set_use_underline"><return-type type="void"/></method><method name="get_layout" cname="gtk_label_get_layout"><return-type type="PangoLayout*"/></method><method name="get_mnemonic_widget" cname="gtk_label_get_mnemonic_widget"><return-type type="GtkWidget*"/></method><method name="set_text_with_mnemonic" cname="gtk_label_set_text_with_mnemonic"><return-type type="void"/></method><method name="set_justify" cname="gtk_label_set_justify"><return-type type="void"/></method><method name="get_line_wrap" cname="gtk_label_get_line_wrap"><return-type type="gboolean"/></method><method name="set_mnemonic_widget" cname="gtk_label_set_mnemonic_widget"><return-type type="void"/></method><constructor cname="gtk_label_new_with_mnemonic"/><method name="select_region" cname="gtk_label_select_region"><return-type type="void"/></method><method name="get_selectable" cname="gtk_label_get_selectable"><return-type type="gboolean"/></method><method name="get_use_underline" cname="gtk_label_get_use_underline"><return-type type="gboolean"/></method><constructor cname="gtk_label_new"/><method name="set_markup_with_mnemonic" cname="gtk_label_set_markup_with_mnemonic"><return-type type="void"/></method><method name="get_layout_offsets" cname="gtk_label_get_layout_offsets"><return-type type="void"/></method><method name="get_text" cname="gtk_label_get_text"><return-type type="const-gchar*"/></method><method name="set_selectable" cname="gtk_label_set_selectable"><return-type type="void"/></method><method name="set_pattern" cname="gtk_label_set_pattern"><return-type type="void"/></method><method name="set_label" cname="gtk_label_set_label"><return-type type="void"/></method><method name="get_selection_bounds" cname="gtk_label_get_selection_bounds"><return-type type="gboolean"/></method><method name="get_attributes" cname="gtk_label_get_attributes"><return-type type="PangoAttrList*"/></method><method name="get_use_markup" cname="gtk_label_get_use_markup"><return-type type="gboolean"/></method><method name="get_justify" cname="gtk_label_get_justify"><return-type type="GtkJustification"/></method><method name="get_mnemonic_keyval" cname="gtk_label_get_mnemonic_keyval"><return-type type="guint"/></method><method name="set_text" cname="gtk_label_set_text"><return-type type="void"/></method></object><object name="Layout" cname="GtkLayout" parent="GtkContainer"><field cname="children" type="GList*"/><field cname="width" type="guint"/><field cname="height" type="guint"/><field cname="hadjustment" type="GtkAdjustment*"/><field cname="vadjustment" type="GtkAdjustment*"/><field cname="bin_window" type="GdkWindow*"/><field cname="visibility" type="GdkVisibilityState"/><field cname="scroll_x" type="gint"/><field cname="scroll_y" type="gint"/><field cname="freeze_count" type="guint"/><property name="Hadjustment" cname="hadjustment" type="GtkAdjustment" doc-string=" _(The GtkAdjustment for the horizontal position.)" readable="true" writeable="true"/><property name="Vadjustment" cname="vadjustment" type="GtkAdjustment" doc-string=" _(The GtkAdjustment for the vertical position.)" readable="true" writeable="true"/><property name="Width" cname="width" type="guint" doc-string=" _(The width of the layout.)" readable="true" writeable="true"/><property name="Height" cname="height" type="guint" doc-string=" _(The height of the layout.)" readable="true" writeable="true"/><signal name="set_scroll_adjustments" when="LAST"><return-type type="void"/><parameters><parameter type="GtkLayout*" name="layout"/><parameter type="GtkAdjustment*" name="hadjustment"/><parameter type="GtkAdjustment*" name="vadjustment"/></parameters></signal><method name="set_vadjustment" cname="gtk_layout_set_vadjustment"><return-type type="void"/></method><method name="get_hadjustment" cname="gtk_layout_get_hadjustment"><return-type type="GtkAdjustment*"/></method><method name="get_vadjustment" cname="gtk_layout_get_vadjustment"><return-type type="GtkAdjustment*"/></method><constructor cname="gtk_layout_new"/><method name="get_size" cname="gtk_layout_get_size"><return-type type="void"/></method><method name="move" cname="gtk_layout_move"><return-type type="void"/></method><method name="set_size" cname="gtk_layout_set_size"><return-type type="void"/></method><method name="put" cname="gtk_layout_put"><return-type type="void"/></method><method name="set_hadjustment" cname="gtk_layout_set_hadjustment"><return-type type="void"/></method></object><object name="List" cname="GtkList" parent="GtkContainer"><field cname="children" type="GList*"/><field cname="selection" type="GList*"/><field cname="undo_selection" type="GList*"/><field cname="undo_unselection" type="GList*"/><field cname="last_focus_child" type="GtkWidget*"/><field cname="undo_focus_child" type="GtkWidget*"/><field cname="htimer" type="guint"/><field cname="vtimer" type="guint"/><field cname="anchor" type="gint"/><field cname="drag_pos" type="gint"/><field cname="anchor_state" type="GtkStateType"/><field cname="selection_mode" bits="2" type="guint"/><field cname="drag_selection" bits="1" type="guint"/><field cname="add_mode" bits="1" type="guint"/><signal name="selection_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkList*" name="list);void"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/></parameters></signal><signal name="select_child" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkList*" name="list"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/></parameters></signal><signal name="unselect_child" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkList*" name="list"/><parameter type="GtkWidget*" name="child"/></parameters></signal><method name="clear_items" cname="gtk_list_clear_items"><return-type type="void"/></method><method name="scroll_horizontal" cname="gtk_list_scroll_horizontal"><return-type type="void"/></method><method name="insert_items" cname="gtk_list_insert_items"><return-type type="void"/></method><method name="unselect_item" cname="gtk_list_unselect_item"><return-type type="void"/></method><method name="prepend_items" cname="gtk_list_prepend_items"><return-type type="void"/></method><method name="child_position" cname="gtk_list_child_position"><return-type type="gint"/></method><method name="toggle_focus_row" cname="gtk_list_toggle_focus_row"><return-type type="void"/></method><method name="toggle_row" cname="gtk_list_toggle_row"><return-type type="void"/></method><method name="select_all" cname="gtk_list_select_all"><return-type type="void"/></method><method name="append_items" cname="gtk_list_append_items"><return-type type="void"/></method><method name="extend_selection" cname="gtk_list_extend_selection"><return-type type="void"/></method><method name="remove_items_no_unref" cname="gtk_list_remove_items_no_unref"><return-type type="void"/></method><method name="undo_selection" cname="gtk_list_undo_selection"><return-type type="void"/></method><method name="start_selection" cname="gtk_list_start_selection"><return-type type="void"/></method><method name="end_selection" cname="gtk_list_end_selection"><return-type type="void"/></method><constructor cname="gtk_list_new"/><method name="toggle_add_mode" cname="gtk_list_toggle_add_mode"><return-type type="void"/></method><method name="select_item" cname="gtk_list_select_item"><return-type type="void"/></method><method name="end_drag_selection" cname="gtk_list_end_drag_selection"><return-type type="void"/></method><method name="select_child" cname="gtk_list_select_child"><return-type type="void"/></method><method name="unselect_child" cname="gtk_list_unselect_child"><return-type type="void"/></method><method name="scroll_vertical" cname="gtk_list_scroll_vertical"><return-type type="void"/></method><method name="remove_items" cname="gtk_list_remove_items"><return-type type="void"/></method><method name="set_selection_mode" cname="gtk_list_set_selection_mode"><return-type type="void"/></method><method name="unselect_all" cname="gtk_list_unselect_all"><return-type type="void"/></method></object><object name="ListItem" cname="GtkListItem" parent="GtkItem"><signal name="toggle_focus_row" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position"/><parameter type="gboolean" name="auto_start_selection);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><signal name="select_all" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position"/><parameter type="gboolean" name="auto_start_selection);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><signal name="unselect_all" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position"/><parameter type="gboolean" name="auto_start_selection);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><signal name="undo_selection" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position"/><parameter type="gboolean" name="auto_start_selection);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><signal name="start_selection" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position"/><parameter type="gboolean" name="auto_start_selection);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><signal name="end_selection" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position"/><parameter type="gboolean" name="auto_start_selection);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><signal name="toggle_add_mode" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item"/></parameters></signal><signal name="extend_selection" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position"/><parameter type="gboolean" name="auto_start_selection);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><signal name="scroll_vertical" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><signal name="scroll_horizontal" when="LAST"><return-type type="void"/><parameters><parameter type="GtkListItem*" name="list_item"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/><parameter type="GtkScrollType" name="scroll_type"/><parameter type="gfloat" name="position);void"/></parameters></signal><constructor cname="gtk_list_item_new"/><constructor cname="gtk_list_item_new_with_label"/><method name="select" cname="gtk_list_item_select"><return-type type="void"/></method><method name="deselect" cname="gtk_list_item_deselect"><return-type type="void"/></method></object><object name="ListStore" cname="GtkListStore" parent="GObject"><field cname="stamp" type="gint"/><field cname="root" type="gpointer"/><field cname="tail" type="gpointer"/><field cname="sort_list" type="GList*"/><field cname="n_columns" type="gint"/><field cname="sort_column_id" type="gint"/><field cname="order" type="GtkSortType"/><field cname="column_headers" type="GType*"/><field cname="length" type="gint"/><field cname="default_sort_func" type="GtkTreeIterCompareFunc"/><field cname="default_sort_data" type="gpointer"/><field cname="default_sort_destroy" type="GtkDestroyNotify"/><field cname="columns_dirty" bits="1" type="guint"/><method name="insert" cname="gtk_list_store_insert"><return-type type="void"/></method><method name="append" cname="gtk_list_store_append"><return-type type="void"/></method><method name="set_value" cname="gtk_list_store_set_value"><return-type type="void"/></method><method name="set" cname="gtk_list_store_set"><return-type type="void"/></method><method name="insert_before" cname="gtk_list_store_insert_before"><return-type type="void"/></method><constructor cname="gtk_list_store_new"/><method name="set_valist" cname="gtk_list_store_set_valist"><return-type type="void"/></method><method name="remove" cname="gtk_list_store_remove"><return-type type="void"/></method><constructor cname="gtk_list_store_newv"/><method name="prepend" cname="gtk_list_store_prepend"><return-type type="void"/></method><method name="set_column_types" cname="gtk_list_store_set_column_types"><return-type type="void"/></method><method name="insert_after" cname="gtk_list_store_insert_after"><return-type type="void"/></method><method name="clear" cname="gtk_list_store_clear"><return-type type="void"/></method></object><object name="Menu" cname="GtkMenu" parent="GtkMenuShell"><field cname="parent_menu_item" type="GtkWidget*"/><field cname="old_active_menu_item" type="GtkWidget*"/><field cname="accel_group" type="GtkAccelGroup*"/><field cname="accel_path" type="gchar*"/><field cname="position_func" type="GtkMenuPositionFunc"/><field cname="position_func_data" type="gpointer"/><field cname="toggle_size" type="guint"/><field cname="toplevel" type="GtkWidget*"/><field cname="tearoff_window" type="GtkWidget*"/><field cname="tearoff_hbox" type="GtkWidget*"/><field cname="tearoff_scrollbar" type="GtkWidget*"/><field cname="tearoff_adjustment" type="GtkAdjustment*"/><field cname="view_window" type="GdkWindow*"/><field cname="bin_window" type="GdkWindow*"/><field cname="scroll_offset" type="gint"/><field cname="saved_scroll_offset" type="gint"/><field cname="scroll_step" type="gint"/><field cname="timeout_id" type="guint"/><field cname="navigation_region" type="GdkRegion*"/><field cname="navigation_timeout" type="guint"/><field cname="needs_destruction_ref_count" bits="1" type="guint"/><field cname="torn_off" bits="1" type="guint"/><field cname="tearoff_active" bits="1" type="guint"/><field cname="scroll_fast" bits="1" type="guint"/><field cname="upper_arrow_visible" bits="1" type="guint"/><field cname="lower_arrow_visible" bits="1" type="guint"/><field cname="upper_arrow_prelight" bits="1" type="guint"/><field cname="lower_arrow_prelight" bits="1" type="guint"/><property name="TearoffTitle" cname="tearoff-title" type="gchar*" doc-string=" _(A title that may be displayed by the window manager when this menu is torn-off.)" readable="true" writeable="true"/><method name="reorder_child" cname="gtk_menu_reorder_child"><return-type type="void"/></method><method name="set_accel_path" cname="gtk_menu_set_accel_path"><return-type type="void"/></method><method name="popdown" cname="gtk_menu_popdown"><return-type type="void"/></method><method name="get_active" cname="gtk_menu_get_active"><return-type type="GtkWidget*"/></method><method name="set_accel_group" cname="gtk_menu_set_accel_group"><return-type type="void"/></method><method name="set_title" cname="gtk_menu_set_title"><return-type type="void"/></method><method name="set_tearoff_state" cname="gtk_menu_set_tearoff_state"><return-type type="void"/></method><method name="get_title" cname="gtk_menu_get_title"><return-type type="const-gchar*"/></method><method name="get_accel_group" cname="gtk_menu_get_accel_group"><return-type type="GtkAccelGroup*"/></method><method name="popup" cname="gtk_menu_popup"><return-type type="void"/></method><method name="reposition" cname="gtk_menu_reposition"><return-type type="void"/></method><method name="detach" cname="gtk_menu_detach"><return-type type="void"/></method><method name="set_active" cname="gtk_menu_set_active"><return-type type="void"/></method><constructor cname="gtk_menu_new"/><method name="get_tearoff_state" cname="gtk_menu_get_tearoff_state"><return-type type="gboolean"/></method><method name="get_attach_widget" cname="gtk_menu_get_attach_widget"><return-type type="GtkWidget*"/></method><method name="attach_to_widget" cname="gtk_menu_attach_to_widget"><return-type type="void"/></method></object><object name="MenuBar" cname="GtkMenuBar" parent="GtkMenuShell"><constructor cname="gtk_menu_bar_new"/></object><object name="MenuItem" cname="GtkMenuItem" parent="GtkItem"><field cname="submenu" type="GtkWidget*"/><field cname="event_window" type="GdkWindow*"/><field cname="toggle_size" type="guint16"/><field cname="accelerator_width" type="guint16"/><field cname="accel_path" type="gchar*"/><field cname="show_submenu_indicator" bits="1" type="guint"/><field cname="submenu_placement" bits="1" type="guint"/><field cname="submenu_direction" bits="1" type="guint"/><field cname="right_justify" bits="1" type="guint"/><field cname="timer" type="guint"/><signal name="activate" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkMenuItem*" name="menu_item);void"/><parameter type="gint*" name="requisition);void"/><parameter type="gint" name="allocation"/></parameters></signal><signal name="activate_item" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkMenuItem*" name="menu_item);void"/><parameter type="gint*" name="requisition);void"/><parameter type="gint" name="allocation"/></parameters></signal><signal name="toggle_size_request" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkMenuItem*" name="menu_item"/><parameter type="gint*" name="requisition);void"/><parameter type="gint" name="allocation"/></parameters></signal><signal name="toggle_size_allocate" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkMenuItem*" name="menu_item"/><parameter type="gint" name="allocation"/></parameters></signal><constructor cname="gtk_menu_item_new"/><method name="set_placement" cname="_gtk_menu_item_set_placement"><return-type type="void"/></method><constructor cname="gtk_menu_item_new_with_label"/><method name="set_submenu" cname="gtk_menu_item_set_submenu"><return-type type="void"/></method><method name="activate" cname="gtk_menu_item_activate"><return-type type="void"/></method><method name="get_right_justified" cname="gtk_menu_item_get_right_justified"><return-type type="gboolean"/></method><method name="set_accel_path" cname="gtk_menu_item_set_accel_path"><return-type type="void"/></method><method name="deselect" cname="gtk_menu_item_deselect"><return-type type="void"/></method><method name="set_right_justified" cname="gtk_menu_item_set_right_justified"><return-type type="void"/></method><method name="toggle_size_allocate" cname="gtk_menu_item_toggle_size_allocate"><return-type type="void"/></method><method name="remove_submenu" cname="gtk_menu_item_remove_submenu"><return-type type="void"/></method><method name="get_submenu" cname="gtk_menu_item_get_submenu"><return-type type="GtkWidget*"/></method><constructor cname="gtk_menu_item_new_with_mnemonic"/><method name="select" cname="gtk_menu_item_select"><return-type type="void"/></method><method name="refresh_accel_path" cname="_gtk_menu_item_refresh_accel_path"><return-type type="void"/></method><method name="toggle_size_request" cname="gtk_menu_item_toggle_size_request"><return-type type="void"/></method></object><object name="MenuShell" cname="GtkMenuShell" parent="GtkContainer"><field cname="children" type="GList*"/><field cname="active_menu_item" type="GtkWidget*"/><field cname="parent_menu_shell" type="GtkWidget*"/><field cname="button" type="guint"/><field cname="activate_time" type="guint32"/><field cname="active" bits="1" type="guint"/><field cname="have_grab" bits="1" type="guint"/><field cname="have_xgrab" bits="1" type="guint"/><field cname="ignore_leave" bits="1" type="guint"/><field cname="menu_flag" bits="1" type="guint"/><field cname="ignore_enter" bits="1" type="guint"/><signal name="deactivate" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkMenuShell*" name="menu_shell);void"/><parameter type="GtkMenuDirectionType" name="direction);void"/><parameter type="gboolean" name="force_hide);void"/><parameter type="GtkWidget*" name="menu_item);void"/><parameter type="GtkWidget*" name="child"/><parameter type="gint" name="position"/></parameters></signal><signal when="FIRST"><return-type type="void"/><parameters><parameter type="GtkMenuShell*" name="menu_shell);void"/><parameter type="GtkMenuDirectionType" name="direction);void"/><parameter type="gboolean" name="force_hide);void"/><parameter type="GtkWidget*" name="menu_item);void"/><parameter type="GtkWidget*" name="child"/><parameter type="gint" name="position"/></parameters></signal><signal name="move_current" when="LAST"><return-type type="void"/><parameters><parameter type="GtkMenuShell*" name="menu_shell"/><parameter type="GtkMenuDirectionType" name="direction);void"/><parameter type="gboolean" name="force_hide);void"/><parameter type="GtkWidget*" name="menu_item);void"/><parameter type="GtkWidget*" name="child"/><parameter type="gint" name="position"/></parameters></signal><signal name="activate_current" when="LAST"><return-type type="void"/><parameters><parameter type="GtkMenuShell*" name="menu_shell"/><parameter type="gboolean" name="force_hide);void"/><parameter type="GtkWidget*" name="menu_item);void"/><parameter type="GtkWidget*" name="child"/><parameter type="gint" name="position"/></parameters></signal><signal name="cancel" when="LAST"><return-type type="void"/><parameters><parameter type="GtkMenuShell*" name="menu_shell);void"/><parameter type="GtkWidget*" name="menu_item);void"/><parameter type="GtkWidget*" name="child"/><parameter type="gint" name="position"/></parameters></signal><method name="deselect" cname="gtk_menu_shell_deselect"><return-type type="void"/></method><method name="prepend" cname="gtk_menu_shell_prepend"><return-type type="void"/></method><method name="deactivate" cname="gtk_menu_shell_deactivate"><return-type type="void"/></method><method name="insert" cname="gtk_menu_shell_insert"><return-type type="void"/></method><method name="append" cname="gtk_menu_shell_append"><return-type type="void"/></method><method name="activate_item" cname="gtk_menu_shell_activate_item"><return-type type="void"/></method><method name="select_item" cname="gtk_menu_shell_select_item"><return-type type="void"/></method></object><object name="MessageDialog" cname="GtkMessageDialog" parent="GtkDialog"><field cname="image" type="GtkWidget*"/><field cname="label" type="GtkWidget*"/><property name="MessageType" cname="message_type" type="GtkMessageType" doc-string=" _(The type of message)" readable="true" writeable="true" construct-only="true"/><property name="Buttons" cname="buttons" type="GtkButtonsType" doc-string=" _(The buttons shown in the message dialog)" writeable="true" construct-only="true"/><constructor cname="gtk_message_dialog_new"/></object><object name="Misc" cname="GtkMisc" parent="GtkWidget"><field cname="xalign" type="gfloat"/><field cname="yalign" type="gfloat"/><field cname="xpad" type="guint16"/><field cname="ypad" type="guint16"/><property name="Xalign" cname="xalign" type="gfloat" doc-string=" _(The horizontal alignment, from 0 (left) to 1 (right))" readable="true" writeable="true"/><property name="Yalign" cname="yalign" type="gfloat" doc-string=" _(The vertical alignment, from 0 (top) to 1 (bottom))" readable="true" writeable="true"/><property name="Xpad" cname="xpad" type="gint" doc-string=" _(The amount of space to add on the left and right of the widget, in pixels)" readable="true" writeable="true"/><property name="Ypad" cname="ypad" type="gint" doc-string=" _(The amount of space to add on the top and bottom of the widget, in pixels)" readable="true" writeable="true"/><method name="get_alignment" cname="gtk_misc_get_alignment"><return-type type="void"/></method><method name="set_padding" cname="gtk_misc_set_padding"><return-type type="void"/></method><method name="set_alignment" cname="gtk_misc_set_alignment"><return-type type="void"/></method><method name="get_padding" cname="gtk_misc_get_padding"><return-type type="void"/></method></object><object name="Notebook" cname="GtkNotebook" parent="GtkContainer"><field cname="cur_page" type="GtkNotebookPage*"/><field cname="children" type="GList*"/><field cname="first_tab" type="GList*"/><field cname="focus_tab" type="GList*"/><field cname="menu" type="GtkWidget*"/><field cname="event_window" type="GdkWindow*"/><field cname="timer" type="guint32"/><field cname="tab_hborder" type="guint16"/><field cname="tab_vborder" type="guint16"/><field cname="show_tabs" bits="1" type="guint"/><field cname="homogeneous" bits="1" type="guint"/><field cname="show_border" bits="1" type="guint"/><field cname="tab_pos" bits="2" type="guint"/><field cname="scrollable" bits="1" type="guint"/><field cname="in_child" bits="2" type="guint"/><field cname="click_child" bits="2" type="guint"/><field cname="button" bits="2" type="guint"/><field cname="need_timer" bits="1" type="guint"/><field cname="child_has_focus" bits="1" type="guint"/><field cname="have_visible_child" bits="1" type="guint"/><property name="Page" cname="page" type="gint" doc-string=" _(The index of the current page)" readable="true" writeable="true"/><property name="TabPos" cname="tab_pos" type="GtkPositionType" doc-string=" _(Which side of the notebook holds the tabs)" readable="true" writeable="true"/><property name="TabBorder" cname="tab_border" type="guint" doc-string=" _(Width of the border around the tab labels)" writeable="true"/><property name="TabHborder" cname="tab_hborder" type="guint" doc-string=" _(Width of the horizontal border of tab labels)" readable="true" writeable="true"/><property name="TabVborder" cname="tab_vborder" type="guint" doc-string=" _(Width of the vertical border of tab labels)" readable="true" writeable="true"/><property name="ShowTabs" cname="show_tabs" type="gboolean" doc-string=" _(Whether tabs should be shown or not)" readable="true" writeable="true"/><property name="ShowBorder" cname="show_border" type="gboolean" doc-string=" _(Whether the border should be shown or not)" readable="true" writeable="true"/><property name="Scrollable" cname="scrollable" type="gboolean" doc-string=" _(If TRUE, scroll arrows are added if there are to many tabs to fit)" readable="true" writeable="true"/><property name="EnablePopup" cname="enable_popup" type="gboolean" doc-string=" _(If TRUE, pressing the right mouse button on the notebook pops up a menu that you can use to go to a page)" readable="true" writeable="true"/><property name="Homogeneous" cname="homogeneous" type="gboolean" doc-string=" _(Whether tabs should have homogeneous sizes)" readable="true" writeable="true"/><signal name="switch_page" when="LAST"><return-type type="void"/><parameters><parameter type="GtkNotebook*" name="notebook"/><parameter type="GtkNotebookPage*" name="page"/><parameter type="guint" name="page_num);void"/><parameter type="gboolean" name="move_focus);void"/><parameter type="GtkNotebookTab" name="type);void"/><parameter type="gint" name="offset"/></parameters></signal><signal name="focus_tab" when="LAST"><return-type type="void"/><parameters><parameter type="GtkNotebook*" name="notebook"/><parameter type="GtkNotebookTab" name="type);void"/><parameter type="gint" name="offset"/></parameters></signal><signal name="select_page" when="LAST"><return-type type="void"/><parameters><parameter type="GtkNotebook*" name="notebook"/><parameter type="gboolean" name="move_focus);void"/><parameter type="GtkNotebookTab" name="type);void"/><parameter type="gint" name="offset"/></parameters></signal><signal name="change_current_page" when="LAST"><return-type type="void"/><parameters><parameter type="GtkNotebook*" name="notebook"/><parameter type="gint" name="offset"/></parameters></signal><method name="insert_page" cname="gtk_notebook_insert_page"><return-type type="void"/></method><method name="query_tab_label_packing" cname="gtk_notebook_query_tab_label_packing"><return-type type="void"/></method><method name="popup_enable" cname="gtk_notebook_popup_enable"><return-type type="void"/></method><method name="set_show_border" cname="gtk_notebook_set_show_border"><return-type type="void"/></method><method name="next_page" cname="gtk_notebook_next_page"><return-type type="void"/></method><method name="set_show_tabs" cname="gtk_notebook_set_show_tabs"><return-type type="void"/></method><method name="get_current_page" cname="gtk_notebook_get_current_page"><return-type type="gint"/></method><method name="get_nth_page" cname="gtk_notebook_get_nth_page"><return-type type="GtkWidget*"/></method><method name="get_menu_label_text" cname="gtk_notebook_get_menu_label_text"><return-type type="const-gchar*"/></method><method name="get_tab_pos" cname="gtk_notebook_get_tab_pos"><return-type type="GtkPositionType"/></method><method name="get_tab_label" cname="gtk_notebook_get_tab_label"><return-type type="GtkWidget*"/></method><method name="page_num" cname="gtk_notebook_page_num"><return-type type="gint"/></method><method name="set_tab_label_text" cname="gtk_notebook_set_tab_label_text"><return-type type="void"/></method><method name="get_show_border" cname="gtk_notebook_get_show_border"><return-type type="gboolean"/></method><method name="prepend_page" cname="gtk_notebook_prepend_page"><return-type type="void"/></method><constructor cname="gtk_notebook_new"/><method name="set_menu_label_text" cname="gtk_notebook_set_menu_label_text"><return-type type="void"/></method><method name="prepend_page_menu" cname="gtk_notebook_prepend_page_menu"><return-type type="void"/></method><method name="get_show_tabs" cname="gtk_notebook_get_show_tabs"><return-type type="gboolean"/></method><method name="get_tab_label_text" cname="gtk_notebook_get_tab_label_text"><return-type type="const-gchar*"/></method><method name="get_menu_label" cname="gtk_notebook_get_menu_label"><return-type type="GtkWidget*"/></method><method name="reorder_child" cname="gtk_notebook_reorder_child"><return-type type="void"/></method><method name="get_scrollable" cname="gtk_notebook_get_scrollable"><return-type type="gboolean"/></method><method name="set_tab_pos" cname="gtk_notebook_set_tab_pos"><return-type type="void"/></method><method name="append_page_menu" cname="gtk_notebook_append_page_menu"><return-type type="void"/></method><method name="insert_page_menu" cname="gtk_notebook_insert_page_menu"><return-type type="void"/></method><method name="set_menu_label" cname="gtk_notebook_set_menu_label"><return-type type="void"/></method><method name="prev_page" cname="gtk_notebook_prev_page"><return-type type="void"/></method><method name="set_tab_label_packing" cname="gtk_notebook_set_tab_label_packing"><return-type type="void"/></method><method name="append_page" cname="gtk_notebook_append_page"><return-type type="void"/></method><method name="set_current_page" cname="gtk_notebook_set_current_page"><return-type type="void"/></method><method name="remove_page" cname="gtk_notebook_remove_page"><return-type type="void"/></method><method name="set_scrollable" cname="gtk_notebook_set_scrollable"><return-type type="void"/></method><method name="popup_disable" cname="gtk_notebook_popup_disable"><return-type type="void"/></method><method name="set_tab_label" cname="gtk_notebook_set_tab_label"><return-type type="void"/></method></object><object name="Object" cname="GtkObject" parent="GObject"><field cname="flags" type="guint32"/><property name="UserData" cname="user_data" type="gpointer" doc-string=" Anonymous User Data Pointer" readable="true" writeable="true"/><signal name="destroy" when="CLEANUP"><return-type type="void"/><parameters><parameter type="GtkObject*" name="object"/></parameters></signal><method name="destroy" cname="gtk_object_destroy"><return-type type="void"/></method><method name="sink" cname="gtk_object_sink"><return-type type="void"/></method><constructor cname="gtk_object_new"/></object><object name="OldEditable" cname="GtkOldEditable" parent="GtkWidget"><field cname="current_pos" type="guint"/><field cname="selection_start_pos" type="guint"/><field cname="selection_end_pos" type="guint"/><field cname="has_selection" bits="1" type="guint"/><field cname="editable" bits="1" type="guint"/><field cname="visible" bits="1" type="guint"/><field cname="clipboard_text" type="gchar*"/><signal name="activate" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable);void"/><parameter type="gboolean" name="is_editable);void"/><parameter type="gint" name="x"/><parameter type="gint" name="y);void"/><parameter type="gint" name="n);void"/><parameter type="gint" name="x"/><parameter type="gint" name="y);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gboolean" name="is_editable);void"/><parameter type="gint" name="x"/><parameter type="gint" name="y);void"/><parameter type="gint" name="n);void"/><parameter type="gint" name="x"/><parameter type="gint" name="y);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="move_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gint" name="x"/><parameter type="gint" name="y);void"/><parameter type="gint" name="n);void"/><parameter type="gint" name="x"/><parameter type="gint" name="y);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="move_word" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gint" name="n);void"/><parameter type="gint" name="x"/><parameter type="gint" name="y);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="move_page" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gint" name="x"/><parameter type="gint" name="y);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="move_to_row" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gint" name="row);void"/><parameter type="gint" name="row);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="move_to_column" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gint" name="row);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="kill_char" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="kill_word" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="kill_line" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable"/><parameter type="gint" name="direction);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="cut_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="copy_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><signal name="paste_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOldEditable*" name="editable);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);gchar*"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="start_pos"/><parameter type="gint" name="end_pos);void"/><parameter type="gint" name="position"/></parameters></signal><method name="changed" cname="gtk_old_editable_changed"><return-type type="void"/></method><method name="claim_selection" cname="gtk_old_editable_claim_selection"><return-type type="void"/></method></object><object name="OptionMenu" cname="GtkOptionMenu" parent="GtkButton"><field cname="menu" type="GtkWidget*"/><field cname="menu_item" type="GtkWidget*"/><field cname="width" type="guint16"/><field cname="height" type="guint16"/><signal name="changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkOptionMenu*" name="option_menu"/></parameters></signal><property name="Menu" cname="menu" type="GtkMenu" doc-string=" _(The menu of options)" readable="true" writeable="true"/><method name="set_history" cname="gtk_option_menu_set_history"><return-type type="void"/></method><method name="remove_menu" cname="gtk_option_menu_remove_menu"><return-type type="void"/></method><method name="get_menu" cname="gtk_option_menu_get_menu"><return-type type="GtkWidget*"/></method><method name="set_menu" cname="gtk_option_menu_set_menu"><return-type type="void"/></method><constructor cname="gtk_option_menu_new"/><method name="get_history" cname="gtk_option_menu_get_history"><return-type type="gint"/></method></object><object name="Paned" cname="GtkPaned" parent="GtkContainer"><field cname="child1" type="GtkWidget*"/><field cname="child2" type="GtkWidget*"/><field cname="handle" type="GdkWindow*"/><field cname="xor_gc" type="GdkGC*"/><field cname="cursor_type" type="GdkCursorType"/><field cname="handle_pos" type="GdkRectangle"/><field cname="child1_size" type="gint"/><field cname="last_allocation" type="gint"/><field cname="min_position" type="gint"/><field cname="max_position" type="gint"/><field cname="position_set" bits="1" type="guint"/><field cname="in_drag" bits="1" type="guint"/><field cname="child1_shrink" bits="1" type="guint"/><field cname="child1_resize" bits="1" type="guint"/><field cname="child2_shrink" bits="1" type="guint"/><field cname="child2_resize" bits="1" type="guint"/><field cname="orientation" bits="1" type="guint"/><property name="Position" cname="position" type="gint" doc-string=" _(Position of paned separator in pixels (0 means all the way to the left/top))" readable="true" writeable="true"/><property name="PositionSet" cname="position_set" type="gboolean" doc-string=" _(TRUE if the Position property should be used)" readable="true" writeable="true"/><method name="add1" cname="gtk_paned_add1"><return-type type="void"/></method><method name="add2" cname="gtk_paned_add2"><return-type type="void"/></method><method name="get_position" cname="gtk_paned_get_position"><return-type type="gint"/></method><method name="compute_position" cname="gtk_paned_compute_position"><return-type type="void"/></method><method name="pack1" cname="gtk_paned_pack1"><return-type type="void"/></method><method name="pack2" cname="gtk_paned_pack2"><return-type type="void"/></method><method name="set_position" cname="gtk_paned_set_position"><return-type type="void"/></method></object><object name="Pixmap" cname="GtkPixmap" parent="GtkMisc"><field cname="pixmap" type="GdkPixmap*"/><field cname="mask" type="GdkBitmap*"/><field cname="pixmap_insensitive" type="GdkPixmap*"/><field cname="build_insensitive" bits="1" type="guint"/><method name="set" cname="gtk_pixmap_set"><return-type type="void"/></method><method name="set_build_insensitive" cname="gtk_pixmap_set_build_insensitive"><return-type type="void"/></method><constructor cname="gtk_pixmap_new"/><method name="get" cname="gtk_pixmap_get"><return-type type="void"/></method></object><object name="Plug" cname="GtkPlug" parent="GtkWindow"><field cname="socket_window" type="GdkWindow*"/><field cname="modality_window" type="GtkWidget*"/><field cname="modality_group" type="GtkWindowGroup*"/><field cname="same_app" bits="1" type="guint"/><signal name="embedded" when="LAST"><return-type type="void"/><parameters><parameter type="GtkPlug*" name="plug"/></parameters></signal><method name="get_id" cname="gtk_plug_get_id"><return-type type="GdkNativeWindow"/></method><constructor cname="gtk_plug_new"/><method name="construct" cname="gtk_plug_construct"><return-type type="void"/></method><method name="remove_from_socket" cname="_gtk_plug_remove_from_socket"><return-type type="void"/></method><method name="add_to_socket" cname="_gtk_plug_add_to_socket"><return-type type="void"/></method></object><object name="Preview" cname="GtkPreview" parent="GtkWidget"><field cname="buffer" type="guchar*"/><field cname="buffer_width" type="guint16"/><field cname="buffer_height" type="guint16"/><field cname="bpp" type="guint16"/><field cname="rowstride" type="guint16"/><field cname="dither" type="GdkRgbDither"/><field cname="type" bits="1" type="guint"/><field cname="expand" bits="1" type="guint"/><property name="Expand" cname="expand" type="gboolean" doc-string=" _(Whether the preview widget should take up the entire space it is allocated)" readable="true" writeable="true"/><method name="draw_row" cname="gtk_preview_draw_row"><return-type type="void"/></method><method name="set_dither" cname="gtk_preview_set_dither"><return-type type="void"/></method><method name="put" cname="gtk_preview_put"><return-type type="void"/></method><method name="set_expand" cname="gtk_preview_set_expand"><return-type type="void"/></method><method name="size" cname="gtk_preview_size"><return-type type="void"/></method><constructor cname="gtk_preview_new"/></object><object name="Progress" cname="GtkProgress" parent="GtkWidget"><field cname="adjustment" type="GtkAdjustment*"/><field cname="offscreen_pixmap" type="GdkPixmap*"/><field cname="format" type="gchar*"/><field cname="x_align" type="gfloat"/><field cname="y_align" type="gfloat"/><field cname="show_text" bits="1" type="guint"/><field cname="activity_mode" bits="1" type="guint"/><field cname="use_text_format" bits="1" type="guint"/><property name="ActivityMode" cname="activity_mode" type="gboolean" doc-string=" _(If true the GtkProgress is in activity mode, meaning that is signals something is happening, but not how much of the activity is finished. This is used when you're doing something that you don't know how long it will take.)" readable="true" writeable="true"/><property name="ShowText" cname="show_text" type="gboolean" doc-string=" _(Whether the progress is shown as text)" readable="true" writeable="true"/><property name="TextXalign" cname="text_xalign" type="gfloat" doc-string=" _(A number between 0.0 and 1.0 specifying the horizontal alignment of the text in the progresswidget)" readable="true" writeable="true"/><property name="TextYalign" cname="text_yalign" type="gfloat" doc-string=" _(A number between 0.0 and 1.0 specifying the vertical alignment of the text in the progress widget)" readable="true" writeable="true"/></object><object name="ProgressBar" cname="GtkProgressBar" parent="GtkProgress"><field cname="bar_style" type="GtkProgressBarStyle"/><field cname="orientation" type="GtkProgressBarOrientation"/><field cname="blocks" type="guint"/><field cname="in_block" type="gint"/><field cname="activity_pos" type="gint"/><field cname="activity_step" type="guint"/><field cname="activity_blocks" type="guint"/><field cname="pulse_fraction" type="gdouble"/><field cname="activity_dir" bits="1" type="guint"/><property name="Adjustment" cname="adjustment" type="GtkAdjustment" doc-string=" _(The GtkAdjustment connected to the progress bar (Deprecated))" readable="true" writeable="true"/><property name="Orientation" cname="orientation" type="GtkProgressBarOrientation" doc-string=" _(Orientation and growth of the progress bar)" readable="true" writeable="true"/><property name="BarStyle" cname="bar_style" type="GtkProgressBarStyle" doc-string=" _(Specifies the visual style of the bar in percentage mode (Deprecated))" readable="true" writeable="true"/><property name="ActivityStep" cname="activity_step" type="guint" doc-string=" _(The increment used for each iteration in activity mode (Deprecated))" readable="true" writeable="true"/><property name="ActivityBlocks" cname="activity_blocks" type="guint" doc-string=" _(The number of blocks which can fit in the progress bar area in activity mode (Deprecated))" readable="true" writeable="true"/><property name="DiscreteBlocks" cname="discrete_blocks" type="guint" doc-string=" _(The number of discrete blocks in a progress bar (when shown in the discrete style))" readable="true" writeable="true"/><property name="Fraction" cname="fraction" type="gdouble" doc-string=" _(The fraction of total work that has been completed)" readable="true" writeable="true"/><property name="PulseStep" cname="pulse_step" type="gdouble" doc-string=" _(The fraction of total progress to move the bouncing block when pulsed)" readable="true" writeable="true"/><property name="Text" cname="text" type="gchar*" doc-string=" _(Text to be displayed in the progress bar)" readable="true" writeable="true"/><constructor cname="gtk_progress_bar_new"/><method name="get_fraction" cname="gtk_progress_bar_get_fraction"><return-type type="gdouble"/></method><method name="get_pulse_step" cname="gtk_progress_bar_get_pulse_step"><return-type type="gdouble"/></method><method name="set_text" cname="gtk_progress_bar_set_text"><return-type type="void"/></method><method name="set_pulse_step" cname="gtk_progress_bar_set_pulse_step"><return-type type="void"/></method><method name="set_fraction" cname="gtk_progress_bar_set_fraction"><return-type type="void"/></method><method name="set_orientation" cname="gtk_progress_bar_set_orientation"><return-type type="void"/></method><method name="pulse" cname="gtk_progress_bar_pulse"><return-type type="void"/></method><method name="get_orientation" cname="gtk_progress_bar_get_orientation"><return-type type="GtkProgressBarOrientation"/></method><method name="get_text" cname="gtk_progress_bar_get_text"><return-type type="const-gchar*"/></method></object><object name="RadioButton" cname="GtkRadioButton" parent="GtkCheckButton"><field cname="group" type="GSList*"/><method name="set_group" cname="gtk_radio_button_set_group"><return-type type="void"/></method><method name="new_from_widget" cname="gtk_radio_button_new_from_widget"><return-type type="GtkWidget*"/></method><method name="new_with_mnemonic_from_widget" cname="gtk_radio_button_new_with_mnemonic_from_widget"><return-type type="GtkWidget*"/></method><method name="get_group" cname="gtk_radio_button_get_group"><return-type type="GSList*"/></method><constructor cname="gtk_radio_button_new_with_label"/><constructor cname="gtk_radio_button_new_with_mnemonic"/><constructor cname="gtk_radio_button_new"/><method name="new_with_label_from_widget" cname="gtk_radio_button_new_with_label_from_widget"><return-type type="GtkWidget*"/></method></object><object name="RadioMenuItem" cname="GtkRadioMenuItem" parent="GtkCheckMenuItem"><field cname="group" type="GSList*"/><method name="get_group" cname="gtk_radio_menu_item_get_group"><return-type type="GSList*"/></method><constructor cname="gtk_radio_menu_item_new_with_label"/><constructor cname="gtk_radio_menu_item_new_with_mnemonic"/><constructor cname="gtk_radio_menu_item_new"/><method name="set_group" cname="gtk_radio_menu_item_set_group"><return-type type="void"/></method></object><object name="Range" cname="GtkRange" parent="GtkWidget"><field cname="adjustment" type="GtkAdjustment*"/><field cname="update_policy" type="GtkUpdateType"/><field cname="inverted" bits="1" type="guint"/><field cname="flippable" bits="1" type="guint"/><field cname="has_stepper_a" bits="1" type="guint"/><field cname="has_stepper_b" bits="1" type="guint"/><field cname="has_stepper_c" bits="1" type="guint"/><field cname="has_stepper_d" bits="1" type="guint"/><field cname="need_recalc" bits="1" type="guint"/><field cname="slider_size_fixed" bits="1" type="guint"/><field cname="min_slider_size" type="gint"/><field cname="orientation" type="GtkOrientation"/><field cname="range_rect" type="GdkRectangle"/><field cname="slider_start" type="gint"/><field cname="slider_end" type="gint"/><field cname="round_digits" type="gint"/><field cname="trough_click_forward" bits="1" type="guint"/><field cname="update_pending" bits="1" type="guint"/><field cname="layout" type="GtkRangeLayout*"/><field cname="timer" type="GtkRangeStepTimer*"/><field cname="slide_initial_slider_position" type="gint"/><field cname="slide_initial_coordinate" type="gint"/><field cname="update_timeout_id" type="guint"/><field cname="event_window" type="GdkWindow*"/><signal name="value_changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkRange*" name="range);void"/><parameter type="GtkScrollType" name="scroll);void"/><parameter type="GtkBorder*" name="border"/></parameters></signal><signal name="move_slider" when="LAST"><return-type type="void"/><parameters><parameter type="GtkRange*" name="range"/><parameter type="GtkScrollType" name="scroll);void"/><parameter type="GtkBorder*" name="border"/></parameters></signal><property name="UpdatePolicy" cname="update_policy" type="GtkUpdateType" doc-string=" _(How the range should be updated on the screen)" readable="true" writeable="true"/><property name="Adjustment" cname="adjustment" type="GtkAdjustment" doc-string=" _(The GtkAdjustment that contains the current value of this range object)" readable="true" writeable="true" construct-only="true"/><property name="Inverted" cname="inverted" type="gboolean" doc-string=" _(Invert direction slider moves to increase range value)" readable="true" writeable="true"/><method name="get_adjustment" cname="gtk_range_get_adjustment"><return-type type="GtkAdjustment*"/></method><method name="set_adjustment" cname="gtk_range_set_adjustment"><return-type type="void"/></method><method name="set_value" cname="gtk_range_set_value"><return-type type="void"/></method><method name="set_inverted" cname="gtk_range_set_inverted"><return-type type="void"/></method><method name="set_update_policy" cname="gtk_range_set_update_policy"><return-type type="void"/></method><method name="get_value" cname="gtk_range_get_value"><return-type type="gdouble"/></method><method name="set_range" cname="gtk_range_set_range"><return-type type="void"/></method><method name="get_update_policy" cname="gtk_range_get_update_policy"><return-type type="GtkUpdateType"/></method><method name="set_increments" cname="gtk_range_set_increments"><return-type type="void"/></method><method name="get_inverted" cname="gtk_range_get_inverted"><return-type type="gboolean"/></method></object><object name="RcStyle" cname="GtkRcStyle" parent="GObject"><field cname="name" type="gchar*"/><field cname="bg_pixmap_name" array_len="5" type="gchar*"/><field cname="font_desc" type="PangoFontDescription*"/><field cname="color_flags" array_len="5" type="GtkRcFlags"/><field cname="fg" array_len="5" type="GdkColor"/><field cname="bg" array_len="5" type="GdkColor"/><field cname="text" array_len="5" type="GdkColor"/><field cname="base" array_len="5" type="GdkColor"/><field cname="xthickness" type="gint"/><field cname="ythickness" type="gint"/><field cname="rc_properties" type="GArray*"/><field cname="rc_style_lists" type="GSList*"/><field cname="icon_factories" type="GSList*"/><method name="unref" cname="gtk_rc_style_unref"><return-type type="void"/></method><method name="copy" cname="gtk_rc_style_copy"><return-type type="GtkRcStyle*"/></method><method name="lookup_rc_property" cname="_gtk_rc_style_lookup_rc_property"><return-type type="const-GtkRcProperty*"/></method><constructor cname="gtk_rc_style_new"/><method name="ref" cname="gtk_rc_style_ref"><return-type type="void"/></method></object><object name="Ruler" cname="GtkRuler" parent="GtkWidget"><field cname="backing_store" type="GdkPixmap*"/><field cname="non_gr_exp_gc" type="GdkGC*"/><field cname="metric" type="GtkRulerMetric*"/><field cname="xsrc" type="gint"/><field cname="ysrc" type="gint"/><field cname="slider_size" type="gint"/><field cname="lower" type="gdouble"/><field cname="upper" type="gdouble"/><field cname="position" type="gdouble"/><field cname="max_size" type="gdouble"/><property name="Lower" cname="lower" type="gdouble" doc-string=" _(Lower limit of ruler)" readable="true" writeable="true"/><property name="Upper" cname="upper" type="gdouble" doc-string=" _(Upper limit of ruler)" readable="true" writeable="true"/><property name="Position" cname="position" type="gdouble" doc-string=" _(Position of mark on the ruler)" readable="true" writeable="true"/><property name="MaxSize" cname="max_size" type="gdouble" doc-string=" _(Maximum size of the ruler)" readable="true" writeable="true"/><method name="draw_pos" cname="gtk_ruler_draw_pos"><return-type type="void"/></method><method name="set_metric" cname="gtk_ruler_set_metric"><return-type type="void"/></method><method name="set_range" cname="gtk_ruler_set_range"><return-type type="void"/></method><method name="draw_ticks" cname="gtk_ruler_draw_ticks"><return-type type="void"/></method><method name="get_range" cname="gtk_ruler_get_range"><return-type type="void"/></method><method name="get_metric" cname="gtk_ruler_get_metric"><return-type type="GtkMetricType"/></method></object><object name="Scale" cname="GtkScale" parent="GtkRange"><field cname="digits" type="gint"/><field cname="draw_value" bits="1" type="guint"/><field cname="value_pos" bits="2" type="guint"/><signal name="format_value" when="LAST"><return-type type="gchar*"/><parameters><parameter type="GtkScale*" name="scale"/><parameter type="gdouble" name="value);"/></parameters></signal><property name="Digits" cname="digits" type="gint" doc-string=" _(The number of decimal places that are displayed in the value)" readable="true" writeable="true"/><property name="DrawValue" cname="draw_value" type="gboolean" doc-string=" _(Whether the current value is displayed as a string next to the slider)" readable="true" writeable="true"/><property name="ValuePos" cname="value_pos" type="GtkPositionType" doc-string=" _(The position in which the current value is displayed)" readable="true" writeable="true"/><method name="set_draw_value" cname="gtk_scale_set_draw_value"><return-type type="void"/></method><method name="set_value_pos" cname="gtk_scale_set_value_pos"><return-type type="void"/></method><method name="set_digits" cname="gtk_scale_set_digits"><return-type type="void"/></method><method name="get_value_pos" cname="gtk_scale_get_value_pos"><return-type type="GtkPositionType"/></method><method name="get_value_size" cname="_gtk_scale_get_value_size"><return-type type="void"/></method><method name="get_digits" cname="gtk_scale_get_digits"><return-type type="gint"/></method><method name="get_draw_value" cname="gtk_scale_get_draw_value"><return-type type="gboolean"/></method><method name="format_value" cname="_gtk_scale_format_value"><return-type type="gchar*"/></method></object><object name="Scrollbar" cname="GtkScrollbar" parent="GtkRange"/><object name="ScrolledWindow" cname="GtkScrolledWindow" parent="GtkBin"><field cname="hscrollbar" type="GtkWidget*"/><field cname="vscrollbar" type="GtkWidget*"/><field cname="hscrollbar_policy" bits="2" type="guint"/><field cname="vscrollbar_policy" bits="2" type="guint"/><field cname="hscrollbar_visible" bits="1" type="guint"/><field cname="vscrollbar_visible" bits="1" type="guint"/><field cname="window_placement" bits="2" type="guint"/><field cname="shadow_type" type="guint16"/><property name="Hadjustment" cname="hadjustment" type="GtkAdjustment" doc-string=" _(The GtkAdjustment for the horizontal position.)" readable="true" writeable="true" construct-only="true"/><property name="Vadjustment" cname="vadjustment" type="GtkAdjustment" doc-string=" _(The GtkAdjustment for the vertical position.)" readable="true" writeable="true" construct-only="true"/><property name="HscrollbarPolicy" cname="hscrollbar_policy" type="GtkPolicyType" doc-string=" _(When the horizontal scrollbar is displayed)" readable="true" writeable="true"/><property name="VscrollbarPolicy" cname="vscrollbar_policy" type="GtkPolicyType" doc-string=" _(When the vertical scrollbar is displayed)" readable="true" writeable="true"/><property name="WindowPlacement" cname="window_placement" type="GtkCornerType" doc-string=" _(Where the contents are located with respect to the scrollbars)" readable="true" writeable="true"/><property name="ShadowType" cname="shadow_type" type="GtkShadowType" doc-string=" _(Style of bevel around the contents)" readable="true" writeable="true"/><method name="set_policy" cname="gtk_scrolled_window_set_policy"><return-type type="void"/></method><method name="set_placement" cname="gtk_scrolled_window_set_placement"><return-type type="void"/></method><method name="set_shadow_type" cname="gtk_scrolled_window_set_shadow_type"><return-type type="void"/></method><method name="set_hadjustment" cname="gtk_scrolled_window_set_hadjustment"><return-type type="void"/></method><method name="set_vadjustment" cname="gtk_scrolled_window_set_vadjustment"><return-type type="void"/></method><method name="add_with_viewport" cname="gtk_scrolled_window_add_with_viewport"><return-type type="void"/></method><method name="get_shadow_type" cname="gtk_scrolled_window_get_shadow_type"><return-type type="GtkShadowType"/></method><method name="get_placement" cname="gtk_scrolled_window_get_placement"><return-type type="GtkCornerType"/></method><constructor cname="gtk_scrolled_window_new"/><method name="get_hadjustment" cname="gtk_scrolled_window_get_hadjustment"><return-type type="GtkAdjustment*"/></method><method name="get_policy" cname="gtk_scrolled_window_get_policy"><return-type type="void"/></method><method name="get_vadjustment" cname="gtk_scrolled_window_get_vadjustment"><return-type type="GtkAdjustment*"/></method></object><object name="Separator" cname="GtkSeparator" parent="GtkWidget"/><object name="SeparatorMenuItem" cname="GtkSeparatorMenuItem" parent="GtkMenuItem"><constructor cname="gtk_separator_menu_item_new"/></object><object name="Settings" cname="GtkSettings" parent="GObject"><field cname="queued_settings" type="GData*"/><field cname="property_values" type="GValue*"/><field cname="rc_context" type="GtkRcContext*"/><method name="set_double_property" cname="gtk_settings_set_double_property"><return-type type="void"/></method><method name="set_string_property" cname="gtk_settings_set_string_property"><return-type type="void"/></method><method name="set_long_property" cname="gtk_settings_set_long_property"><return-type type="void"/></method><method name="set_property_value" cname="gtk_settings_set_property_value"><return-type type="void"/></method></object><object name="SizeGroup" cname="GtkSizeGroup" parent="GObject"><field cname="widgets" type="GSList*"/><field cname="mode" type="guint8"/><field cname="have_width" bits="1" type="guint"/><field cname="have_height" bits="1" type="guint"/><field cname="requisition" type="GtkRequisition"/><property name="Mode" cname="mode" type="GtkSizeGroupMode" doc-string=" _(The the directions in which the size group effects the requested sizes of its component widgets.)" readable="true" writeable="true"/><method name="get_mode" cname="gtk_size_group_get_mode"><return-type type="GtkSizeGroupMode"/></method><method name="remove_widget" cname="gtk_size_group_remove_widget"><return-type type="void"/></method><method name="set_mode" cname="gtk_size_group_set_mode"><return-type type="void"/></method><method name="add_widget" cname="gtk_size_group_add_widget"><return-type type="void"/></method><constructor cname="gtk_size_group_new"/></object><object name="Socket" cname="GtkSocket" parent="GtkContainer"><field cname="request_width" type="guint16"/><field cname="request_height" type="guint16"/><field cname="current_width" type="guint16"/><field cname="current_height" type="guint16"/><field cname="plug_window" type="GdkWindow*"/><field cname="plug_widget" type="GtkWidget*"/><field cname="xembed_version" type="gshort"/><field cname="same_app" bits="1" type="guint"/><field cname="focus_in" bits="1" type="guint"/><field cname="have_size" bits="1" type="guint"/><field cname="need_map" bits="1" type="guint"/><field cname="is_mapped" bits="1" type="guint"/><field cname="grabbed_keys" type="GHashTable*"/><field cname="toplevel" type="GtkWidget*"/><signal name="plug_added" when="LAST"><return-type type="void"/><parameters><parameter type="GtkSocket*" name="socket);gboolean"/></parameters></signal><signal name="plug_removed" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkSocket*" name="socket"/></parameters></signal><method name="add_id" cname="gtk_socket_add_id"><return-type type="void"/></method><constructor cname="gtk_socket_new"/><method name="get_id" cname="gtk_socket_get_id"><return-type type="GdkNativeWindow"/></method></object><object name="SpinButton" cname="GtkSpinButton" parent="GtkEntry"><field cname="adjustment" type="GtkAdjustment*"/><field cname="panel" type="GdkWindow*"/><field cname="timer" type="guint32"/><field cname="ev_time" type="guint32"/><field cname="climb_rate" type="gdouble"/><field cname="timer_step" type="gdouble"/><field cname="update_policy" type="GtkSpinButtonUpdatePolicy"/><field cname="in_child" bits="2" type="guint"/><field cname="click_child" bits="2" type="guint"/><field cname="button" bits="2" type="guint"/><field cname="need_timer" bits="1" type="guint"/><field cname="timer_calls" bits="3" type="guint"/><field cname="digits" bits="10" type="guint"/><field cname="numeric" bits="1" type="guint"/><field cname="wrap" bits="1" type="guint"/><field cname="snap_to_ticks" bits="1" type="guint"/><property name="Adjustment" cname="adjustment" type="GtkAdjustment" doc-string=" _(The adjustment that holds the value of the spinbutton)" readable="true" writeable="true"/><property name="ClimbRate" cname="climb_rate" type="gdouble" doc-string=" _(The acceleration rate when you hold down a button)" readable="true" writeable="true"/><property name="Digits" cname="digits" type="guint" doc-string=" _(The number of decimal places to display)" readable="true" writeable="true"/><property name="SnapToTicks" cname="snap_to_ticks" type="gboolean" doc-string=" _(Whether erroneous values are automatically changed to a spin button's nearest step increment)" readable="true" writeable="true"/><property name="Numeric" cname="numeric" type="gboolean" doc-string=" _(Whether non-numeric characters should be ignored)" readable="true" writeable="true"/><property name="Wrap" cname="wrap" type="gboolean" doc-string=" _(Whether a spin button should wrap upon reaching its limits)" readable="true" writeable="true"/><property name="UpdatePolicy" cname="update_policy" type="GtkSpinButtonUpdatePolicy" doc-string=" _(Whether the spin button should update always, or only when the value is legal)" readable="true" writeable="true"/><property name="Value" cname="value" type="gdouble" doc-string=" _(Reads the current value, or sets a new value)" readable="true" writeable="true"/><signal name="input" when="LAST"><return-type type="gint"/><parameters><parameter type="GtkSpinButton*" name="spin_button"/><parameter type="gdouble*" name="new_value);gint"/></parameters></signal><signal name="output" when="LAST"><return-type type="gint"/><parameters><parameter type="GtkSpinButton*" name="spin_button);void"/></parameters></signal><signal name="value_changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkSpinButton*" name="spin_button"/></parameters></signal><method name="get_digits" cname="gtk_spin_button_get_digits"><return-type type="guint"/></method><method name="set_numeric" cname="gtk_spin_button_set_numeric"><return-type type="void"/></method><method name="set_snap_to_ticks" cname="gtk_spin_button_set_snap_to_ticks"><return-type type="void"/></method><method name="get_value_as_int" cname="gtk_spin_button_get_value_as_int"><return-type type="gint"/></method><method name="get_update_policy" cname="gtk_spin_button_get_update_policy"><return-type type="GtkSpinButtonUpdatePolicy"/></method><method name="set_value" cname="gtk_spin_button_set_value"><return-type type="void"/></method><method name="get_adjustment" cname="gtk_spin_button_get_adjustment"><return-type type="GtkAdjustment*"/></method><method name="set_adjustment" cname="gtk_spin_button_set_adjustment"><return-type type="void"/></method><method name="get_value" cname="gtk_spin_button_get_value"><return-type type="gdouble"/></method><method name="set_range" cname="gtk_spin_button_set_range"><return-type type="void"/></method><method name="get_wrap" cname="gtk_spin_button_get_wrap"><return-type type="gboolean"/></method><method name="get_snap_to_ticks" cname="gtk_spin_button_get_snap_to_ticks"><return-type type="gboolean"/></method><method name="set_digits" cname="gtk_spin_button_set_digits"><return-type type="void"/></method><method name="configure" cname="gtk_spin_button_configure"><return-type type="void"/></method><method name="get_range" cname="gtk_spin_button_get_range"><return-type type="void"/></method><method name="get_numeric" cname="gtk_spin_button_get_numeric"><return-type type="gboolean"/></method><method name="update" cname="gtk_spin_button_update"><return-type type="void"/></method><method name="set_update_policy" cname="gtk_spin_button_set_update_policy"><return-type type="void"/></method><method name="get_increments" cname="gtk_spin_button_get_increments"><return-type type="void"/></method><method name="set_wrap" cname="gtk_spin_button_set_wrap"><return-type type="void"/></method><constructor cname="gtk_spin_button_new"/><method name="spin" cname="gtk_spin_button_spin"><return-type type="void"/></method><constructor cname="gtk_spin_button_new_with_range"/><method name="set_increments" cname="gtk_spin_button_set_increments"><return-type type="void"/></method></object><object name="Statusbar" cname="GtkStatusbar" parent="GtkHBox"><field cname="frame" type="GtkWidget*"/><field cname="label" type="GtkWidget*"/><field cname="messages" type="GSList*"/><field cname="keys" type="GSList*"/><field cname="seq_context_id" type="guint"/><field cname="seq_message_id" type="guint"/><field cname="grip_window" type="GdkWindow*"/><field cname="has_resize_grip" bits="1" type="guint"/><signal name="text_pushed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkStatusbar*" name="statusbar"/><parameter type="guint" name="context_id"/><parameter type="const-gchar*" name="text);void"/><parameter type="guint" name="context_id"/><parameter type="const-gchar*" name="text"/></parameters></signal><signal name="text_popped" when="LAST"><return-type type="void"/><parameters><parameter type="GtkStatusbar*" name="statusbar"/><parameter type="guint" name="context_id"/><parameter type="const-gchar*" name="text"/></parameters></signal><method name="get_has_resize_grip" cname="gtk_statusbar_get_has_resize_grip"><return-type type="gboolean"/></method><method name="set_has_resize_grip" cname="gtk_statusbar_set_has_resize_grip"><return-type type="void"/></method><constructor cname="gtk_statusbar_new"/><method name="push" cname="gtk_statusbar_push"><return-type type="guint"/></method><method name="pop" cname="gtk_statusbar_pop"><return-type type="void"/></method><method name="get_context_id" cname="gtk_statusbar_get_context_id"><return-type type="guint"/></method><method name="remove" cname="gtk_statusbar_remove"><return-type type="void"/></method></object><object name="Style" cname="GtkStyle" parent="GObject"><field cname="fg" array_len="5" type="GdkColor"/><field cname="bg" array_len="5" type="GdkColor"/><field cname="light" array_len="5" type="GdkColor"/><field cname="dark" array_len="5" type="GdkColor"/><field cname="mid" array_len="5" type="GdkColor"/><field cname="text" array_len="5" type="GdkColor"/><field cname="base" array_len="5" type="GdkColor"/><field cname="text_aa" array_len="5" type="GdkColor"/><field cname="black" type="GdkColor"/><field cname="white" type="GdkColor"/><field cname="font_desc" type="PangoFontDescription*"/><field cname="xthickness" type="gint"/><field cname="ythickness" type="gint"/><field cname="fg_gc" array_len="5" type="GdkGC*"/><field cname="bg_gc" array_len="5" type="GdkGC*"/><field cname="light_gc" array_len="5" type="GdkGC*"/><field cname="dark_gc" array_len="5" type="GdkGC*"/><field cname="mid_gc" array_len="5" type="GdkGC*"/><field cname="text_gc" array_len="5" type="GdkGC*"/><field cname="base_gc" array_len="5" type="GdkGC*"/><field cname="text_aa_gc" array_len="5" type="GdkGC*"/><field cname="black_gc" type="GdkGC*"/><field cname="white_gc" type="GdkGC*"/><field cname="bg_pixmap" array_len="5" type="GdkPixmap*"/><field cname="attach_count" type="gint"/><field cname="depth" type="gint"/><field cname="colormap" type="GdkColormap*"/><field cname="private_font" type="GdkFont*"/><field cname="private_font_desc" type="PangoFontDescription*"/><field cname="rc_style" type="GtkRcStyle*"/><field cname="styles" type="GSList*"/><field cname="property_cache" type="GArray*"/><field cname="icon_factories" type="GSList*"/><method name="render_icon" cname="gtk_style_render_icon"><return-type type="GdkPixbuf*"/></method><method name="set_background" cname="gtk_style_set_background"><return-type type="void"/></method><method name="detach" cname="gtk_style_detach"><return-type type="void"/></method><method name="lookup_icon_set" cname="gtk_style_lookup_icon_set"><return-type type="GtkIconSet*"/></method><method name="apply_default_background" cname="gtk_style_apply_default_background"><return-type type="void"/></method><method name="copy" cname="gtk_style_copy"><return-type type="GtkStyle*"/></method><constructor cname="gtk_style_new"/><method name="peek_property_value" cname="_gtk_style_peek_property_value"><return-type type="const-GValue*"/></method><method name="attach" cname="gtk_style_attach"><return-type type="GtkStyle*"/></method></object><object name="Table" cname="GtkTable" parent="GtkContainer"><field cname="children" type="GList*"/><field cname="rows" type="GtkTableRowCol*"/><field cname="cols" type="GtkTableRowCol*"/><field cname="nrows" type="guint16"/><field cname="ncols" type="guint16"/><field cname="column_spacing" type="guint16"/><field cname="row_spacing" type="guint16"/><field cname="homogeneous" bits="1" type="guint"/><property name="NRows" cname="n_rows" type="guint" doc-string=" _(The number of rows in the table)" readable="true" writeable="true"/><property name="NColumns" cname="n_columns" type="guint" doc-string=" _(The number of columns in the table)" readable="true" writeable="true"/><property name="RowSpacing" cname="row_spacing" type="guint" doc-string=" _(The amount of space between two consecutive rows)" readable="true" writeable="true"/><property name="ColumnSpacing" cname="column_spacing" type="guint" doc-string=" _(The amount of space between two consecutive columns)" readable="true" writeable="true"/><property name="Homogeneous" cname="homogeneous" type="gboolean" doc-string=" _(If TRUE this means the table cells are all the same width/height)" readable="true" writeable="true"/><method name="set_homogeneous" cname="gtk_table_set_homogeneous"><return-type type="void"/></method><method name="set_row_spacings" cname="gtk_table_set_row_spacings"><return-type type="void"/></method><method name="get_default_col_spacing" cname="gtk_table_get_default_col_spacing"><return-type type="guint"/></method><method name="set_row_spacing" cname="gtk_table_set_row_spacing"><return-type type="void"/></method><method name="get_homogeneous" cname="gtk_table_get_homogeneous"><return-type type="gboolean"/></method><method name="get_row_spacing" cname="gtk_table_get_row_spacing"><return-type type="guint"/></method><method name="set_col_spacing" cname="gtk_table_set_col_spacing"><return-type type="void"/></method><method name="attach" cname="gtk_table_attach"><return-type type="void"/></method><constructor cname="gtk_table_new"/><method name="attach_defaults" cname="gtk_table_attach_defaults"><return-type type="void"/></method><method name="get_col_spacing" cname="gtk_table_get_col_spacing"><return-type type="guint"/></method><method name="set_col_spacings" cname="gtk_table_set_col_spacings"><return-type type="void"/></method><method name="get_default_row_spacing" cname="gtk_table_get_default_row_spacing"><return-type type="guint"/></method><method name="resize" cname="gtk_table_resize"><return-type type="void"/></method></object><object name="TearoffMenuItem" cname="GtkTearoffMenuItem" parent="GtkMenuItem"><field cname="torn_off" bits="1" type="guint"/><constructor cname="gtk_tearoff_menu_item_new"/></object><object name="Text" cname="GtkText" parent="GtkOldEditable"><field cname="text_area" type="GdkWindow*"/><field cname="hadj" type="GtkAdjustment*"/><field cname="vadj" type="GtkAdjustment*"/><field cname="gc" type="GdkGC*"/><field cname="line_wrap_bitmap" type="GdkPixmap*"/><field cname="line_arrow_bitmap" type="GdkPixmap*"/><field cname="{ GdkWChar* wc" type="union"/><field cname="ch" type="guchar*"/><field cname="text" type="}"/><field cname="text_len" type="guint"/><field cname="gap_position" type="guint"/><field cname="gap_size" type="guint"/><field cname="text_end" type="guint"/><field cname="line_start_cache" type="GList*"/><field cname="first_line_start_index" type="guint"/><field cname="first_cut_pixels" type="guint"/><field cname="first_onscreen_hor_pixel" type="guint"/><field cname="first_onscreen_ver_pixel" type="guint"/><field cname="line_wrap" bits="1" type="guint"/><field cname="word_wrap" bits="1" type="guint"/><field cname="use_wchar" bits="1" type="guint"/><field cname="freeze_count" type="guint"/><field cname="text_properties" type="GList*"/><field cname="text_properties_end" type="GList*"/><field cname="point" type="GtkPropertyMark"/><field cname="{ GdkWChar* wc" type="union"/><field cname="ch" type="guchar*"/><field cname="scratch_buffer" type="}"/><field cname="scratch_buffer_len" type="guint"/><field cname="last_ver_value" type="gint"/><field cname="cursor_pos_x" type="gint"/><field cname="cursor_pos_y" type="gint"/><field cname="cursor_mark" type="GtkPropertyMark"/><field cname="cursor_char" type="GdkWChar"/><field cname="cursor_char_offset" type="gchar"/><field cname="cursor_virtual_x" type="gint"/><field cname="cursor_drawn_level" type="gint"/><field cname="current_line" type="GList*"/><field cname="tab_stops" type="GList*"/><field cname="default_tab_width" type="gint"/><field cname="current_font" type="GtkTextFont*"/><field cname="timer" type="gint"/><field cname="button" type="guint"/><field cname="bg_gc" type="GdkGC*"/><property name="Hadjustment" cname="hadjustment" type="GtkAdjustment" doc-string=" _(Horizontal adjustment for the text widget)" readable="true" writeable="true"/><property name="Vadjustment" cname="vadjustment" type="GtkAdjustment" doc-string=" _(Vertical adjustment for the text widget)" readable="true" writeable="true"/><property name="LineWrap" cname="line_wrap" type="gboolean" doc-string=" _(Whether lines are wrapped at widget edges)" readable="true" writeable="true"/><property name="WordWrap" cname="word_wrap" type="gboolean" doc-string=" _(Whether words are wrapped at widget edges)" readable="true" writeable="true"/><signal name="set_scroll_adjustments" when="LAST"><return-type type="void"/><parameters><parameter type="GtkText*" name="text"/><parameter type="GtkAdjustment*" name="hadjustment"/><parameter type="GtkAdjustment*" name="vadjustment"/></parameters></signal><method name="forward_delete" cname="gtk_text_forward_delete"><return-type type="gboolean"/></method><method name="backward_delete" cname="gtk_text_backward_delete"><return-type type="gboolean"/></method><method name="freeze" cname="gtk_text_freeze"><return-type type="void"/></method><method name="set_word_wrap" cname="gtk_text_set_word_wrap"><return-type type="void"/></method><method name="set_line_wrap" cname="gtk_text_set_line_wrap"><return-type type="void"/></method><method name="set_point" cname="gtk_text_set_point"><return-type type="void"/></method><method name="thaw" cname="gtk_text_thaw"><return-type type="void"/></method><method name="insert" cname="gtk_text_insert"><return-type type="void"/></method><method name="set_editable" cname="gtk_text_set_editable"><return-type type="void"/></method><method name="get_point" cname="gtk_text_get_point"><return-type type="guint"/></method><method name="get_length" cname="gtk_text_get_length"><return-type type="guint"/></method><method name="set_adjustments" cname="gtk_text_set_adjustments"><return-type type="void"/></method><constructor cname="gtk_text_new"/></object><object name="TextBuffer" cname="GtkTextBuffer" parent="GObject"><field cname="tag_table" type="GtkTextTagTable*"/><field cname="btree" type="GtkTextBTree*"/><field cname="clipboard_contents_buffers" type="GSList*"/><field cname="selection_clipboards" type="GSList*"/><field cname="log_attr_cache" type="GtkTextLogAttrCache*"/><field cname="user_action_count" type="guint"/><field cname="modified" bits="1" type="guint"/><signal name="insert_text" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/><parameter type="GtkTextIter*" name="pos"/><parameter type="const-gchar*" name="text"/><parameter type="gint" name="length);void"/><parameter type="GtkTextIter*" name="pos"/><parameter type="GdkPixbuf*" name="pixbuf);void"/><parameter type="GtkTextIter*" name="pos"/><parameter type="GtkTextChildAnchor*" name="anchor);void"/><parameter type="GtkTextIter*" name="start"/><parameter type="GtkTextIter*" name="end);void"/><parameter type="const-GtkTextIter*" name="location"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="insert_pixbuf" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/><parameter type="GtkTextIter*" name="pos"/><parameter type="GdkPixbuf*" name="pixbuf);void"/><parameter type="GtkTextIter*" name="pos"/><parameter type="GtkTextChildAnchor*" name="anchor);void"/><parameter type="GtkTextIter*" name="start"/><parameter type="GtkTextIter*" name="end);void"/><parameter type="const-GtkTextIter*" name="location"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="insert_child_anchor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/><parameter type="GtkTextIter*" name="pos"/><parameter type="GtkTextChildAnchor*" name="anchor);void"/><parameter type="GtkTextIter*" name="start"/><parameter type="GtkTextIter*" name="end);void"/><parameter type="const-GtkTextIter*" name="location"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="delete_range" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/><parameter type="GtkTextIter*" name="start"/><parameter type="GtkTextIter*" name="end);void"/><parameter type="const-GtkTextIter*" name="location"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer);void"/><parameter type="const-GtkTextIter*" name="location"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="modified_changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer);void"/><parameter type="const-GtkTextIter*" name="location"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="mark_set" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/><parameter type="const-GtkTextIter*" name="location"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="mark_deleted" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/><parameter type="GtkTextMark*" name="mark);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="apply_tag" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="remove_tag" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/><parameter type="GtkTextTag*" name="tag"/><parameter type="const-GtkTextIter*" name="start_char"/><parameter type="const-GtkTextIter*" name="end_char);void"/></parameters></signal><signal name="begin_user_action" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer);void"/></parameters></signal><signal name="end_user_action" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextBuffer*" name="buffer"/></parameters></signal><method name="get_insert" cname="gtk_text_buffer_get_insert"><return-type type="GtkTextMark*"/></method><method name="remove_all_tags" cname="gtk_text_buffer_remove_all_tags"><return-type type="void"/></method><method name="get_iter_at_line" cname="gtk_text_buffer_get_iter_at_line"><return-type type="void"/></method><method name="spew" cname="_gtk_text_buffer_spew"><return-type type="void"/></method><method name="get_char_count" cname="gtk_text_buffer_get_char_count"><return-type type="gint"/></method><method name="delete" cname="gtk_text_buffer_delete"><return-type type="void"/></method><method name="set_text" cname="gtk_text_buffer_set_text"><return-type type="void"/></method><method name="add_selection_clipboard" cname="gtk_text_buffer_add_selection_clipboard"><return-type type="void"/></method><method name="notify_will_remove_tag" cname="_gtk_text_buffer_notify_will_remove_tag"><return-type type="void"/></method><method name="apply_tag_by_name" cname="gtk_text_buffer_apply_tag_by_name"><return-type type="void"/></method><method name="insert_range" cname="gtk_text_buffer_insert_range"><return-type type="void"/></method><method name="delete_selection" cname="gtk_text_buffer_delete_selection"><return-type type="gboolean"/></method><method name="insert_interactive" cname="gtk_text_buffer_insert_interactive"><return-type type="gboolean"/></method><method name="get_modified" cname="gtk_text_buffer_get_modified"><return-type type="gboolean"/></method><method name="delete_mark_by_name" cname="gtk_text_buffer_delete_mark_by_name"><return-type type="void"/></method><method name="get_btree" cname="_gtk_text_buffer_get_btree"><return-type type="GtkTextBTree*"/></method><method name="get_start_iter" cname="gtk_text_buffer_get_start_iter"><return-type type="void"/></method><method name="begin_user_action" cname="gtk_text_buffer_begin_user_action"><return-type type="void"/></method><method name="move_mark" cname="gtk_text_buffer_move_mark"><return-type type="void"/></method><constructor cname="gtk_text_buffer_new"/><method name="delete_interactive" cname="gtk_text_buffer_delete_interactive"><return-type type="gboolean"/></method><method name="insert" cname="gtk_text_buffer_insert"><return-type type="void"/></method><method name="get_bounds" cname="gtk_text_buffer_get_bounds"><return-type type="void"/></method><method name="delete_mark" cname="gtk_text_buffer_delete_mark"><return-type type="void"/></method><method name="create_child_anchor" cname="gtk_text_buffer_create_child_anchor"><return-type type="GtkTextChildAnchor*"/></method><method name="get_iter_at_line_offset" cname="gtk_text_buffer_get_iter_at_line_offset"><return-type type="void"/></method><method name="insert_child_anchor" cname="gtk_text_buffer_insert_child_anchor"><return-type type="void"/></method><method name="get_iter_at_line_index" cname="gtk_text_buffer_get_iter_at_line_index"><return-type type="void"/></method><method name="get_selection_bound" cname="gtk_text_buffer_get_selection_bound"><return-type type="GtkTextMark*"/></method><method name="create_mark" cname="gtk_text_buffer_create_mark"><return-type type="GtkTextMark*"/></method><method name="end_user_action" cname="gtk_text_buffer_end_user_action"><return-type type="void"/></method><method name="apply_tag" cname="gtk_text_buffer_apply_tag"><return-type type="void"/></method><method name="place_cursor" cname="gtk_text_buffer_place_cursor"><return-type type="void"/></method><method name="remove_tag_by_name" cname="gtk_text_buffer_remove_tag_by_name"><return-type type="void"/></method><method name="get_end_iter" cname="gtk_text_buffer_get_end_iter"><return-type type="void"/></method><method name="cut_clipboard" cname="gtk_text_buffer_cut_clipboard"><return-type type="void"/></method><method name="insert_with_tags" cname="gtk_text_buffer_insert_with_tags"><return-type type="void"/></method><method name="get_slice" cname="gtk_text_buffer_get_slice"><return-type type="gchar*"/></method><method name="copy_clipboard" cname="gtk_text_buffer_copy_clipboard"><return-type type="void"/></method><method name="insert_at_cursor" cname="gtk_text_buffer_insert_at_cursor"><return-type type="void"/></method><method name="remove_selection_clipboard" cname="gtk_text_buffer_remove_selection_clipboard"><return-type type="void"/></method><method name="remove_tag" cname="gtk_text_buffer_remove_tag"><return-type type="void"/></method><method name="set_modified" cname="gtk_text_buffer_set_modified"><return-type type="void"/></method><method name="get_selection_bounds" cname="gtk_text_buffer_get_selection_bounds"><return-type type="gboolean"/></method><method name="create_tag" cname="gtk_text_buffer_create_tag"><return-type type="GtkTextTag*"/></method><method name="get_text" cname="gtk_text_buffer_get_text"><return-type type="gchar*"/></method><method name="move_mark_by_name" cname="gtk_text_buffer_move_mark_by_name"><return-type type="void"/></method><method name="get_iter_at_mark" cname="gtk_text_buffer_get_iter_at_mark"><return-type type="void"/></method><method name="get_mark" cname="gtk_text_buffer_get_mark"><return-type type="GtkTextMark*"/></method><method name="paste_clipboard" cname="gtk_text_buffer_paste_clipboard"><return-type type="void"/></method><method name="insert_pixbuf" cname="gtk_text_buffer_insert_pixbuf"><return-type type="void"/></method><method name="insert_range_interactive" cname="gtk_text_buffer_insert_range_interactive"><return-type type="gboolean"/></method><method name="get_line_log_attrs" cname="_gtk_text_buffer_get_line_log_attrs"><return-type type="const-PangoLogAttr*"/></method><method name="insert_with_tags_by_name" cname="gtk_text_buffer_insert_with_tags_by_name"><return-type type="void"/></method><method name="get_line_count" cname="gtk_text_buffer_get_line_count"><return-type type="gint"/></method><method name="get_tag_table" cname="gtk_text_buffer_get_tag_table"><return-type type="GtkTextTagTable*"/></method><method name="get_iter_at_offset" cname="gtk_text_buffer_get_iter_at_offset"><return-type type="void"/></method><method name="insert_interactive_at_cursor" cname="gtk_text_buffer_insert_interactive_at_cursor"><return-type type="gboolean"/></method><method name="get_iter_at_child_anchor" cname="gtk_text_buffer_get_iter_at_child_anchor"><return-type type="void"/></method></object><object name="TextChildAnchor" cname="GtkTextChildAnchor" parent="GObject"><field cname="segment" type="gpointer"/><method name="get_deleted" cname="gtk_text_child_anchor_get_deleted"><return-type type="gboolean"/></method><method name="get_widgets" cname="gtk_text_child_anchor_get_widgets"><return-type type="GList*"/></method><constructor cname="gtk_text_child_anchor_new"/></object><object name="TextMark" cname="GtkTextMark" parent="GObject"><field cname="segment" type="gpointer"/><method name="get_buffer" cname="gtk_text_mark_get_buffer"><return-type type="GtkTextBuffer*"/></method><method name="get_name" cname="gtk_text_mark_get_name"><return-type type="const-char*"/></method><method name="get_visible" cname="gtk_text_mark_get_visible"><return-type type="gboolean"/></method><method name="get_left_gravity" cname="gtk_text_mark_get_left_gravity"><return-type type="gboolean"/></method><method name="get_deleted" cname="gtk_text_mark_get_deleted"><return-type type="gboolean"/></method><method name="set_visible" cname="gtk_text_mark_set_visible"><return-type type="void"/></method></object><object name="TextTag" cname="GtkTextTag" parent="GObject"><field cname="table" type="GtkTextTagTable*"/><field cname="name" type="char*"/><field cname="priority" type="int"/><field cname="values" type="GtkTextAttributes*"/><field cname="bg_color_set" bits="1" type="guint"/><field cname="bg_stipple_set" bits="1" type="guint"/><field cname="fg_color_set" bits="1" type="guint"/><field cname="scale_set" bits="1" type="guint"/><field cname="fg_stipple_set" bits="1" type="guint"/><field cname="justification_set" bits="1" type="guint"/><field cname="left_margin_set" bits="1" type="guint"/><field cname="indent_set" bits="1" type="guint"/><field cname="rise_set" bits="1" type="guint"/><field cname="strikethrough_set" bits="1" type="guint"/><field cname="right_margin_set" bits="1" type="guint"/><field cname="pixels_above_lines_set" bits="1" type="guint"/><field cname="pixels_below_lines_set" bits="1" type="guint"/><field cname="pixels_inside_wrap_set" bits="1" type="guint"/><field cname="tabs_set" bits="1" type="guint"/><field cname="underline_set" bits="1" type="guint"/><field cname="wrap_mode_set" bits="1" type="guint"/><field cname="bg_full_height_set" bits="1" type="guint"/><field cname="invisible_set" bits="1" type="guint"/><field cname="editable_set" bits="1" type="guint"/><field cname="language_set" bits="1" type="guint"/><field cname="pad1" bits="1" type="guint"/><field cname="pad2" bits="1" type="guint"/><field cname="pad3" bits="1" type="guint"/><property name="Name" cname="name" type="gchar*" doc-string=" _(Name used to refer to the text tag)" readable="true" writeable="true" construct-only="true"/><property name="Background" cname="background" type="gchar*" doc-string=" _(Background color as a string)" writeable="true"/><property name="BackgroundGdk" cname="background_gdk" type="GdkColor" doc-string=" _(Background color as a GdkColor)" readable="true" writeable="true"/><property name="BackgroundFullHeight" cname="background_full_height" type="gboolean" doc-string=" _(Whether the background color fills the entire line height or only the height of the tagged characters)" readable="true" writeable="true"/><property name="BackgroundStipple" cname="background_stipple" type="GdkPixmap" doc-string=" _(Bitmap to use as a mask when drawing the text background)" readable="true" writeable="true"/><property name="Foreground" cname="foreground" type="gchar*" doc-string=" _(Foreground color as a string)" writeable="true"/><property name="ForegroundGdk" cname="foreground_gdk" type="GdkColor" doc-string=" _(Foreground color as a GdkColor)" readable="true" writeable="true"/><property name="ForegroundStipple" cname="foreground_stipple" type="GdkPixmap" doc-string=" _(Bitmap to use as a mask when drawing the text foreground)" readable="true" writeable="true"/><property name="Direction" cname="direction" type="GtkTextDirection" doc-string=" _(Text direction, e.g. right-to-left or left-to-right)" readable="true" writeable="true"/><property name="Editable" cname="editable" type="gboolean" doc-string=" _(Whether the text can be modified by the user)" readable="true" writeable="true"/><property name="Font" cname="font" type="gchar*" doc-string=" _(Font description as a string)" readable="true" writeable="true"/><property name="FontDesc" cname="font_desc" type="PangoFontDescription" doc-string=" _(Font description as a PangoFontDescription struct)" readable="true" writeable="true"/><property name="Family" cname="family" type="gchar*" doc-string=" _(Name of the font family, e.g. Sans, Helvetica, Times, Monospace)" readable="true" writeable="true"/><property name="Style" cname="style" type="PangoStyle" doc-string=" _(Font style)" readable="true" writeable="true"/><property name="Variant" cname="variant" type="PangoVariant" doc-string=" _(Font variant)" readable="true" writeable="true"/><property name="Weight" cname="weight" type="gint" doc-string=" _(Font weight)" readable="true" writeable="true"/><property name="Stretch" cname="stretch" type="PangoStretch" doc-string=" _(Font stretch)" readable="true" writeable="true"/><property name="Size" cname="size" type="gint" doc-string=" _(Font size)" readable="true" writeable="true"/><property name="Scale" cname="scale" type="gdouble" doc-string=" _(Font scale)" readable="true" writeable="true"/><property name="SizePoints" cname="size_points" type="gdouble" doc-string=" _(Font size in points)" readable="true" writeable="true"/><property name="Justification" cname="justification" type="GtkJustification" doc-string=" _(Left, right, or center justification)" readable="true" writeable="true"/><property name="Language" cname="language" type="gchar*" doc-string=" _(Language engine code to use for rendering the text)" readable="true" writeable="true"/><property name="LeftMargin" cname="left_margin" type="gint" doc-string=" _(Width of the left margin in pixels)" readable="true" writeable="true"/><property name="RightMargin" cname="right_margin" type="gint" doc-string=" _(Width of the right margin in pixels)" readable="true" writeable="true"/><property name="Indent" cname="indent" type="gint" doc-string=" _(Amount to indent the paragraph, in pixels)" readable="true" writeable="true"/><property name="Rise" cname="rise" type="gint" doc-string=" _(Offset of text above the baseline (below the baseline if rise is negative))" readable="true" writeable="true"/><property name="PixelsAboveLines" cname="pixels_above_lines" type="gint" doc-string=" _(Pixels of blank space above paragraphs)" readable="true" writeable="true"/><property name="PixelsBelowLines" cname="pixels_below_lines" type="gint" doc-string=" _(Pixels of blank space below paragraphs)" readable="true" writeable="true"/><property name="PixelsInsideWrap" cname="pixels_inside_wrap" type="gint" doc-string=" _(Pixels of blank space between wrapped lines in a paragraph)" readable="true" writeable="true"/><property name="Strikethrough" cname="strikethrough" type="gboolean" doc-string=" _(Whether to strike through the text)" readable="true" writeable="true"/><property name="Underline" cname="underline" type="PangoUnderline" doc-string=" _(Style of underline for this text)" readable="true" writeable="true"/><property name="WrapMode" cname="wrap_mode" type="GtkWrapMode" doc-string=" _(Whether to wrap lines never, at word boundaries, or at character boundaries)" readable="true" writeable="true"/><property name="Tabs" cname="tabs" type="PangoTabArray" doc-string=" _(Custom tabs for this text)" readable="true" writeable="true"/><property name="Invisible" cname="invisible" type="gboolean" doc-string=" _(Whether this text is hidden)" readable="true" writeable="true"/><signal name="event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkTextTag*" name="tag"/><parameter type="GObject*" name="event_object"/><parameter type="GdkEvent*" name="event"/><parameter type="const-GtkTextIter*" name="iter"/></parameters></signal><constructor cname="gtk_text_tag_new"/><method name="set_priority" cname="gtk_text_tag_set_priority"><return-type type="void"/></method><method name="get_priority" cname="gtk_text_tag_get_priority"><return-type type="gint"/></method><method name="event" cname="gtk_text_tag_event"><return-type type="gboolean"/></method></object><object name="TextTagTable" cname="GtkTextTagTable" parent="GObject"><field cname="hash" type="GHashTable*"/><field cname="anonymous" type="GSList*"/><field cname="anon_count" type="gint"/><field cname="buffers" type="GSList*"/><signal name="tag_changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextTagTable*" name="table"/><parameter type="GtkTextTag*" name="tag"/><parameter type="gboolean" name="size_changed);void"/><parameter type="GtkTextTag*" name="tag);void"/><parameter type="GtkTextTag*" name="tag"/></parameters></signal><signal name="tag_added" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextTagTable*" name="table"/><parameter type="GtkTextTag*" name="tag);void"/><parameter type="GtkTextTag*" name="tag"/></parameters></signal><signal name="tag_removed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextTagTable*" name="table"/><parameter type="GtkTextTag*" name="tag"/></parameters></signal><method name="foreach" cname="gtk_text_tag_table_foreach"><return-type type="void"/></method><method name="get_size" cname="gtk_text_tag_table_get_size"><return-type type="gint"/></method><method name="remove_buffer" cname="_gtk_text_tag_table_remove_buffer"><return-type type="void"/></method><method name="remove" cname="gtk_text_tag_table_remove"><return-type type="void"/></method><method name="lookup" cname="gtk_text_tag_table_lookup"><return-type type="GtkTextTag*"/></method><method name="add_buffer" cname="_gtk_text_tag_table_add_buffer"><return-type type="void"/></method><method name="add" cname="gtk_text_tag_table_add"><return-type type="void"/></method><constructor cname="gtk_text_tag_table_new"/></object><object name="TextView" cname="GtkTextView" parent="GtkContainer"><field cname="_GtkTextLayout* layout" type="struct"/><field cname="buffer" type="GtkTextBuffer*"/><field cname="selection_drag_handler" type="guint"/><field cname="scroll_timeout" type="guint"/><field cname="pixels_above_lines" type="gint"/><field cname="pixels_below_lines" type="gint"/><field cname="pixels_inside_wrap" type="gint"/><field cname="wrap_mode" type="GtkWrapMode"/><field cname="justify" type="GtkJustification"/><field cname="left_margin" type="gint"/><field cname="right_margin" type="gint"/><field cname="indent" type="gint"/><field cname="tabs" type="PangoTabArray*"/><field cname="editable" bits="1" type="guint"/><field cname="overwrite_mode" bits="1" type="guint"/><field cname="cursor_visible" bits="1" type="guint"/><field cname="need_im_reset" bits="1" type="guint"/><field cname="just_selected_element" bits="1" type="guint"/><field cname="disable_scroll_on_focus" bits="1" type="guint"/><field cname="onscreen_validated" bits="1" type="guint"/><field cname="text_window" type="GtkTextWindow*"/><field cname="left_window" type="GtkTextWindow*"/><field cname="right_window" type="GtkTextWindow*"/><field cname="top_window" type="GtkTextWindow*"/><field cname="bottom_window" type="GtkTextWindow*"/><field cname="hadjustment" type="GtkAdjustment*"/><field cname="vadjustment" type="GtkAdjustment*"/><field cname="xoffset" type="gint"/><field cname="yoffset" type="gint"/><field cname="width" type="gint"/><field cname="height" type="gint"/><field cname="virtual_cursor_x" type="gint"/><field cname="virtual_cursor_y" type="gint"/><field cname="first_para_mark" type="GtkTextMark*"/><field cname="first_para_pixels" type="gint"/><field cname="dnd_mark" type="GtkTextMark*"/><field cname="blink_timeout" type="guint"/><field cname="first_validate_idle" type="guint"/><field cname="incremental_validate_idle" type="guint"/><field cname="im_context" type="GtkIMContext*"/><field cname="popup_menu" type="GtkWidget*"/><field cname="drag_start_x" type="gint"/><field cname="drag_start_y" type="gint"/><field cname="children" type="GSList*"/><field cname="pending_scroll" type="GtkTextPendingScroll*"/><field cname="cursor_gc" type="GdkGC*"/><field cname="pending_place_cursor_button" type="gint"/><property name="PixelsAboveLines" cname="pixels_above_lines" type="gint" doc-string=" _(Pixels of blank space above paragraphs)" readable="true" writeable="true"/><property name="PixelsBelowLines" cname="pixels_below_lines" type="gint" doc-string=" _(Pixels of blank space below paragraphs)" readable="true" writeable="true"/><property name="PixelsInsideWrap" cname="pixels_inside_wrap" type="gint" doc-string=" _(Pixels of blank space between wrapped lines in a paragraph)" readable="true" writeable="true"/><property name="Editable" cname="editable" type="gboolean" doc-string=" _(Whether the text can be modified by the user)" readable="true" writeable="true"/><property name="WrapMode" cname="wrap_mode" type="GtkWrapMode" doc-string=" _(Whether to wrap lines never, at word boundaries, or at character boundaries)" readable="true" writeable="true"/><property name="Justification" cname="justification" type="GtkJustification" doc-string=" _(Left, right, or center justification)" readable="true" writeable="true"/><property name="LeftMargin" cname="left_margin" type="gint" doc-string=" _(Width of the left margin in pixels)" readable="true" writeable="true"/><property name="RightMargin" cname="right_margin" type="gint" doc-string=" _(Width of the right margin in pixels)" readable="true" writeable="true"/><property name="Indent" cname="indent" type="gint" doc-string=" _(Amount to indent the paragraph, in pixels)" readable="true" writeable="true"/><property name="Tabs" cname="tabs" type="PangoTabArray" doc-string=" _(Custom tabs for this text)" readable="true" writeable="true"/><property name="CursorVisible" cname="cursor_visible" type="gboolean" doc-string=" _(If the insertion cursor is shown)" readable="true" writeable="true"/><signal name="move_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count"/><parameter type="gboolean" name="extend_selection);void"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="set_anchor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view);void"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="insert_at_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="delete_from_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="cut_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view);void"/></parameters></signal><signal name="copy_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view);void"/></parameters></signal><signal name="paste_clipboard" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view);void"/></parameters></signal><signal name="toggle_overwrite" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view"/></parameters></signal><signal name="set_scroll_adjustments" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view"/><parameter type="GtkAdjustment*" name="hadjustment"/><parameter type="GtkAdjustment*" name="vadjustment);void"/><parameter type="GtkMenu*" name="menu);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count"/><parameter type="gboolean" name="extend_selection);void"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><signal name="populate_popup" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTextView*" name="text_view"/><parameter type="GtkMenu*" name="menu);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count"/><parameter type="gboolean" name="extend_selection);void"/><parameter type="const-gchar*" name="str);void"/><parameter type="GtkDeleteType" name="type"/><parameter type="gint" name="count);void"/></parameters></signal><method name="set_pixels_inside_wrap" cname="gtk_text_view_set_pixels_inside_wrap"><return-type type="void"/></method><method name="set_pixels_above_lines" cname="gtk_text_view_set_pixels_above_lines"><return-type type="void"/></method><method name="set_wrap_mode" cname="gtk_text_view_set_wrap_mode"><return-type type="void"/></method><method name="set_left_margin" cname="gtk_text_view_set_left_margin"><return-type type="void"/></method><method name="window_to_buffer_coords" cname="gtk_text_view_window_to_buffer_coords"><return-type type="void"/></method><method name="get_border_window_size" cname="gtk_text_view_get_border_window_size"><return-type type="gint"/></method><method name="get_window_type" cname="gtk_text_view_get_window_type"><return-type type="GtkTextWindowType"/></method><method name="get_window" cname="gtk_text_view_get_window"><return-type type="GdkWindow*"/></method><method name="scroll_mark_onscreen" cname="gtk_text_view_scroll_mark_onscreen"><return-type type="void"/></method><method name="get_indent" cname="gtk_text_view_get_indent"><return-type type="gint"/></method><method name="buffer_to_window_coords" cname="gtk_text_view_buffer_to_window_coords"><return-type type="void"/></method><method name="get_buffer" cname="gtk_text_view_get_buffer"><return-type type="GtkTextBuffer*"/></method><method name="get_pixels_below_lines" cname="gtk_text_view_get_pixels_below_lines"><return-type type="gint"/></method><constructor cname="gtk_text_view_new_with_buffer"/><method name="get_left_margin" cname="gtk_text_view_get_left_margin"><return-type type="gint"/></method><method name="get_justification" cname="gtk_text_view_get_justification"><return-type type="GtkJustification"/></method><method name="get_wrap_mode" cname="gtk_text_view_get_wrap_mode"><return-type type="GtkWrapMode"/></method><method name="get_default_attributes" cname="gtk_text_view_get_default_attributes"><return-type type="GtkTextAttributes*"/></method><method name="get_editable" cname="gtk_text_view_get_editable"><return-type type="gboolean"/></method><method name="move_child" cname="gtk_text_view_move_child"><return-type type="void"/></method><method name="scroll_to_iter" cname="gtk_text_view_scroll_to_iter"><return-type type="gboolean"/></method><method name="move_visually" cname="gtk_text_view_move_visually"><return-type type="gboolean"/></method><method name="forward_display_line" cname="gtk_text_view_forward_display_line"><return-type type="gboolean"/></method><method name="backward_display_line" cname="gtk_text_view_backward_display_line"><return-type type="gboolean"/></method><method name="set_right_margin" cname="gtk_text_view_set_right_margin"><return-type type="void"/></method><method name="set_cursor_visible" cname="gtk_text_view_set_cursor_visible"><return-type type="void"/></method><method name="get_iter_location" cname="gtk_text_view_get_iter_location"><return-type type="void"/></method><method name="get_visible_rect" cname="gtk_text_view_get_visible_rect"><return-type type="void"/></method><method name="get_pixels_inside_wrap" cname="gtk_text_view_get_pixels_inside_wrap"><return-type type="gint"/></method><method name="set_border_window_size" cname="gtk_text_view_set_border_window_size"><return-type type="void"/></method><method name="move_mark_onscreen" cname="gtk_text_view_move_mark_onscreen"><return-type type="gboolean"/></method><method name="get_pixels_above_lines" cname="gtk_text_view_get_pixels_above_lines"><return-type type="gint"/></method><method name="scroll_to_mark" cname="gtk_text_view_scroll_to_mark"><return-type type="void"/></method><method name="get_tabs" cname="gtk_text_view_get_tabs"><return-type type="PangoTabArray*"/></method><constructor cname="gtk_text_view_new"/><method name="get_cursor_visible" cname="gtk_text_view_get_cursor_visible"><return-type type="gboolean"/></method><method name="add_child_at_anchor" cname="gtk_text_view_add_child_at_anchor"><return-type type="void"/></method><method name="set_pixels_below_lines" cname="gtk_text_view_set_pixels_below_lines"><return-type type="void"/></method><method name="starts_display_line" cname="gtk_text_view_starts_display_line"><return-type type="gboolean"/></method><method name="set_indent" cname="gtk_text_view_set_indent"><return-type type="void"/></method><method name="backward_display_line_start" cname="gtk_text_view_backward_display_line_start"><return-type type="gboolean"/></method><method name="set_buffer" cname="gtk_text_view_set_buffer"><return-type type="void"/></method><method name="get_line_yrange" cname="gtk_text_view_get_line_yrange"><return-type type="void"/></method><method name="get_iter_at_location" cname="gtk_text_view_get_iter_at_location"><return-type type="void"/></method><method name="set_editable" cname="gtk_text_view_set_editable"><return-type type="void"/></method><method name="add_child_in_window" cname="gtk_text_view_add_child_in_window"><return-type type="void"/></method><method name="get_right_margin" cname="gtk_text_view_get_right_margin"><return-type type="gint"/></method><method name="get_line_at_y" cname="gtk_text_view_get_line_at_y"><return-type type="void"/></method><method name="place_cursor_onscreen" cname="gtk_text_view_place_cursor_onscreen"><return-type type="gboolean"/></method><method name="forward_display_line_end" cname="gtk_text_view_forward_display_line_end"><return-type type="gboolean"/></method><method name="set_justification" cname="gtk_text_view_set_justification"><return-type type="void"/></method><method name="set_tabs" cname="gtk_text_view_set_tabs"><return-type type="void"/></method></object><object name="ThemeEngine" cname="GtkThemeEngine" parent="GTypeModule"><method name="create_rc_style" cname="gtk_theme_engine_create_rc_style"><return-type type="GtkRcStyle*"/></method></object><object name="TipsQuery" cname="GtkTipsQuery" parent="GtkLabel"><field cname="emit_always" bits="1" type="guint"/><field cname="in_query" bits="1" type="guint"/><field cname="label_inactive" type="gchar*"/><field cname="label_no_tip" type="gchar*"/><field cname="caller" type="GtkWidget*"/><field cname="last_crossed" type="GtkWidget*"/><field cname="query_cursor" type="GdkCursor*"/><signal name="start_query" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkTipsQuery*" name="tips_query);void"/><parameter type="GtkWidget*" name="widget"/><parameter type="const-gchar*" name="tip_text"/><parameter type="const-gchar*" name="tip_private);gint"/><parameter type="GtkWidget*" name="widget"/><parameter type="const-gchar*" name="tip_text"/><parameter type="const-gchar*" name="tip_private"/><parameter type="GdkEventButton*" name="event"/></parameters></signal><signal name="stop_query" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkTipsQuery*" name="tips_query);void"/><parameter type="GtkWidget*" name="widget"/><parameter type="const-gchar*" name="tip_text"/><parameter type="const-gchar*" name="tip_private);gint"/><parameter type="GtkWidget*" name="widget"/><parameter type="const-gchar*" name="tip_text"/><parameter type="const-gchar*" name="tip_private"/><parameter type="GdkEventButton*" name="event"/></parameters></signal><signal name="widget_entered" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTipsQuery*" name="tips_query"/><parameter type="GtkWidget*" name="widget"/><parameter type="const-gchar*" name="tip_text"/><parameter type="const-gchar*" name="tip_private);gint"/><parameter type="GtkWidget*" name="widget"/><parameter type="const-gchar*" name="tip_text"/><parameter type="const-gchar*" name="tip_private"/><parameter type="GdkEventButton*" name="event"/></parameters></signal><signal name="widget_selected" when="LAST"><return-type type="gint"/><parameters><parameter type="GtkTipsQuery*" name="tips_query"/><parameter type="GtkWidget*" name="widget"/><parameter type="const-gchar*" name="tip_text"/><parameter type="const-gchar*" name="tip_private"/><parameter type="GdkEventButton*" name="event"/></parameters></signal><method name="start_query" cname="gtk_tips_query_start_query"><return-type type="void"/></method><method name="stop_query" cname="gtk_tips_query_stop_query"><return-type type="void"/></method><method name="set_labels" cname="gtk_tips_query_set_labels"><return-type type="void"/></method><constructor cname="gtk_tips_query_new"/><method name="set_caller" cname="gtk_tips_query_set_caller"><return-type type="void"/></method></object><object name="ToggleButton" cname="GtkToggleButton" parent="GtkButton"><field cname="active" bits="1" type="guint"/><field cname="draw_indicator" bits="1" type="guint"/><field cname="inconsistent" bits="1" type="guint"/><property name="Active" cname="active" type="gboolean" doc-string=" _(If the toggle button should be pressed in or not)" readable="true" writeable="true"/><property name="Inconsistent" cname="inconsistent" type="gboolean" doc-string=" _(If the toggle button is in an \in between\ state.)" readable="true" writeable="true"/><property name="DrawIndicator" cname="draw_indicator" type="gboolean" doc-string=" _(If the toggle part of the button is displayed)" readable="true" writeable="true"/><signal name="toggled" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkToggleButton*" name="toggle_button"/></parameters></signal><constructor cname="gtk_toggle_button_new_with_mnemonic"/><method name="get_inconsistent" cname="gtk_toggle_button_get_inconsistent"><return-type type="gboolean"/></method><constructor cname="gtk_toggle_button_new_with_label"/><method name="set_mode" cname="gtk_toggle_button_set_mode"><return-type type="void"/></method><method name="get_active" cname="gtk_toggle_button_get_active"><return-type type="gboolean"/></method><method name="set_inconsistent" cname="gtk_toggle_button_set_inconsistent"><return-type type="void"/></method><constructor cname="gtk_toggle_button_new"/><method name="get_mode" cname="gtk_toggle_button_get_mode"><return-type type="gboolean"/></method><method name="set_active" cname="gtk_toggle_button_set_active"><return-type type="void"/></method><method name="toggled" cname="gtk_toggle_button_toggled"><return-type type="void"/></method></object><object name="Toolbar" cname="GtkToolbar" parent="GtkContainer"><field cname="num_children" type="gint"/><field cname="children" type="GList*"/><field cname="orientation" type="GtkOrientation"/><field cname="style" type="GtkToolbarStyle"/><field cname="icon_size" type="GtkIconSize"/><field cname="tooltips" type="GtkTooltips*"/><field cname="button_maxw" type="gint"/><field cname="button_maxh" type="gint"/><field cname="style_set_connection" type="guint"/><field cname="icon_size_connection" type="guint"/><field cname="style_set" bits="1" type="guint"/><field cname="icon_size_set" bits="1" type="guint"/><signal name="orientation_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkToolbar*" name="toolbar"/><parameter type="GtkOrientation" name="orientation);void"/><parameter type="GtkToolbarStyle" name="style"/></parameters></signal><signal name="style_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkToolbar*" name="toolbar"/><parameter type="GtkToolbarStyle" name="style"/></parameters></signal><property name="Orientation" cname="orientation" type="GtkOrientation" doc-string=" _(The orientation of the toolbar)" readable="true" writeable="true"/><property name="ToolbarStyle" cname="toolbar_style" type="GtkToolbarStyle" doc-string=" _(How to draw the toolbar)" readable="true" writeable="true"/><method name="get_tooltips" cname="gtk_toolbar_get_tooltips"><return-type type="gboolean"/></method><method name="get_style" cname="gtk_toolbar_get_style"><return-type type="GtkToolbarStyle"/></method><method name="append_item" cname="gtk_toolbar_append_item"><return-type type="GtkWidget*"/></method><method name="get_icon_size" cname="gtk_toolbar_get_icon_size"><return-type type="GtkIconSize"/></method><method name="prepend_space" cname="gtk_toolbar_prepend_space"><return-type type="void"/></method><method name="insert_element" cname="gtk_toolbar_insert_element"><return-type type="GtkWidget*"/></method><method name="append_element" cname="gtk_toolbar_append_element"><return-type type="GtkWidget*"/></method><method name="prepend_element" cname="gtk_toolbar_prepend_element"><return-type type="GtkWidget*"/></method><method name="unset_icon_size" cname="gtk_toolbar_unset_icon_size"><return-type type="void"/></method><method name="insert_item" cname="gtk_toolbar_insert_item"><return-type type="GtkWidget*"/></method><method name="remove_space" cname="gtk_toolbar_remove_space"><return-type type="void"/></method><method name="set_tooltips" cname="gtk_toolbar_set_tooltips"><return-type type="void"/></method><method name="set_orientation" cname="gtk_toolbar_set_orientation"><return-type type="void"/></method><method name="prepend_widget" cname="gtk_toolbar_prepend_widget"><return-type type="void"/></method><method name="unset_style" cname="gtk_toolbar_unset_style"><return-type type="void"/></method><method name="insert_space" cname="gtk_toolbar_insert_space"><return-type type="void"/></method><method name="get_orientation" cname="gtk_toolbar_get_orientation"><return-type type="GtkOrientation"/></method><method name="insert_stock" cname="gtk_toolbar_insert_stock"><return-type type="GtkWidget*"/></method><method name="prepend_item" cname="gtk_toolbar_prepend_item"><return-type type="GtkWidget*"/></method><method name="append_widget" cname="gtk_toolbar_append_widget"><return-type type="void"/></method><constructor cname="gtk_toolbar_new"/><method name="set_icon_size" cname="gtk_toolbar_set_icon_size"><return-type type="void"/></method><method name="set_style" cname="gtk_toolbar_set_style"><return-type type="void"/></method><method name="append_space" cname="gtk_toolbar_append_space"><return-type type="void"/></method><method name="insert_widget" cname="gtk_toolbar_insert_widget"><return-type type="void"/></method></object><object name="Tooltips" cname="GtkTooltips" parent="GtkObject"><field cname="tip_window" type="GtkWidget*"/><field cname="tip_label" type="GtkWidget*"/><field cname="active_tips_data" type="GtkTooltipsData*"/><field cname="tips_data_list" type="GList*"/><field cname="delay" bits="30" type="guint"/><field cname="enabled" bits="1" type="guint"/><field cname="have_grab" bits="1" type="guint"/><field cname="timer_tag" type="gint"/><field cname="use_sticky_delay" type="gboolean"/><field cname="last_popdown" type="GTimeVal"/><method name="enable" cname="gtk_tooltips_enable"><return-type type="void"/></method><method name="disable" cname="gtk_tooltips_disable"><return-type type="void"/></method><method name="force_window" cname="gtk_tooltips_force_window"><return-type type="void"/></method><constructor cname="gtk_tooltips_new"/><method name="set_tip" cname="gtk_tooltips_set_tip"><return-type type="void"/></method></object><object name="Tree" cname="GtkTree" parent="GtkContainer"><field cname="children" type="GList*"/><field cname="root_tree" type="GtkTree*"/><field cname="tree_owner" type="GtkWidget*"/><field cname="selection" type="GList*"/><field cname="level" type="guint"/><field cname="indent_value" type="guint"/><field cname="current_indent" type="guint"/><field cname="selection_mode" bits="2" type="guint"/><field cname="view_mode" bits="1" type="guint"/><field cname="view_line" bits="1" type="guint"/><signal name="selection_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkTree*" name="tree);void"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/></parameters></signal><signal name="select_child" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkTree*" name="tree"/><parameter type="GtkWidget*" name="child);void"/><parameter type="GtkWidget*" name="child"/></parameters></signal><signal name="unselect_child" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkTree*" name="tree"/><parameter type="GtkWidget*" name="child"/></parameters></signal><method name="clear_items" cname="gtk_tree_clear_items"><return-type type="void"/></method><method name="prepend" cname="gtk_tree_prepend"><return-type type="void"/></method><method name="insert" cname="gtk_tree_insert"><return-type type="void"/></method><method name="append" cname="gtk_tree_append"><return-type type="void"/></method><method name="select_child" cname="gtk_tree_select_child"><return-type type="void"/></method><method name="child_position" cname="gtk_tree_child_position"><return-type type="gint"/></method><method name="remove_items" cname="gtk_tree_remove_items"><return-type type="void"/></method><method name="set_selection_mode" cname="gtk_tree_set_selection_mode"><return-type type="void"/></method><method name="remove_item" cname="gtk_tree_remove_item"><return-type type="void"/></method><method name="set_view_lines" cname="gtk_tree_set_view_lines"><return-type type="void"/></method><method name="select_item" cname="gtk_tree_select_item"><return-type type="void"/></method><method name="unselect_child" cname="gtk_tree_unselect_child"><return-type type="void"/></method><method name="set_view_mode" cname="gtk_tree_set_view_mode"><return-type type="void"/></method><constructor cname="gtk_tree_new"/><method name="unselect_item" cname="gtk_tree_unselect_item"><return-type type="void"/></method></object><object name="TreeItem" cname="GtkTreeItem" parent="GtkItem"><field cname="subtree" type="GtkWidget*"/><field cname="pixmaps_box" type="GtkWidget*"/><field cname="plus_pix_widget" type="GtkWidget*"/><field cname="* minus_pix_widget" type="GtkWidget*"/><field cname="pixmaps" type="GList*"/><field cname="expanded" bits="1" type="guint"/><signal name="expand" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkTreeItem*" name="tree_item);void"/></parameters></signal><signal name="collapse" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkTreeItem*" name="tree_item"/></parameters></signal><method name="collapse" cname="gtk_tree_item_collapse"><return-type type="void"/></method><constructor cname="gtk_tree_item_new_with_label"/><constructor cname="gtk_tree_item_new"/><method name="remove_subtree" cname="gtk_tree_item_remove_subtree"><return-type type="void"/></method><method name="select" cname="gtk_tree_item_select"><return-type type="void"/></method><method name="set_subtree" cname="gtk_tree_item_set_subtree"><return-type type="void"/></method><method name="expand" cname="gtk_tree_item_expand"><return-type type="void"/></method><method name="deselect" cname="gtk_tree_item_deselect"><return-type type="void"/></method></object><object name="TreeModelSort" cname="GtkTreeModelSort" parent="GObject"><field cname="root" type="gpointer"/><field cname="stamp" type="gint"/><field cname="child_flags" type="guint"/><field cname="child_model" type="GtkTreeModel*"/><field cname="zero_ref_count" type="gint"/><field cname="sort_list" type="GList*"/><field cname="sort_column_id" type="gint"/><field cname="order" type="GtkSortType"/><field cname="default_sort_func" type="GtkTreeIterCompareFunc"/><field cname="default_sort_data" type="gpointer"/><field cname="default_sort_destroy" type="GtkDestroyNotify"/><field cname="changed_id" type="guint"/><field cname="inserted_id" type="guint"/><field cname="has_child_toggled_id" type="guint"/><field cname="deleted_id" type="guint"/><field cname="reordered_id" type="guint"/><property name="Model" cname="model" type="GtkTreeModel" doc-string=" _(The model for the TreeModelSort to sort)" readable="true" writeable="true" construct-only="true"/><method name="convert_child_iter_to_iter" cname="gtk_tree_model_sort_convert_child_iter_to_iter"><return-type type="void"/></method><method name="convert_path_to_child_path" cname="gtk_tree_model_sort_convert_path_to_child_path"><return-type type="GtkTreePath*"/></method><method name="clear_cache" cname="gtk_tree_model_sort_clear_cache"><return-type type="void"/></method><method name="get_model" cname="gtk_tree_model_sort_get_model"><return-type type="GtkTreeModel*"/></method><method name="reset_default_sort_func" cname="gtk_tree_model_sort_reset_default_sort_func"><return-type type="void"/></method><method name="convert_iter_to_child_iter" cname="gtk_tree_model_sort_convert_iter_to_child_iter"><return-type type="void"/></method><method name="convert_child_path_to_path" cname="gtk_tree_model_sort_convert_child_path_to_path"><return-type type="GtkTreePath*"/></method></object><object name="TreeSelection" cname="GtkTreeSelection" parent="GObject"><field cname="tree_view" type="GtkTreeView*"/><field cname="type" type="GtkSelectionMode"/><field cname="user_func" type="GtkTreeSelectionFunc"/><field cname="user_data" type="gpointer"/><field cname="destroy" type="GtkDestroyNotify"/><signal name="changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkTreeSelection*" name="selection"/></parameters></signal><method name="select_iter" cname="gtk_tree_selection_select_iter"><return-type type="void"/></method><method name="unselect_all" cname="gtk_tree_selection_unselect_all"><return-type type="void"/></method><method name="path_is_selected" cname="gtk_tree_selection_path_is_selected"><return-type type="gboolean"/></method><method name="get_selected" cname="gtk_tree_selection_get_selected"><return-type type="gboolean"/></method><method name="get_tree_view" cname="gtk_tree_selection_get_tree_view"><return-type type="GtkTreeView*"/></method><method name="select_range" cname="gtk_tree_selection_select_range"><return-type type="void"/></method><method name="select_all" cname="gtk_tree_selection_select_all"><return-type type="void"/></method><method name="get_user_data" cname="gtk_tree_selection_get_user_data"><return-type type="gpointer"/></method><method name="get_mode" cname="gtk_tree_selection_get_mode"><return-type type="GtkSelectionMode"/></method><method name="unselect_path" cname="gtk_tree_selection_unselect_path"><return-type type="void"/></method><method name="select_path" cname="gtk_tree_selection_select_path"><return-type type="void"/></method><method name="iter_is_selected" cname="gtk_tree_selection_iter_is_selected"><return-type type="gboolean"/></method><method name="set_select_function" cname="gtk_tree_selection_set_select_function"><return-type type="void"/></method><method name="set_mode" cname="gtk_tree_selection_set_mode"><return-type type="void"/></method><method name="selected_foreach" cname="gtk_tree_selection_selected_foreach"><return-type type="void"/></method><method name="unselect_iter" cname="gtk_tree_selection_unselect_iter"><return-type type="void"/></method></object><object name="TreeStore" cname="GtkTreeStore" parent="GObject"><field cname="stamp" type="gint"/><field cname="root" type="gpointer"/><field cname="last" type="gpointer"/><field cname="n_columns" type="gint"/><field cname="sort_column_id" type="gint"/><field cname="sort_list" type="GList*"/><field cname="order" type="GtkSortType"/><field cname="column_headers" type="GType*"/><field cname="default_sort_func" type="GtkTreeIterCompareFunc"/><field cname="default_sort_data" type="gpointer"/><field cname="default_sort_destroy" type="GtkDestroyNotify"/><field cname="columns_dirty" bits="1" type="guint"/><method name="clear" cname="gtk_tree_store_clear"><return-type type="void"/></method><method name="set" cname="gtk_tree_store_set"><return-type type="void"/></method><method name="set_column_types" cname="gtk_tree_store_set_column_types"><return-type type="void"/></method><method name="set_value" cname="gtk_tree_store_set_value"><return-type type="void"/></method><method name="iter_depth" cname="gtk_tree_store_iter_depth"><return-type type="gint"/></method><constructor cname="gtk_tree_store_newv"/><constructor cname="gtk_tree_store_new"/><method name="remove" cname="gtk_tree_store_remove"><return-type type="void"/></method><method name="insert_before" cname="gtk_tree_store_insert_before"><return-type type="void"/></method><method name="set_valist" cname="gtk_tree_store_set_valist"><return-type type="void"/></method><method name="insert_after" cname="gtk_tree_store_insert_after"><return-type type="void"/></method><method name="insert" cname="gtk_tree_store_insert"><return-type type="void"/></method><method name="append" cname="gtk_tree_store_append"><return-type type="void"/></method><method name="prepend" cname="gtk_tree_store_prepend"><return-type type="void"/></method><method name="is_ancestor" cname="gtk_tree_store_is_ancestor"><return-type type="gboolean"/></method></object><object name="TreeView" cname="GtkTreeView" parent="GtkContainer"><field cname="priv" type="GtkTreeViewPrivate*"/><property name="Model" cname="model" type="GtkTreeModel" doc-string=" _(The model for the tree view)" readable="true" writeable="true"/><property name="Hadjustment" cname="hadjustment" type="GtkAdjustment" doc-string=" _(Horizontal Adjustment for the widget)" readable="true" writeable="true"/><property name="Vadjustment" cname="vadjustment" type="GtkAdjustment" doc-string=" _(Vertical Adjustment for the widget)" readable="true" writeable="true"/><property name="HeadersVisible" cname="headers_visible" type="gboolean" doc-string=" _(Show the column header buttons)" readable="true" writeable="true"/><property name="HeadersClickable" cname="headers_clickable" type="gboolean" doc-string=" _(Column headers respond to click events)" writeable="true"/><property name="ExpanderColumn" cname="expander_column" type="GtkTreeViewColumn" doc-string=" _(Set the column for the expander column)" readable="true" writeable="true"/><property name="Reorderable" cname="reorderable" type="gboolean" doc-string=" _(View is reorderable)" readable="true" writeable="true"/><property name="RulesHint" cname="rules_hint" type="gboolean" doc-string=" _(Set a hint to the theme engine to draw rows in alternating colors)" readable="true" writeable="true"/><property name="EnableSearch" cname="enable_search" type="gboolean" doc-string=" _(View allows user to search through columns interactively)" readable="true" writeable="true"/><property name="SearchColumn" cname="search_column" type="gint" doc-string=" _(Model column to search through when searching through code)" readable="true" writeable="true"/><signal name="set_scroll_adjustments" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkAdjustment*" name="hadjustment"/><parameter type="GtkAdjustment*" name="vadjustment);void"/><parameter type="GtkTreePath*" name="path"/><parameter type="GtkTreeViewColumn*" name="column);gboolean"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);gboolean"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="row_activated" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkTreePath*" name="path"/><parameter type="GtkTreeViewColumn*" name="column);gboolean"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);gboolean"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="test_expand_row" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);gboolean"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="test_collapse_row" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="row_expanded" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="row_collapsed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkTreeIter*" name="iter"/><parameter type="GtkTreePath*" name="path);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="columns_changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="cursor_changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view);void"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="move_cursor" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="GtkMovementStep" name="step"/><parameter type="gint" name="count);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="select_all" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view);void"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="select_cursor_row" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="gboolean" name="start_editing);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="toggle_cursor_row" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view);void"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="expand_collapse_cursor_row" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/><parameter type="gboolean" name="logical"/><parameter type="gboolean" name="expand"/><parameter type="gboolean" name="open_all);void"/></parameters></signal><signal name="select_cursor_parent" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view);void"/></parameters></signal><signal name="start_interactive_search" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeView*" name="tree_view"/></parameters></signal><method name="get_search_column" cname="gtk_tree_view_get_search_column"><return-type type="gint"/></method><method name="get_drag_dest_row" cname="gtk_tree_view_get_drag_dest_row"><return-type type="void"/></method><method name="set_headers_clickable" cname="gtk_tree_view_set_headers_clickable"><return-type type="void"/></method><method name="set_search_equal_func" cname="gtk_tree_view_set_search_equal_func"><return-type type="void"/></method><method name="set_model" cname="gtk_tree_view_set_model"><return-type type="void"/></method><method name="get_path_at_pos" cname="gtk_tree_view_get_path_at_pos"><return-type type="gboolean"/></method><method name="insert_column" cname="gtk_tree_view_insert_column"><return-type type="gint"/></method><method name="enable_model_drag_source" cname="gtk_tree_view_enable_model_drag_source"><return-type type="void"/></method><method name="get_headers_visible" cname="gtk_tree_view_get_headers_visible"><return-type type="gboolean"/></method><method name="expand_all" cname="gtk_tree_view_expand_all"><return-type type="void"/></method><method name="set_destroy_count_func" cname="gtk_tree_view_set_destroy_count_func"><return-type type="void"/></method><method name="move_column_after" cname="gtk_tree_view_move_column_after"><return-type type="void"/></method><method name="get_dest_row_at_pos" cname="gtk_tree_view_get_dest_row_at_pos"><return-type type="gboolean"/></method><method name="set_cursor" cname="gtk_tree_view_set_cursor"><return-type type="void"/></method><method name="set_reorderable" cname="gtk_tree_view_set_reorderable"><return-type type="void"/></method><method name="get_model" cname="gtk_tree_view_get_model"><return-type type="GtkTreeModel*"/></method><method name="map_expanded_rows" cname="gtk_tree_view_map_expanded_rows"><return-type type="void"/></method><method name="get_column" cname="gtk_tree_view_get_column"><return-type type="GtkTreeViewColumn*"/></method><method name="get_background_area" cname="gtk_tree_view_get_background_area"><return-type type="void"/></method><method name="set_headers_visible" cname="gtk_tree_view_set_headers_visible"><return-type type="void"/></method><method name="remove_column" cname="gtk_tree_view_remove_column"><return-type type="gint"/></method><method name="get_expander_column" cname="gtk_tree_view_get_expander_column"><return-type type="GtkTreeViewColumn*"/></method><method name="get_reorderable" cname="gtk_tree_view_get_reorderable"><return-type type="gboolean"/></method><method name="get_rules_hint" cname="gtk_tree_view_get_rules_hint"><return-type type="gboolean"/></method><method name="row_activated" cname="gtk_tree_view_row_activated"><return-type type="void"/></method><method name="widget_to_tree_coords" cname="gtk_tree_view_widget_to_tree_coords"><return-type type="void"/></method><method name="get_search_equal_func" cname="gtk_tree_view_get_search_equal_func"><return-type type="GtkTreeViewSearchEqualFunc"/></method><method name="create_row_drag_icon" cname="gtk_tree_view_create_row_drag_icon"><return-type type="GdkPixmap*"/></method><method name="get_visible_rect" cname="gtk_tree_view_get_visible_rect"><return-type type="void"/></method><method name="expand_row" cname="gtk_tree_view_expand_row"><return-type type="gboolean"/></method><method name="tree_to_widget_coords" cname="gtk_tree_view_tree_to_widget_coords"><return-type type="void"/></method><method name="insert_column_with_attributes" cname="gtk_tree_view_insert_column_with_attributes"><return-type type="gint"/></method><method name="set_enable_search" cname="gtk_tree_view_set_enable_search"><return-type type="void"/></method><method name="set_search_column" cname="gtk_tree_view_set_search_column"><return-type type="void"/></method><method name="collapse_all" cname="gtk_tree_view_collapse_all"><return-type type="void"/></method><constructor cname="gtk_tree_view_new_with_model"/><method name="set_drag_dest_row" cname="gtk_tree_view_set_drag_dest_row"><return-type type="void"/></method><method name="row_expanded" cname="gtk_tree_view_row_expanded"><return-type type="gboolean"/></method><method name="set_hadjustment" cname="gtk_tree_view_set_hadjustment"><return-type type="void"/></method><method name="set_rules_hint" cname="gtk_tree_view_set_rules_hint"><return-type type="void"/></method><method name="get_bin_window" cname="gtk_tree_view_get_bin_window"><return-type type="GdkWindow*"/></method><method name="set_column_drag_function" cname="gtk_tree_view_set_column_drag_function"><return-type type="void"/></method><method name="columns_autosize" cname="gtk_tree_view_columns_autosize"><return-type type="void"/></method><method name="set_expander_column" cname="gtk_tree_view_set_expander_column"><return-type type="void"/></method><constructor cname="gtk_tree_view_new"/><method name="unset_rows_drag_dest" cname="gtk_tree_view_unset_rows_drag_dest"><return-type type="void"/></method><method name="scroll_to_cell" cname="gtk_tree_view_scroll_to_cell"><return-type type="void"/></method><method name="enable_model_drag_dest" cname="gtk_tree_view_enable_model_drag_dest"><return-type type="void"/></method><method name="get_columns" cname="gtk_tree_view_get_columns"><return-type type="GList*"/></method><method name="set_vadjustment" cname="gtk_tree_view_set_vadjustment"><return-type type="void"/></method><method name="scroll_to_point" cname="gtk_tree_view_scroll_to_point"><return-type type="void"/></method><method name="get_cursor" cname="gtk_tree_view_get_cursor"><return-type type="void"/></method><method name="get_hadjustment" cname="gtk_tree_view_get_hadjustment"><return-type type="GtkAdjustment*"/></method><method name="insert_column_with_data_func" cname="gtk_tree_view_insert_column_with_data_func"><return-type type="gint"/></method><method name="get_cell_area" cname="gtk_tree_view_get_cell_area"><return-type type="void"/></method><method name="get_vadjustment" cname="gtk_tree_view_get_vadjustment"><return-type type="GtkAdjustment*"/></method><method name="append_column" cname="gtk_tree_view_append_column"><return-type type="gint"/></method><method name="get_enable_search" cname="gtk_tree_view_get_enable_search"><return-type type="gboolean"/></method><method name="unset_rows_drag_source" cname="gtk_tree_view_unset_rows_drag_source"><return-type type="void"/></method><method name="collapse_row" cname="gtk_tree_view_collapse_row"><return-type type="gboolean"/></method><method name="get_selection" cname="gtk_tree_view_get_selection"><return-type type="GtkTreeSelection*"/></method></object><object name="TreeViewColumn" cname="GtkTreeViewColumn" parent="GtkObject"><field cname="tree_view" type="GtkWidget*"/><field cname="button" type="GtkWidget*"/><field cname="child" type="GtkWidget*"/><field cname="arrow" type="GtkWidget*"/><field cname="alignment" type="GtkWidget*"/><field cname="window" type="GdkWindow*"/><field cname="editable_widget" type="GtkCellEditable*"/><field cname="xalign" type="gfloat"/><field cname="property_changed_signal" type="guint"/><field cname="spacing" type="gint"/><field cname="column_type" type="GtkTreeViewColumnSizing"/><field cname="requested_width" type="gint"/><field cname="button_request" type="gint"/><field cname="resized_width" type="gint"/><field cname="width" type="gint"/><field cname="fixed_width" type="gint"/><field cname="min_width" type="gint"/><field cname="max_width" type="gint"/><field cname="drag_x" type="gint"/><field cname="drag_y" type="gint"/><field cname="title" type="gchar*"/><field cname="cell_list" type="GList*"/><field cname="sort_clicked_signal" type="guint"/><field cname="sort_column_changed_signal" type="guint"/><field cname="sort_column_id" type="gint"/><field cname="sort_order" type="GtkSortType"/><field cname="visible" bits="1" type="guint"/><field cname="resizable" bits="1" type="guint"/><field cname="clickable" bits="1" type="guint"/><field cname="dirty" bits="1" type="guint"/><field cname="show_sort_indicator" bits="1" type="guint"/><field cname="maybe_reordered" bits="1" type="guint"/><field cname="reorderable" bits="1" type="guint"/><field cname="use_resized_width" bits="1" type="guint"/><signal name="clicked" when="LAST"><return-type type="void"/><parameters><parameter type="GtkTreeViewColumn*" name="tree_column"/></parameters></signal><property name="Visible" cname="visible" type="gboolean" doc-string=" _(Whether to display the column)" readable="true" writeable="true"/><property name="Resizable" cname="resizable" type="gboolean" doc-string=" _(Column is user-resizable)" readable="true" writeable="true"/><property name="Width" cname="width" type="gint" doc-string=" _(Current width of the column)" readable="true"/><property name="Sizing" cname="sizing" type="GtkTreeViewColumnSizing" doc-string=" _(Resize mode of the column)" readable="true" writeable="true"/><property name="FixedWidth" cname="fixed_width" type="gint" doc-string=" _(Current fixed width of the column)" readable="true" writeable="true"/><property name="MinWidth" cname="min_width" type="gint" doc-string=" _(Minimum allowed width of the column)" readable="true" writeable="true"/><property name="MaxWidth" cname="max_width" type="gint" doc-string=" _(Maximum allowed width of the column)" readable="true" writeable="true"/><property name="Title" cname="title" type="gchar*" doc-string=" _(Title to appear in column header)" readable="true" writeable="true"/><property name="Clickable" cname="clickable" type="gboolean" doc-string=" _(Whether the header can be clicked)" readable="true" writeable="true"/><property name="Widget" cname="widget" type="GtkWidget" doc-string=" _(Widget to put in column header button instead of column title)" readable="true" writeable="true"/><property name="Alignment" cname="alignment" type="gfloat" doc-string=" _(X Alignment of the column header text or widget)" readable="true" writeable="true"/><property name="Reorderable" cname="reorderable" type="gboolean" doc-string=" _(Whether the column can be reordered around the headers)" readable="true" writeable="true"/><property name="SortIndicator" cname="sort_indicator" type="gboolean" doc-string=" _(Whether to show a sort indicator)" readable="true" writeable="true"/><property name="SortOrder" cname="sort_order" type="GtkSortType" doc-string=" _(Sort direction the sort indicator should indicate)" readable="true" writeable="true"/><method name="get_sizing" cname="gtk_tree_view_column_get_sizing"><return-type type="GtkTreeViewColumnSizing"/></method><method name="cell_focus" cname="gtk_tree_view_column_cell_focus"><return-type type="gboolean"/></method><method name="set_sort_order" cname="gtk_tree_view_column_set_sort_order"><return-type type="void"/></method><method name="set_spacing" cname="gtk_tree_view_column_set_spacing"><return-type type="void"/></method><method name="cell_render" cname="gtk_tree_view_column_cell_render"><return-type type="void"/></method><method name="get_visible" cname="gtk_tree_view_column_get_visible"><return-type type="gboolean"/></method><method name="cell_is_visible" cname="gtk_tree_view_column_cell_is_visible"><return-type type="gboolean"/></method><method name="set_sort_column_id" cname="gtk_tree_view_column_set_sort_column_id"><return-type type="void"/></method><method name="get_min_width" cname="gtk_tree_view_column_get_min_width"><return-type type="gint"/></method><method name="set_reorderable" cname="gtk_tree_view_column_set_reorderable"><return-type type="void"/></method><method name="set_widget" cname="gtk_tree_view_column_set_widget"><return-type type="void"/></method><method name="pack_end" cname="gtk_tree_view_column_pack_end"><return-type type="void"/></method><method name="cell_get_size" cname="gtk_tree_view_column_cell_get_size"><return-type type="void"/></method><method name="clicked" cname="gtk_tree_view_column_clicked"><return-type type="void"/></method><method name="get_resizable" cname="gtk_tree_view_column_get_resizable"><return-type type="gboolean"/></method><method name="set_cell_data_func" cname="gtk_tree_view_column_set_cell_data_func"><return-type type="void"/></method><method name="get_sort_column_id" cname="gtk_tree_view_column_get_sort_column_id"><return-type type="gint"/></method><method name="cell_set_dirty" cname="gtk_tree_view_column_cell_set_dirty"><return-type type="void"/></method><method name="set_fixed_width" cname="gtk_tree_view_column_set_fixed_width"><return-type type="void"/></method><method name="get_cell_renderers" cname="gtk_tree_view_column_get_cell_renderers"><return-type type="GList*"/></method><method name="set_sort_indicator" cname="gtk_tree_view_column_set_sort_indicator"><return-type type="void"/></method><method name="get_reorderable" cname="gtk_tree_view_column_get_reorderable"><return-type type="gboolean"/></method><method name="set_clickable" cname="gtk_tree_view_column_set_clickable"><return-type type="void"/></method><method name="set_title" cname="gtk_tree_view_column_set_title"><return-type type="void"/></method><method name="get_width" cname="gtk_tree_view_column_get_width"><return-type type="gint"/></method><method name="set_visible" cname="gtk_tree_view_column_set_visible"><return-type type="void"/></method><method name="set_alignment" cname="gtk_tree_view_column_set_alignment"><return-type type="void"/></method><method name="clear_attributes" cname="gtk_tree_view_column_clear_attributes"><return-type type="void"/></method><method name="clear" cname="gtk_tree_view_column_clear"><return-type type="void"/></method><method name="cell_draw_focus" cname="gtk_tree_view_column_cell_draw_focus"><return-type type="void"/></method><method name="set_sizing" cname="gtk_tree_view_column_set_sizing"><return-type type="void"/></method><method name="get_fixed_width" cname="gtk_tree_view_column_get_fixed_width"><return-type type="gint"/></method><method name="get_sort_indicator" cname="gtk_tree_view_column_get_sort_indicator"><return-type type="gboolean"/></method><method name="pack_start" cname="gtk_tree_view_column_pack_start"><return-type type="void"/></method><method name="get_title" cname="gtk_tree_view_column_get_title"><return-type type="const-gchar*"/></method><constructor cname="gtk_tree_view_column_new_with_attributes"/><method name="set_max_width" cname="gtk_tree_view_column_set_max_width"><return-type type="void"/></method><method name="get_widget" cname="gtk_tree_view_column_get_widget"><return-type type="GtkWidget*"/></method><method name="get_spacing" cname="gtk_tree_view_column_get_spacing"><return-type type="gint"/></method><method name="get_clickable" cname="gtk_tree_view_column_get_clickable"><return-type type="gboolean"/></method><method name="set_attributes" cname="gtk_tree_view_column_set_attributes"><return-type type="void"/></method><method name="get_alignment" cname="gtk_tree_view_column_get_alignment"><return-type type="gfloat"/></method><method name="set_min_width" cname="gtk_tree_view_column_set_min_width"><return-type type="void"/></method><constructor cname="gtk_tree_view_column_new"/><method name="add_attribute" cname="gtk_tree_view_column_add_attribute"><return-type type="void"/></method><method name="get_sort_order" cname="gtk_tree_view_column_get_sort_order"><return-type type="GtkSortType"/></method><method name="set_resizable" cname="gtk_tree_view_column_set_resizable"><return-type type="void"/></method><method name="get_max_width" cname="gtk_tree_view_column_get_max_width"><return-type type="gint"/></method><method name="cell_set_cell_data" cname="gtk_tree_view_column_cell_set_cell_data"><return-type type="void"/></method></object><object name="VBox" cname="GtkVBox" parent="GtkBox"><constructor cname="gtk_vbox_new"/></object><object name="VButtonBox" cname="GtkVButtonBox" parent="GtkButtonBox"><constructor cname="gtk_vbutton_box_new"/></object><object name="Viewport" cname="GtkViewport" parent="GtkBin"><field cname="shadow_type" type="GtkShadowType"/><field cname="view_window" type="GdkWindow*"/><field cname="bin_window" type="GdkWindow*"/><field cname="hadjustment" type="GtkAdjustment*"/><field cname="vadjustment" type="GtkAdjustment*"/><property name="Hadjustment" cname="hadjustment" type="GtkAdjustment" doc-string=" _(The GtkAdjustment that determines the values of the horizontal position for this viewport.)" readable="true" writeable="true"/><property name="Vadjustment" cname="vadjustment" type="GtkAdjustment" doc-string=" _(The GtkAdjustment that determines the values of the vertical position for this viewport.)" readable="true" writeable="true"/><property name="ShadowType" cname="shadow_type" type="GtkShadowType" doc-string=" _(Determines how the shadowed box around the viewport is drawn.)" readable="true" writeable="true"/><signal name="set_scroll_adjustments" when="LAST"><return-type type="void"/><parameters><parameter type="GtkViewport*" name="viewport"/><parameter type="GtkAdjustment*" name="hadjustment"/><parameter type="GtkAdjustment*" name="vadjustment"/></parameters></signal><method name="set_shadow_type" cname="gtk_viewport_set_shadow_type"><return-type type="void"/></method><method name="set_hadjustment" cname="gtk_viewport_set_hadjustment"><return-type type="void"/></method><constructor cname="gtk_viewport_new"/><method name="set_vadjustment" cname="gtk_viewport_set_vadjustment"><return-type type="void"/></method><method name="get_shadow_type" cname="gtk_viewport_get_shadow_type"><return-type type="GtkShadowType"/></method><method name="get_hadjustment" cname="gtk_viewport_get_hadjustment"><return-type type="GtkAdjustment*"/></method><method name="get_vadjustment" cname="gtk_viewport_get_vadjustment"><return-type type="GtkAdjustment*"/></method></object><object name="VPaned" cname="GtkVPaned" parent="GtkPaned"><constructor cname="gtk_vpaned_new"/></object><object name="VRuler" cname="GtkVRuler" parent="GtkRuler"><constructor cname="gtk_vruler_new"/></object><object name="VScale" cname="GtkVScale" parent="GtkScale"><constructor cname="gtk_vscale_new"/><constructor cname="gtk_vscale_new_with_range"/></object><object name="VScrollbar" cname="GtkVScrollbar" parent="GtkScrollbar"><constructor cname="gtk_vscrollbar_new"/></object><object name="VSeparator" cname="GtkVSeparator" parent="GtkSeparator"><constructor cname="gtk_vseparator_new"/></object><object name="Widget" cname="GtkWidget" parent="GtkObject"><field cname="private_flags" type="guint16"/><field cname="state" type="guint8"/><field cname="saved_state" type="guint8"/><field cname="name" type="gchar*"/><field cname="style" type="GtkStyle*"/><field cname="requisition" type="GtkRequisition"/><field cname="allocation" type="GtkAllocation"/><field cname="window" type="GdkWindow*"/><field cname="parent" type="GtkWidget*"/><property name="Name" cname="name" type="gchar*" doc-string=" _(The name of the widget)" readable="true" writeable="true"/><property name="Parent" cname="parent" type="GtkContainer" doc-string=" _(The parent widget of this widget. Must be a Container widget.)" readable="true" writeable="true"/><property name="WidthRequest" cname="width_request" type="gint" doc-string=" _(Override for width request of the widget, or -1 if natural request should be used.)" readable="true" writeable="true"/><property name="HeightRequest" cname="height_request" type="gint" doc-string=" _(Override for height request of the widget, or -1 if natural request should be used.)" readable="true" writeable="true"/><property name="Visible" cname="visible" type="gboolean" doc-string=" _(Whether the widget is visible)" readable="true" writeable="true"/><property name="Sensitive" cname="sensitive" type="gboolean" doc-string=" _(Whether the widget responds to input)" readable="true" writeable="true"/><property name="AppPaintable" cname="app_paintable" type="gboolean" doc-string=" _(Whether the application will paint directly on the widget)" readable="true" writeable="true"/><property name="CanFocus" cname="can_focus" type="gboolean" doc-string=" _(Whether the widget can accept the input focus)" readable="true" writeable="true"/><property name="HasFocus" cname="has_focus" type="gboolean" doc-string=" _(Whether the widget has the input focus)" readable="true" writeable="true"/><property name="CanDefault" cname="can_default" type="gboolean" doc-string=" _(Whether the widget can be the default widget)" readable="true" writeable="true"/><property name="HasDefault" cname="has_default" type="gboolean" doc-string=" _(Whether the widget is the default widget)" readable="true" writeable="true"/><property name="ReceivesDefault" cname="receives_default" type="gboolean" doc-string=" _(If TRUE, the widget will receive the default action when it is focused.)" readable="true" writeable="true"/><property name="CompositeChild" cname="composite_child" type="gboolean" doc-string=" _(Whether the widget is composed of other widgets)" readable="true"/><property name="Style" cname="style" type="GtkStyle" doc-string=" _(The style of the widget, which contains information about how it will look (colors etc).)" readable="true" writeable="true"/><property name="Events" cname="events" type="GdkEventMask" doc-string=" _(The event mask that decides what kind of GdkEvents this widget gets.)" readable="true" writeable="true"/><property name="ExtensionEvents" cname="extension_events" type="GdkExtensionMode" doc-string=" _(The mask that decides what kind of extension events this widget gets.)" readable="true" writeable="true"/><signal name="show" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget);void"/><parameter type="GtkRequisition*" name="requisition);void"/><parameter type="GtkAllocation*" name="allocation);void"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="hide" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget);void"/><parameter type="GtkRequisition*" name="requisition);void"/><parameter type="GtkAllocation*" name="allocation);void"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="map" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget);void"/><parameter type="GtkRequisition*" name="requisition);void"/><parameter type="GtkAllocation*" name="allocation);void"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="unmap" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget);void"/><parameter type="GtkRequisition*" name="requisition);void"/><parameter type="GtkAllocation*" name="allocation);void"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="realize" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget);void"/><parameter type="GtkRequisition*" name="requisition);void"/><parameter type="GtkAllocation*" name="allocation);void"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="unrealize" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget);void"/><parameter type="GtkRequisition*" name="requisition);void"/><parameter type="GtkAllocation*" name="allocation);void"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="size_request" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkRequisition*" name="requisition);void"/><parameter type="GtkAllocation*" name="allocation);void"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="size_allocate" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkAllocation*" name="allocation);void"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="state_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkStateType" name="previous_state);void"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="parent_set" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkWidget*" name="previous_parent);void"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="hierarchy_changed" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkWidget*" name="previous_toplevel);void"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="style_set" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkStyle*" name="previous_style);void"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="direction_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkTextDirection" name="previous_direction);void"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="grab_notify" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="gboolean" name="was_grabbed);void"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="child_notify" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GParamSpec*" name="pspec);gboolean"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="mnemonic_activate" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="gboolean" name="group_cycling);void"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="grab_focus" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget);gboolean"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="focus" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkDirectionType" name="direction);gboolean"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEvent*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal><return-type type="GNone"/><parameters><parameter name="p0" type="GdkEvent|gSignalTypeStaticScope);"/></parameters></signal><signal name="button_press_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="button_release_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventButton*" name="event);gboolean"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="scroll_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventScroll*" name="event);gboolean"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="motion_notify_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventMotion*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="delete_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="destroy_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="expose_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventExpose*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="key_press_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="key_release_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventKey*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="enter_notify_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="leave_notify_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventCrossing*" name="event);gboolean"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="configure_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventConfigure*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="focus_in_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="focus_out_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventFocus*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="map_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="unmap_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="property_notify_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventProperty*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="selection_clear_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="selection_request_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="selection_notify_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventSelection*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="selection_received" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="selection_get" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="proximity_in_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="proximity_out_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventProximity*" name="event);gboolean"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="drag_leave" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="drag_begin" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="drag_end" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="drag_data_delete" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="drag_motion" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="drag_drop" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="drag_data_get" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="drag_data_received" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="visibility_notify_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventVisibility*" name="event);gboolean"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="client_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventClient*" name="event);gboolean"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="no_expose_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventAny*" name="event);gboolean"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="window_state_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GdkEventWindowState*" name="event);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);gboolean"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="guint" name="time);void"/><parameter type="GdkDragContext*" name="context"/><parameter type="gint" name="x"/><parameter type="gint" name="y"/><parameter type="GtkSelectionData*" name="selection_data"/><parameter type="guint" name="info"/><parameter type="guint" name="time);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="popup_menu" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget);void"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="show_help" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWidget*" name="widget"/><parameter type="GtkWidgetHelpType" name="help_type);AtkObject*"/></parameters></signal><signal name="accel_closures_changed"><return-type type=""/></signal><method name="get_pango_context" cname="gtk_widget_get_pango_context"><return-type type="PangoContext*"/></method><method name="propagate_hierarchy_changed" cname="_gtk_widget_propagate_hierarchy_changed"><return-type type="void"/></method><method name="show" cname="gtk_widget_show"><return-type type="void"/></method><method name="hide_all" cname="gtk_widget_hide_all"><return-type type="void"/></method><method name="add_accelerator" cname="gtk_widget_add_accelerator"><return-type type="void"/></method><method name="remove_accelerator" cname="gtk_widget_remove_accelerator"><return-type type="gboolean"/></method><method name="queue_draw" cname="gtk_widget_queue_draw"><return-type type="void"/></method><method name="get_child_visible" cname="gtk_widget_get_child_visible"><return-type type="gboolean"/></method><method name="class_path" cname="gtk_widget_class_path"><return-type type="void"/></method><method name="freeze_child_notify" cname="gtk_widget_freeze_child_notify"><return-type type="void"/></method><method name="modify_font" cname="gtk_widget_modify_font"><return-type type="void"/></method><method name="set_parent" cname="gtk_widget_set_parent"><return-type type="void"/></method><method name="send_expose" cname="gtk_widget_send_expose"><return-type type="gint"/></method><method name="get_direction" cname="gtk_widget_get_direction"><return-type type="GtkTextDirection"/></method><method name="modify_base" cname="gtk_widget_modify_base"><return-type type="void"/></method><method name="get_events" cname="gtk_widget_get_events"><return-type type="gint"/></method><method name="size_request" cname="gtk_widget_size_request"><return-type type="void"/></method><method name="modify_text" cname="gtk_widget_modify_text"><return-type type="void"/></method><method name="set_extension_events" cname="gtk_widget_set_extension_events"><return-type type="void"/></method><method name="set_composite_name" cname="gtk_widget_set_composite_name"><return-type type="void"/></method><method name="region_intersect" cname="gtk_widget_region_intersect"><return-type type="GdkRegion*"/></method><method name="destroy" cname="gtk_widget_destroy"><return-type type="void"/></method><method name="style_get" cname="gtk_widget_style_get"><return-type type="void"/></method><method name="ref" cname="gtk_widget_ref"><return-type type="GtkWidget*"/></method><method name="translate_coordinates" cname="gtk_widget_translate_coordinates"><return-type type="gboolean"/></method><method name="unparent" cname="gtk_widget_unparent"><return-type type="void"/></method><method name="unref" cname="gtk_widget_unref"><return-type type="void"/></method><method name="child_notify" cname="gtk_widget_child_notify"><return-type type="void"/></method><method name="get_settings" cname="gtk_widget_get_settings"><return-type type="GtkSettings*"/></method><method name="unrealize" cname="gtk_widget_unrealize"><return-type type="void"/></method><method name="add_events" cname="gtk_widget_add_events"><return-type type="void"/></method><method name="get_parent_window" cname="gtk_widget_get_parent_window"><return-type type="GdkWindow*"/></method><method name="mnemonic_activate" cname="gtk_widget_mnemonic_activate"><return-type type="gboolean"/></method><method name="hide" cname="gtk_widget_hide"><return-type type="void"/></method><method name="modify_style" cname="gtk_widget_modify_style"><return-type type="void"/></method><method name="child_focus" cname="gtk_widget_child_focus"><return-type type="gboolean"/></method><method name="set_app_paintable" cname="gtk_widget_set_app_paintable"><return-type type="void"/></method><method name="thaw_child_notify" cname="gtk_widget_thaw_child_notify"><return-type type="void"/></method><method name="get_composite_name" cname="gtk_widget_get_composite_name"><return-type type="gchar*"/></method><method name="reparent" cname="gtk_widget_reparent"><return-type type="void"/></method><method name="map" cname="gtk_widget_map"><return-type type="void"/></method><method name="get_pointer" cname="gtk_widget_get_pointer"><return-type type="void"/></method><method name="unmap" cname="gtk_widget_unmap"><return-type type="void"/></method><method name="get_extension_events" cname="gtk_widget_get_extension_events"><return-type type="GdkExtensionMode"/></method><method name="destroyed" cname="gtk_widget_destroyed"><return-type type="void"/></method><method name="realize" cname="gtk_widget_realize"><return-type type="void"/></method><method name="get_accessible" cname="gtk_widget_get_accessible"><return-type type="AtkObject*"/></method><method name="set_colormap" cname="gtk_widget_set_colormap"><return-type type="void"/></method><method name="event" cname="gtk_widget_event"><return-type type="gboolean"/></method><method name="get_accel_path" cname="_gtk_widget_get_accel_path"><return-type type="const-gchar*"/></method><method name="set_state" cname="gtk_widget_set_state"><return-type type="void"/></method><method name="queue_draw_area" cname="gtk_widget_queue_draw_area"><return-type type="void"/></method><method name="is_ancestor" cname="gtk_widget_is_ancestor"><return-type type="gboolean"/></method><method name="style_get_valist" cname="gtk_widget_style_get_valist"><return-type type="void"/></method><method name="set_style" cname="gtk_widget_set_style"><return-type type="void"/></method><method name="show_all" cname="gtk_widget_show_all"><return-type type="void"/></method><method name="get_child_requisition" cname="gtk_widget_get_child_requisition"><return-type type="void"/></method><method name="is_focus" cname="gtk_widget_is_focus"><return-type type="gboolean"/></method><method name="render_icon" cname="gtk_widget_render_icon"><return-type type="GdkPixbuf*"/></method><method name="set_size_request" cname="gtk_widget_set_size_request"><return-type type="void"/></method><method name="get_name" cname="gtk_widget_get_name"><return-type type="const-gchar*"/></method><method name="grab_focus" cname="gtk_widget_grab_focus"><return-type type="void"/></method><method name="modify_bg" cname="gtk_widget_modify_bg"><return-type type="void"/></method><method name="get_parent" cname="gtk_widget_get_parent"><return-type type="GtkWidget*"/></method><method name="set_sensitive" cname="gtk_widget_set_sensitive"><return-type type="void"/></method><method name="set_accel_path" cname="_gtk_widget_set_accel_path"><return-type type="void"/></method><method name="set_events" cname="gtk_widget_set_events"><return-type type="void"/></method><method name="modify_fg" cname="gtk_widget_modify_fg"><return-type type="void"/></method><method name="create_pango_context" cname="gtk_widget_create_pango_context"><return-type type="PangoContext*"/></method><method name="size_allocate" cname="gtk_widget_size_allocate"><return-type type="void"/></method><method name="set_child_visible" cname="gtk_widget_set_child_visible"><return-type type="void"/></method><method name="show_now" cname="gtk_widget_show_now"><return-type type="void"/></method><method name="activate" cname="gtk_widget_activate"><return-type type="gboolean"/></method><method name="get_style" cname="gtk_widget_get_style"><return-type type="GtkStyle*"/></method><method name="get_ancestor" cname="gtk_widget_get_ancestor"><return-type type="GtkWidget*"/></method><method name="get_toplevel" cname="gtk_widget_get_toplevel"><return-type type="GtkWidget*"/></method><method name="set_scroll_adjustments" cname="gtk_widget_set_scroll_adjustments"><return-type type="gboolean"/></method><method name="set_double_buffered" cname="gtk_widget_set_double_buffered"><return-type type="void"/></method><method name="get_modifier_style" cname="gtk_widget_get_modifier_style"><return-type type="GtkRcStyle*"/></method><method name="ensure_style" cname="gtk_widget_ensure_style"><return-type type="void"/></method><method name="shape_combine_mask" cname="gtk_widget_shape_combine_mask"><return-type type="void"/></method><method name="queue_resize" cname="gtk_widget_queue_resize"><return-type type="void"/></method><method name="style_get_property" cname="gtk_widget_style_get_property"><return-type type="void"/></method><method name="list_accel_closures" cname="gtk_widget_list_accel_closures"><return-type type="GList*"/></method><method name="set_direction" cname="gtk_widget_set_direction"><return-type type="void"/></method><method name="set_redraw_on_allocate" cname="gtk_widget_set_redraw_on_allocate"><return-type type="void"/></method><method name="set_name" cname="gtk_widget_set_name"><return-type type="void"/></method><method name="set_parent_window" cname="gtk_widget_set_parent_window"><return-type type="void"/></method><method name="reset_rc_styles" cname="gtk_widget_reset_rc_styles"><return-type type="void"/></method><method name="intersect" cname="gtk_widget_intersect"><return-type type="gboolean"/></method><method name="hide_on_delete" cname="gtk_widget_hide_on_delete"><return-type type="gboolean"/></method><method name="grab_default" cname="gtk_widget_grab_default"><return-type type="void"/></method><method name="reset_shapes" cname="gtk_widget_reset_shapes"><return-type type="void"/></method><method name="get_size_request" cname="gtk_widget_get_size_request"><return-type type="void"/></method><method name="create_pango_layout" cname="gtk_widget_create_pango_layout"><return-type type="PangoLayout*"/></method><method name="get_visual" cname="gtk_widget_get_visual"><return-type type="GdkVisual*"/></method><method name="path" cname="gtk_widget_path"><return-type type="void"/></method><method name="get_aux_info" cname="_gtk_widget_get_aux_info"><return-type type="GtkWidgetAuxInfo*"/></method><method name="get_colormap" cname="gtk_widget_get_colormap"><return-type type="GdkColormap*"/></method><constructor cname="gtk_widget_new"/></object><object name="Window" cname="GtkWindow" parent="GtkBin"><field cname="title" type="gchar*"/><field cname="wmclass_name" type="gchar*"/><field cname="wmclass_class" type="gchar*"/><field cname="wm_role" type="gchar*"/><field cname="focus_widget" type="GtkWidget*"/><field cname="default_widget" type="GtkWidget*"/><field cname="transient_parent" type="GtkWindow*"/><field cname="geometry_info" type="GtkWindowGeometryInfo*"/><field cname="frame" type="GdkWindow*"/><field cname="group" type="GtkWindowGroup*"/><field cname="configure_request_count" type="guint16"/><field cname="allow_shrink" bits="1" type="guint"/><field cname="allow_grow" bits="1" type="guint"/><field cname="configure_notify_received" bits="1" type="guint"/><field cname="need_default_position" bits="1" type="guint"/><field cname="need_default_size" bits="1" type="guint"/><field cname="position" bits="3" type="guint"/><field cname="type" bits="4" type="GtkWindowType"/><field cname="has_user_ref_count" bits="1" type="guint"/><field cname="has_focus" bits="1" type="guint"/><field cname="modal" bits="1" type="guint"/><field cname="destroy_with_parent" bits="1" type="guint"/><field cname="has_frame" bits="1" type="guint"/><field cname="iconify_initially" bits="1" type="guint"/><field cname="stick_initially" bits="1" type="guint"/><field cname="maximize_initially" bits="1" type="guint"/><field cname="decorated" bits="1" type="guint"/><field cname="type_hint" bits="3" type="GdkWindowTypeHint"/><field cname="gravity" bits="5" type="GdkGravity"/><field cname="frame_left" type="guint"/><field cname="frame_top" type="guint"/><field cname="frame_right" type="guint"/><field cname="frame_bottom" type="guint"/><field cname="keys_changed_handler" type="guint"/><field cname="mnemonic_modifier" type="GdkModifierType"/><field cname="gtk_reserved1" type="gpointer"/><property name="Type" cname="type" type="GtkWindowType" doc-string=" _(The type of the window)" readable="true" writeable="true" construct-only="true"/><property name="Title" cname="title" type="gchar*" doc-string=" _(The title of the window)" readable="true" writeable="true"/><property name="AllowShrink" cname="allow_shrink" type="gboolean" doc-string=" /* xgettext:no-c-format */ _(If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea.)" readable="true" writeable="true"/><property name="AllowGrow" cname="allow_grow" type="gboolean" doc-string=" _(If TRUE, users can expand the window beyond its minimum size.)" readable="true" writeable="true"/><property name="Resizable" cname="resizable" type="gboolean" doc-string=" _(If TRUE, users can resize the window.)" readable="true" writeable="true"/><property name="Modal" cname="modal" type="gboolean" doc-string=" _(If TRUE, the window is modal (other windows are not usable while this one is up).)" readable="true" writeable="true"/><property name="WindowPosition" cname="window_position" type="GtkWindowPosition" doc-string=" _(The initial position of the window.)" readable="true" writeable="true"/><property name="DefaultWidth" cname="default_width" type="gint" doc-string=" _(The default width of the window, used when initially showing the window.)" readable="true" writeable="true"/><property name="DefaultHeight" cname="default_height" type="gint" doc-string=" _(The default height of the window, used when initially showing the window.)" readable="true" writeable="true"/><property name="DestroyWithParent" cname="destroy_with_parent" type="gboolean" doc-string=" _(If this window should be destroyed when the parent is destroyed)" readable="true" writeable="true"/><property name="Icon" cname="icon" type="GdkPixbuf" doc-string=" _(Icon for this window)" readable="true" writeable="true"/><signal name="set_focus" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWindow*" name="window"/><parameter type="GtkWidget*" name="focus);gboolean"/><parameter type="GdkEvent*" name="event);void"/><parameter type="GtkDirectionType" name="direction);"/></parameters></signal><signal name="frame_event" when="LAST"><return-type type="gboolean"/><parameters><parameter type="GtkWindow*" name="window"/><parameter type="GdkEvent*" name="event);void"/><parameter type="GtkDirectionType" name="direction);"/></parameters></signal><signal name="activate_focus" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWindow*" name="window);void"/><parameter type="GtkDirectionType" name="direction);"/></parameters></signal><signal name="activate_default" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWindow*" name="window);void"/><parameter type="GtkDirectionType" name="direction);"/></parameters></signal><signal name="move_focus" when="LAST"><return-type type="void"/><parameters><parameter type="GtkWindow*" name="window"/><parameter type="GtkDirectionType" name="direction);"/></parameters></signal><signal name="keys_changed" when="FIRST"><return-type type="void"/><parameters><parameter type="GtkWindow*" name="window"/></parameters></signal><method name="get_destroy_with_parent" cname="gtk_window_get_destroy_with_parent"><return-type type="gboolean"/></method><method name="get_default_size" cname="gtk_window_get_default_size"><return-type type="void"/></method><method name="get_frame_dimensions" cname="gtk_window_get_frame_dimensions"><return-type type="void"/></method><method name="set_gravity" cname="gtk_window_set_gravity"><return-type type="void"/></method><method name="get_group" cname="_gtk_window_get_group"><return-type type="GtkWindowGroup*"/></method><method name="reshow_with_initial_size" cname="gtk_window_reshow_with_initial_size"><return-type type="void"/></method><method name="get_position" cname="gtk_window_get_position"><return-type type="void"/></method><method name="get_icon" cname="gtk_window_get_icon"><return-type type="GdkPixbuf*"/></method><method name="set_wmclass" cname="gtk_window_set_wmclass"><return-type type="void"/></method><method name="set_focus" cname="gtk_window_set_focus"><return-type type="void"/></method><method name="begin_resize_drag" cname="gtk_window_begin_resize_drag"><return-type type="void"/></method><method name="get_title" cname="gtk_window_get_title"><return-type type="const-gchar*"/></method><method name="set_icon_list" cname="gtk_window_set_icon_list"><return-type type="void"/></method><method name="internal_set_focus" cname="_gtk_window_internal_set_focus"><return-type type="void"/></method><method name="parse_geometry" cname="gtk_window_parse_geometry"><return-type type="gboolean"/></method><method name="add_embedded_xid" cname="gtk_window_add_embedded_xid"><return-type type="void"/></method><method name="set_decorated" cname="gtk_window_set_decorated"><return-type type="void"/></method><method name="constrain_size" cname="_gtk_window_constrain_size"><return-type type="void"/></method><method name="get_focus" cname="gtk_window_get_focus"><return-type type="GtkWidget*"/></method><method name="unstick" cname="gtk_window_unstick"><return-type type="void"/></method><method name="activate_focus" cname="gtk_window_activate_focus"><return-type type="gboolean"/></method><method name="set_type_hint" cname="gtk_window_set_type_hint"><return-type type="void"/></method><method name="remove_mnemonic" cname="gtk_window_remove_mnemonic"><return-type type="void"/></method><method name="set_icon" cname="gtk_window_set_icon"><return-type type="void"/></method><method name="set_mnemonic_modifier" cname="gtk_window_set_mnemonic_modifier"><return-type type="void"/></method><method name="set_transient_for" cname="gtk_window_set_transient_for"><return-type type="void"/></method><method name="set_modal" cname="gtk_window_set_modal"><return-type type="void"/></method><method name="get_icon_list" cname="gtk_window_get_icon_list"><return-type type="GList*"/></method><method name="add_accel_group" cname="gtk_window_add_accel_group"><return-type type="void"/></method><method name="get_role" cname="gtk_window_get_role"><return-type type="const-gchar*"/></method><method name="resize" cname="gtk_window_resize"><return-type type="void"/></method><method name="add_mnemonic" cname="gtk_window_add_mnemonic"><return-type type="void"/></method><method name="remove_accel_group" cname="gtk_window_remove_accel_group"><return-type type="void"/></method><method name="begin_move_drag" cname="gtk_window_begin_move_drag"><return-type type="void"/></method><method name="get_decorated" cname="gtk_window_get_decorated"><return-type type="gboolean"/></method><method name="get_size" cname="gtk_window_get_size"><return-type type="void"/></method><method name="set_position" cname="gtk_window_set_position"><return-type type="void"/></method><method name="set_resizable" cname="gtk_window_set_resizable"><return-type type="void"/></method><method name="set_destroy_with_parent" cname="gtk_window_set_destroy_with_parent"><return-type type="void"/></method><method name="iconify" cname="gtk_window_iconify"><return-type type="void"/></method><method name="set_geometry_hints" cname="gtk_window_set_geometry_hints"><return-type type="void"/></method><method name="set_default_size" cname="gtk_window_set_default_size"><return-type type="void"/></method><method name="get_type_hint" cname="gtk_window_get_type_hint"><return-type type="GdkWindowTypeHint"/></method><method name="get_modal" cname="gtk_window_get_modal"><return-type type="gboolean"/></method><method name="get_gravity" cname="gtk_window_get_gravity"><return-type type="GdkGravity"/></method><method name="set_has_frame" cname="gtk_window_set_has_frame"><return-type type="void"/></method><method name="set_default" cname="gtk_window_set_default"><return-type type="void"/></method><constructor cname="gtk_window_new"/><method name="move" cname="gtk_window_move"><return-type type="void"/></method><method name="stick" cname="gtk_window_stick"><return-type type="void"/></method><method name="set_frame_dimensions" cname="gtk_window_set_frame_dimensions"><return-type type="void"/></method><method name="reposition" cname="_gtk_window_reposition"><return-type type="void"/></method><method name="set_role" cname="gtk_window_set_role"><return-type type="void"/></method><method name="deiconify" cname="gtk_window_deiconify"><return-type type="void"/></method><method name="present" cname="gtk_window_present"><return-type type="void"/></method><method name="remove_embedded_xid" cname="gtk_window_remove_embedded_xid"><return-type type="void"/></method><method name="maximize" cname="gtk_window_maximize"><return-type type="void"/></method><method name="unmaximize" cname="gtk_window_unmaximize"><return-type type="void"/></method><method name="query_nonaccels" cname="_gtk_window_query_nonaccels"><return-type type="gboolean"/></method><method name="get_transient_for" cname="gtk_window_get_transient_for"><return-type type="GtkWindow*"/></method><method name="get_resizable" cname="gtk_window_get_resizable"><return-type type="gboolean"/></method><method name="activate_default" cname="gtk_window_activate_default"><return-type type="gboolean"/></method><method name="mnemonic_activate" cname="gtk_window_mnemonic_activate"><return-type type="gboolean"/></method><method name="set_title" cname="gtk_window_set_title"><return-type type="void"/></method><method name="get_mnemonic_modifier" cname="gtk_window_get_mnemonic_modifier"><return-type type="GdkModifierType"/></method><method name="get_has_frame" cname="gtk_window_get_has_frame"><return-type type="gboolean"/></method></object><object name="WindowGroup" cname="GtkWindowGroup" parent="GObject"><field cname="grabs" type="GSList*"/><method name="remove_window" cname="gtk_window_group_remove_window"><return-type type="void"/></method><method name="add_window" cname="gtk_window_group_add_window"><return-type type="void"/></method><constructor cname="gtk_window_group_new"/></object><struct name="AccelGroupEntry" cname="GtkAccelGroupEntry"><field cname="key" type="GtkAccelKey"/><field cname="closure" type="GClosure*"/><field cname="accel_path_quark" type="GQuark"/></struct><struct name="AccelKey" cname="GtkAccelKey"><field cname="accel_key" type="guint"/><field cname="accel_mods" type="GdkModifierType"/><field cname="accel_flags" bits="16" type="guint"/></struct><struct name="BindingArg" cname="GtkBindingArg"><field cname="arg_type" type="GtkType"/><field cname="{glong long_data" type="union"/><field cname="double_data" type="gdouble"/><field cname="string_data" type="gchar*"/><field cname="d" type="}"/></struct><struct name="BindingEntry" cname="GtkBindingEntry"><field cname="keyval" type="guint"/><field cname="modifiers" type="guint"/><field cname="binding_set" type="GtkBindingSet*"/><field cname="destroyed" bits="1" type="guint"/><field cname="in_emission" bits="1" type="guint"/><field cname="set_next" type="GtkBindingEntry*"/><field cname="hash_next" type="GtkBindingEntry*"/><field cname="signals" type="GtkBindingSignal*"/></struct><struct name="BindingSet" cname="GtkBindingSet"><field cname="set_name" type="gchar*"/><field cname="priority" type="gint"/><field cname="widget_path_pspecs" type="GSList*"/><field cname="widget_class_pspecs" type="GSList*"/><field cname="class_branch_pspecs" type="GSList*"/><field cname="entries" type="GtkBindingEntry*"/><field cname="current" type="GtkBindingEntry*"/><method name="add_path" cname="gtk_binding_set_add_path"><return-type type="void"/></method><constructor cname="gtk_binding_set_new"/><method name="activate" cname="gtk_binding_set_activate"><return-type type="gboolean"/></method></struct><struct name="BindingSignal" cname="GtkBindingSignal"><field cname="next" type="GtkBindingSignal*"/><field cname="signal_name" type="gchar*"/><field cname="n_args" type="guint"/><field cname="args" type="GtkBindingArg*"/></struct><boxed name="Border" cname="GtkBorder"><field cname="left" type="gint"/><field cname="right" type="gint"/><field cname="top" type="gint"/><field cname="bottom" type="gint"/><method name="free" cname="gtk_border_free"><return-type type="void"/></method></boxed><struct name="BoxChild" cname="GtkBoxChild"><field cname="widget" type="GtkWidget*"/><field cname="padding" type="guint16"/><field cname="expand" bits="1" type="guint"/><field cname="fill" bits="1" type="guint"/><field cname="pack" bits="1" type="guint"/><field cname="is_secondary" bits="1" type="guint"/></struct><struct name="CListCellInfo" cname="GtkCListCellInfo"><field cname="row" type="gint"/><field cname="column" type="gint"/></struct><struct name="CListColumn" cname="GtkCListColumn"><field cname="title" type="gchar*"/><field cname="area" type="GdkRectangle"/><field cname="button" type="GtkWidget*"/><field cname="window" type="GdkWindow*"/><field cname="width" type="gint"/><field cname="min_width" type="gint"/><field cname="max_width" type="gint"/><field cname="justification" type="GtkJustification"/><field cname="visible" bits="1" type="guint"/><field cname="width_set" bits="1" type="guint"/><field cname="resizeable" bits="1" type="guint"/><field cname="auto_resize" bits="1" type="guint"/><field cname="button_passive" bits="1" type="guint"/></struct><struct name="CListDestInfo" cname="GtkCListDestInfo"><field cname="cell" type="GtkCListCellInfo"/><field cname="insert_pos" type="GtkCListDragPos"/></struct><struct name="CListRow" cname="GtkCListRow"><field cname="cell" type="GtkCell*"/><field cname="state" type="GtkStateType"/><field cname="foreground" type="GdkColor"/><field cname="background" type="GdkColor"/><field cname="style" type="GtkStyle*"/><field cname="data" type="gpointer"/><field cname="destroy" type="GtkDestroyNotify"/><field cname="fg_set" bits="1" type="guint"/><field cname="bg_set" bits="1" type="guint"/><field cname="selectable" bits="1" type="guint"/></struct><struct name="CTreeNode" cname="GtkCTreeNode"><field cname="list" type="GList"/></struct><struct name="CTreeRow" cname="GtkCTreeRow"><field cname="row" type="GtkCListRow"/><field cname="parent" type="GtkCTreeNode*"/><field cname="sibling" type="GtkCTreeNode*"/><field cname="children" type="GtkCTreeNode*"/><field cname="pixmap_closed" type="GdkPixmap*"/><field cname="mask_closed" type="GdkBitmap*"/><field cname="pixmap_opened" type="GdkPixmap*"/><field cname="mask_opened" type="GdkBitmap*"/><field cname="level" type="guint16"/><field cname="is_leaf" bits="1" type="guint"/><field cname="expanded" bits="1" type="guint"/></struct><struct name="Cell" cname="GtkCell"><field cname="type" type="GtkCellType"/><field cname="vertical" type="gint16"/><field cname="horizontal" type="gint16"/><field cname="style" type="GtkStyle*"/><field cname="{gchar* text" type="union"/><field cname="{GdkPixmap* pixmap" type="struct"/><field cname="mask" type="GdkBitmap*"/><field cname="pm" type="}"/><field cname="{gchar* text" type="struct"/><field cname="spacing" type="guint8"/><field cname="pixmap" type="GdkPixmap*"/><field cname="mask" type="GdkBitmap*"/><field cname="pt" type="}"/><field cname="widget" type="GtkWidget*"/><field cname="u" type="}"/></struct><struct name="CellPixText" cname="GtkCellPixText"><field cname="type" type="GtkCellType"/><field cname="vertical" type="gint16"/><field cname="horizontal" type="gint16"/><field cname="style" type="GtkStyle*"/><field cname="text" type="gchar*"/><field cname="spacing" type="guint8"/><field cname="pixmap" type="GdkPixmap*"/><field cname="mask" type="GdkBitmap*"/></struct><struct name="CellPixmap" cname="GtkCellPixmap"><field cname="type" type="GtkCellType"/><field cname="vertical" type="gint16"/><field cname="horizontal" type="gint16"/><field cname="style" type="GtkStyle*"/><field cname="pixmap" type="GdkPixmap*"/><field cname="mask" type="GdkBitmap*"/></struct><struct name="CellText" cname="GtkCellText"><field cname="type" type="GtkCellType"/><field cname="vertical" type="gint16"/><field cname="horizontal" type="gint16"/><field cname="style" type="GtkStyle*"/><field cname="text" type="gchar*"/></struct><struct name="CellWidget" cname="GtkCellWidget"><field cname="type" type="GtkCellType"/><field cname="vertical" type="gint16"/><field cname="horizontal" type="gint16"/><field cname="style" type="GtkStyle*"/><field cname="widget" type="GtkWidget*"/></struct><struct name="Clipboard" cname="GtkClipboard"><field cname="selection" type="GdkAtom"/><field cname="get_func" type="GtkClipboardGetFunc"/><field cname="clear_func" type="GtkClipboardClearFunc"/><field cname="user_data" type="gpointer"/><field cname="have_owner" type="gboolean"/><field cname="timestamp" type="guint32"/><field cname="have_selection" type="gboolean"/><method name="set_with_owner" cname="gtk_clipboard_set_with_owner"><return-type type="gboolean"/></method><method name="wait_is_text_available" cname="gtk_clipboard_wait_is_text_available"><return-type type="gboolean"/></method><method name="set_with_data" cname="gtk_clipboard_set_with_data"><return-type type="gboolean"/></method><method name="clear" cname="gtk_clipboard_clear"><return-type type="void"/></method><method name="wait_for_contents" cname="gtk_clipboard_wait_for_contents"><return-type type="GtkSelectionData*"/></method><method name="set_text" cname="gtk_clipboard_set_text"><return-type type="void"/></method><method name="request_text" cname="gtk_clipboard_request_text"><return-type type="void"/></method><method name="request_contents" cname="gtk_clipboard_request_contents"><return-type type="void"/></method><method name="get_owner" cname="gtk_clipboard_get_owner"><return-type type="GObject*"/></method><method name="wait_for_text" cname="gtk_clipboard_wait_for_text"><return-type type="gchar*"/></method></struct><struct name="FixedChild" cname="GtkFixedChild"><field cname="widget" type="GtkWidget*"/><field cname="x" type="gint"/><field cname="y" type="gint"/></struct><struct name="IMContextInfo" cname="GtkIMContextInfo"><field cname="context_id" type="const-gchar*"/><field cname="context_name" type="const-gchar*"/><field cname="domain" type="const-gchar*"/><field cname="domain_dirname" type="const-gchar*"/><field cname="default_locales" type="const-gchar*"/></struct><boxed name="IconSet" cname="GtkIconSet"><field cname="ref_count" type="guint"/><field cname="sources" type="GSList*"/><field cname="cache" type="GSList*"/><field cname="cache_size" type="guint"/><field cname="cache_serial" type="guint"/><method name="unref" cname="gtk_icon_set_unref"><return-type type="void"/></method><method name="add_source" cname="gtk_icon_set_add_source"><return-type type="void"/></method><constructor cname="gtk_icon_set_new_from_pixbuf"/><constructor cname="gtk_icon_set_new"/><method name="ref" cname="gtk_icon_set_ref"><return-type type="GtkIconSet*"/></method><method name="render_icon" cname="gtk_icon_set_render_icon"><return-type type="GdkPixbuf*"/></method><method name="copy" cname="gtk_icon_set_copy"><return-type type="GtkIconSet*"/></method><method name="get_sizes" cname="gtk_icon_set_get_sizes"><return-type type="void"/></method></boxed><boxed name="IconSource" cname="GtkIconSource"><field cname="the pixbuf is assumed to be the already-loaded contents of the* file.*/gchar* filename" type="*"/><field cname="pixbuf" type="GdkPixbuf*"/><field cname="direction" type="GtkTextDirection"/><field cname="state" type="GtkStateType"/><field cname="size" type="GtkIconSize"/><field cname="fields should be ignored. If FALSE" type="*"/><field cname="the parameter is* specified" type="*"/><field cname="any_direction" bits="1" type="*"/><field cname="any_state" bits="1" type="guint"/><field cname="any_size" bits="1" type="guint"/><method name="set_direction_wildcarded" cname="gtk_icon_source_set_direction_wildcarded"><return-type type="void"/></method><method name="set_state_wildcarded" cname="gtk_icon_source_set_state_wildcarded"><return-type type="void"/></method><constructor cname="gtk_icon_source_new"/><method name="set_state" cname="gtk_icon_source_set_state"><return-type type="void"/></method><method name="set_pixbuf" cname="gtk_icon_source_set_pixbuf"><return-type type="void"/></method><method name="set_size" cname="gtk_icon_source_set_size"><return-type type="void"/></method><method name="set_direction" cname="gtk_icon_source_set_direction"><return-type type="void"/></method><method name="set_filename" cname="gtk_icon_source_set_filename"><return-type type="void"/></method><method name="set_size_wildcarded" cname="gtk_icon_source_set_size_wildcarded"><return-type type="void"/></method><method name="free" cname="gtk_icon_source_free"><return-type type="void"/></method></boxed><struct name="ImageAnimationData" cname="GtkImageAnimationData"><field cname="anim" type="GdkPixbufAnimation*"/><field cname="iter" type="GdkPixbufAnimationIter*"/><field cname="frame_timeout" type="guint"/></struct><struct name="ImageIconSetData" cname="GtkImageIconSetData"><field cname="icon_set" type="GtkIconSet*"/></struct><struct name="ImageImageData" cname="GtkImageImageData"><field cname="image" type="GdkImage*"/></struct><struct name="ImagePixbufData" cname="GtkImagePixbufData"><field cname="pixbuf" type="GdkPixbuf*"/></struct><struct name="ImagePixmapData" cname="GtkImagePixmapData"><field cname="pixmap" type="GdkPixmap*"/></struct><struct name="ImageStockData" cname="GtkImageStockData"><field cname="stock_id" type="gchar*"/></struct><struct name="ItemFactoryEntry" cname="GtkItemFactoryEntry"><field cname="path" type="gchar*"/><field cname="accelerator" type="gchar*"/><field cname="callback" type="GtkItemFactoryCallback"/><field cname="callback_action" type="guint"/><field cname="item_type" type="gchar*"/><field cname="extra_data" type="gconstpointer"/></struct><struct name="ItemFactoryItem" cname="GtkItemFactoryItem"><field cname="path" type="gchar*"/><field cname="widgets" type="GSList*"/></struct><struct name="LabelSelectionInfo" cname="GtkLabelSelectionInfo"><field cname="window" type="GdkWindow*"/><field cname="selection_anchor" type="gint"/><field cname="selection_end" type="gint"/><field cname="cursor_gc" type="GdkGC*"/><field cname="popup_menu" type="GtkWidget*"/></struct><struct name="NotebookPage" cname="GtkNotebookPage"><field cname="child" type="GtkWidget*"/><field cname="tab_label" type="GtkWidget*"/><field cname="menu_label" type="GtkWidget*"/><field cname="default_menu" bits="1" type="guint"/><field cname="default_tab" bits="1" type="guint"/><field cname="expand" bits="1" type="guint"/><field cname="fill" bits="1" type="guint"/><field cname="pack" bits="1" type="guint"/><field cname="requisition" type="GtkRequisition"/><field cname="allocation" type="GtkAllocation"/><field cname="mnemonic_activate_signal" type="guint"/></struct><struct name="PreviewInfo" cname="GtkPreviewInfo"><field cname="lookup" type="guchar*"/><field cname="gamma" type="gdouble"/></struct><struct name="PropertyMark" cname="GtkPropertyMark"><field cname="property" type="GList*"/><field cname="offset" type="guint"/><field cname="index" type="guint"/></struct><struct name="RBNode" cname="GtkRBNode"><field cname="flags" bits="14" type="guint"/><field cname="parity" bits="1" type="guint"/><field cname="left" type="GtkRBNode*"/><field cname="right" type="GtkRBNode*"/><field cname="parent" type="GtkRBNode*"/><field cname="count" type="gint"/><field cname="offset" type="gint"/><field cname="children" type="GtkRBTree*"/></struct><struct name="RBTree" cname="GtkRBTree"><field cname="root" type="GtkRBNode*"/><field cname="nil" type="GtkRBNode*"/><field cname="parent_tree" type="GtkRBTree*"/><field cname="parent_node" type="GtkRBNode*"/><method name="node_mark_valid" cname="_gtk_rbtree_node_mark_valid"><return-type type="void"/></method><method name="find_count" cname="_gtk_rbtree_find_count"><return-type type="GtkRBNode*"/></method><method name="get_depth" cname="_gtk_rbtree_get_depth"><return-type type="gint"/></method><method name="remove" cname="_gtk_rbtree_remove"><return-type type="void"/></method><method name="find_offset" cname="_gtk_rbtree_find_offset"><return-type type="gint"/></method><method name="column_invalid" cname="_gtk_rbtree_column_invalid"><return-type type="void"/></method><method name="remove_node" cname="_gtk_rbtree_remove_node"><return-type type="void"/></method><method name="insert_before" cname="_gtk_rbtree_insert_before"><return-type type="GtkRBNode*"/></method><constructor cname="_gtk_rbtree_new"/><method name="next_full" cname="_gtk_rbtree_next_full"><return-type type="void"/></method><method name="traverse" cname="_gtk_rbtree_traverse"><return-type type="void"/></method><method name="next" cname="_gtk_rbtree_next"><return-type type="GtkRBNode*"/></method><method name="prev" cname="_gtk_rbtree_prev"><return-type type="GtkRBNode*"/></method><method name="free" cname="_gtk_rbtree_free"><return-type type="void"/></method><method name="node_find_offset" cname="_gtk_rbtree_node_find_offset"><return-type type="gint"/></method><method name="node_mark_invalid" cname="_gtk_rbtree_node_mark_invalid"><return-type type="void"/></method><method name="reorder" cname="_gtk_rbtree_reorder"><return-type type="void"/></method><method name="destroy" cname="_gtk_rbtree_destroy"><return-type type="void"/></method><method name="insert_after" cname="_gtk_rbtree_insert_after"><return-type type="GtkRBNode*"/></method><method name="node_set_height" cname="_gtk_rbtree_node_set_height"><return-type type="void"/></method><method name="node_find_parity" cname="_gtk_rbtree_node_find_parity"><return-type type="gint"/></method><method name="prev_full" cname="_gtk_rbtree_prev_full"><return-type type="void"/></method><method name="debug_spew" cname="_gtk_rbtree_debug_spew"><return-type type="void"/></method></struct><struct name="RangeLayout" cname="GtkRangeLayout"><field cname="stepper_a" type="GdkRectangle"/><field cname="stepper_b" type="GdkRectangle"/><field cname="stepper_c" type="GdkRectangle"/><field cname="stepper_d" type="GdkRectangle"/><field cname="entire range_rect*/GdkRectangle trough" type="*"/><field cname="slider" type="GdkRectangle"/><field cname="mouse_location" type="MouseLocation"/><field cname="mouse_x" type="gint"/><field cname="mouse_y" type="gint"/><field cname="grab_location" type="MouseLocation"/><field cname="grab_button" type="gint"/></struct><struct name="RangeStepTimer" cname="GtkRangeStepTimer"><field cname="timeout_id" type="guint"/><field cname="step" type="GtkScrollType"/></struct><struct name="RcContext" cname="GtkRcContext"><field cname="rc_style_ht" type="GHashTable*"/><field cname="settings" type="GtkSettings*"/><field cname="rc_sets_widget" type="GSList*"/><field cname="rc_sets_widget_class" type="GSList*"/><field cname="rc_sets_class" type="GSList*"/><field cname="rc_files" type="GSList*"/><field cname="theme_name" type="gchar*"/><field cname="key_theme_name" type="gchar*"/><field cname="pixmap_path" array_len="GTK_RC_MAX_PIXMAP_PATHS" type="gchar*"/><field cname="default_priority" type="gint"/></struct><struct name="RcProperty" cname="GtkRcProperty"><field cname="type_name" type="GQuark"/><field cname="property_name" type="GQuark"/><field cname="origin" type="gchar*"/><field cname="value" type="GValue"/></struct><boxed name="Requisition" cname="GtkRequisition"><field cname="width" type="gint"/><field cname="height" type="gint"/><method name="free" cname="gtk_requisition_free"><return-type type="void"/></method></boxed><struct name="RulerMetric" cname="GtkRulerMetric"><field cname="metric_name" type="gchar*"/><field cname="abbrev" type="gchar*"/><field cname="pixels_per_unit" type="gdouble"/><field cname="ruler_scale" array_len="10" type="gdouble"/><field cname="subdivide" array_len="5" type="gint"/></struct><boxed name="SelectionData" cname="GtkSelectionData"><field cname="selection" type="GdkAtom"/><field cname="target" type="GdkAtom"/><field cname="type" type="GdkAtom"/><field cname="format" type="gint"/><field cname="data" type="guchar*"/><field cname="length" type="gint"/><method name="get_text" cname="gtk_selection_data_get_text"><return-type type="guchar*"/></method><method name="free" cname="gtk_selection_data_free"><return-type type="void"/></method><method name="get_targets" cname="gtk_selection_data_get_targets"><return-type type="gboolean"/></method><method name="set_text" cname="gtk_selection_data_set_text"><return-type type="gboolean"/></method><method name="copy" cname="gtk_selection_data_copy"><return-type type="GtkSelectionData*"/></method><method name="set" cname="gtk_selection_data_set"><return-type type="void"/></method><method name="targets_include_text" cname="gtk_selection_data_targets_include_text"><return-type type="gboolean"/></method></boxed><struct name="SettingsValue" cname="GtkSettingsValue"><field cname="origin" type="gchar*"/><field cname="value" type="GValue"/></struct><struct name="StockItem" cname="GtkStockItem"><field cname="stock_id" type="gchar*"/><field cname="label" type="gchar*"/><field cname="modifier" type="GdkModifierType"/><field cname="keyval" type="guint"/><field cname="translation_domain" type="gchar*"/><method name="free" cname="gtk_stock_item_free"><return-type type="void"/></method></struct><struct name="TableChild" cname="GtkTableChild"><field cname="widget" type="GtkWidget*"/><field cname="left_attach" type="guint16"/><field cname="right_attach" type="guint16"/><field cname="top_attach" type="guint16"/><field cname="bottom_attach" type="guint16"/><field cname="xpadding" type="guint16"/><field cname="ypadding" type="guint16"/><field cname="xexpand" bits="1" type="guint"/><field cname="yexpand" bits="1" type="guint"/><field cname="xshrink" bits="1" type="guint"/><field cname="yshrink" bits="1" type="guint"/><field cname="xfill" bits="1" type="guint"/><field cname="yfill" bits="1" type="guint"/></struct><struct name="TableRowCol" cname="GtkTableRowCol"><field cname="requisition" type="guint16"/><field cname="allocation" type="guint16"/><field cname="spacing" type="guint16"/><field cname="need_expand" bits="1" type="guint"/><field cname="need_shrink" bits="1" type="guint"/><field cname="expand" bits="1" type="guint"/><field cname="shrink" bits="1" type="guint"/><field cname="empty" bits="1" type="guint"/></struct><struct name="TargetEntry" cname="GtkTargetEntry"><field cname="target" type="gchar*"/><field cname="flags" type="guint"/><field cname="info" type="guint"/></struct><struct name="TargetList" cname="GtkTargetList"><field cname="list" type="GList*"/><field cname="ref_count" type="guint"/><constructor cname="gtk_target_list_new"/><method name="ref" cname="gtk_target_list_ref"><return-type type="void"/></method><method name="remove" cname="gtk_target_list_remove"><return-type type="void"/></method><method name="find" cname="gtk_target_list_find"><return-type type="gboolean"/></method><method name="add_table" cname="gtk_target_list_add_table"><return-type type="void"/></method><method name="unref" cname="gtk_target_list_unref"><return-type type="void"/></method><method name="add" cname="gtk_target_list_add"><return-type type="void"/></method></struct><struct name="TargetPair" cname="GtkTargetPair"><field cname="target" type="GdkAtom"/><field cname="flags" type="guint"/><field cname="info" type="guint"/></struct><struct name="TextAppearance" cname="GtkTextAppearance"><field cname="bg_color" type="GdkColor"/><field cname="fg_color" type="GdkColor"/><field cname="bg_stipple" type="GdkBitmap*"/><field cname="fg_stipple" type="GdkBitmap*"/><field cname="rise" type="gint"/><field cname="padding1" type="gpointer"/><field cname="underline" bits="4" type="guint"/><field cname="strikethrough" bits="1" type="guint"/><field cname="draw_bg" bits="1" type="guint"/><field cname="inside_selection" bits="1" type="guint"/><field cname="is_text" bits="1" type="guint"/><field cname="pad1" bits="1" type="guint"/><field cname="pad2" bits="1" type="guint"/><field cname="pad3" bits="1" type="guint"/><field cname="pad4" bits="1" type="guint"/></struct><boxed name="TextAttributes" cname="GtkTextAttributes"><field cname="refcount" type="guint"/><field cname="appearance" type="GtkTextAppearance"/><field cname="justification" type="GtkJustification"/><field cname="direction" type="GtkTextDirection"/><field cname="font" type="PangoFontDescription*"/><field cname="font_scale" type="gdouble"/><field cname="left_margin" type="gint"/><field cname="indent" type="gint"/><field cname="right_margin" type="gint"/><field cname="pixels_above_lines" type="gint"/><field cname="pixels_below_lines" type="gint"/><field cname="pixels_inside_wrap" type="gint"/><field cname="tabs" type="PangoTabArray*"/><field cname="wrap_mode" type="GtkWrapMode"/><field cname="language" type="PangoLanguage*"/><field cname="padding1" type="gpointer"/><field cname="invisible" bits="1" type="guint"/><field cname="bg_full_height" bits="1" type="guint"/><field cname="editable" bits="1" type="guint"/><field cname="realized" bits="1" type="guint"/><field cname="pad1" bits="1" type="guint"/><field cname="pad2" bits="1" type="guint"/><field cname="pad3" bits="1" type="guint"/><field cname="pad4" bits="1" type="guint"/><method name="unref" cname="gtk_text_attributes_unref"><return-type type="void"/></method><method name="copy_values" cname="gtk_text_attributes_copy_values"><return-type type="void"/></method><method name="copy" cname="gtk_text_attributes_copy"><return-type type="GtkTextAttributes*"/></method><constructor cname="gtk_text_attributes_new"/><method name="ref" cname="gtk_text_attributes_ref"><return-type type="void"/></method></boxed><struct name="TextBTree" cname="GtkTextBTree"><field cname="root_node" type="GtkTextBTreeNode*"/><field cname="table" type="GtkTextTagTable*"/><field cname="mark_table" type="GHashTable*"/><field cname="refcount" type="guint"/><field cname="insert_mark" type="GtkTextMark*"/><field cname="selection_bound_mark" type="GtkTextMark*"/><field cname="buffer" type="GtkTextBuffer*"/><field cname="views" type="BTreeView*"/><field cname="tag_infos" type="GSList*"/><field cname="tag_changed_handler" type="guint"/><field cname="is added to or removed from the tree (i.e. the* length of a line may have changed" type="*"/><field cname="and lines may* have been added or removed). This invalidates* all outstanding iterators.*/guint chars_changed_stamp" type="*"/><field cname="this makes outstanding iterators recalculate their* pointed-to segment and segment offset.*/guint segments_changed_stamp" type="*"/><field cname="last_line" type="GtkTextLine*"/><field cname="last_line_stamp" type="guint"/><field cname="containing the end iterator*/GtkTextLine* end_iter_line" type="*"/><field cname="end_iter_segment" type="GtkTextLineSegment*"/><field cname="end_iter_segment_byte_index" type="int"/><field cname="end_iter_segment_char_offset" type="int"/><field cname="end_iter_line_stamp" type="guint"/><field cname="end_iter_segment_stamp" type="guint"/><field cname="child_anchor_table" type="GHashTable*"/><method name="mark_is_selection_bound" cname="_gtk_text_btree_mark_is_selection_bound"><return-type type="gboolean"/></method><method name="get_segments_changed_stamp" cname="_gtk_text_btree_get_segments_changed_stamp"><return-type type="guint"/></method><method name="release_mark_segment" cname="_gtk_text_btree_release_mark_segment"><return-type type="void"/></method><method name="get_iter_at_first_toggle" cname="_gtk_text_btree_get_iter_at_first_toggle"><return-type type="gboolean"/></method><method name="set_mark" cname="_gtk_text_btree_set_mark"><return-type type="GtkTextMark*"/></method><method name="get_iter_at_mark_name" cname="_gtk_text_btree_get_iter_at_mark_name"><return-type type="gboolean"/></method><method name="find_line_by_y" cname="_gtk_text_btree_find_line_by_y"><return-type type="GtkTextLine*"/></method><method name="get_chars_changed_stamp" cname="_gtk_text_btree_get_chars_changed_stamp"><return-type type="guint"/></method><method name="get_iter_at_mark" cname="_gtk_text_btree_get_iter_at_mark"><return-type type="void"/></method><method name="spew" cname="_gtk_text_btree_spew"><return-type type="void"/></method><method name="validate_line" cname="_gtk_text_btree_validate_line"><return-type type="void"/></method><method name="get_view_size" cname="_gtk_text_btree_get_view_size"><return-type type="void"/></method><method name="first_could_contain_tag" cname="_gtk_text_btree_first_could_contain_tag"><return-type type="GtkTextLine*"/></method><method name="unref" cname="_gtk_text_btree_unref"><return-type type="void"/></method><method name="place_cursor" cname="_gtk_text_btree_place_cursor"><return-type type="void"/></method><method name="is_end" cname="_gtk_text_btree_is_end"><return-type type="gboolean"/></method><method name="get_iter_from_string" cname="_gtk_text_btree_get_iter_from_string"><return-type type="gboolean"/></method><method name="remove_mark_by_name" cname="_gtk_text_btree_remove_mark_by_name"><return-type type="void"/></method><method name="notify_will_remove_tag" cname="_gtk_text_btree_notify_will_remove_tag"><return-type type="void"/></method><method name="get_end_iter" cname="_gtk_text_btree_get_end_iter"><return-type type="void"/></method><method name="get_iter_at_line" cname="_gtk_text_btree_get_iter_at_line"><return-type type="void"/></method><method name="get_iter_at_last_toggle" cname="_gtk_text_btree_get_iter_at_last_toggle"><return-type type="gboolean"/></method><method name="get_selection_bounds" cname="_gtk_text_btree_get_selection_bounds"><return-type type="gboolean"/></method><method name="last_could_contain_tag" cname="_gtk_text_btree_last_could_contain_tag"><return-type type="GtkTextLine*"/></method><method name="remove_mark" cname="_gtk_text_btree_remove_mark"><return-type type="void"/></method><method name="remove_view" cname="_gtk_text_btree_remove_view"><return-type type="void"/></method><method name="get_iter_at_line_byte" cname="_gtk_text_btree_get_iter_at_line_byte"><return-type type="void"/></method><method name="line_count" cname="_gtk_text_btree_line_count"><return-type type="gint"/></method><method name="segments_changed" cname="_gtk_text_btree_segments_changed"><return-type type="void"/></method><method name="add_view" cname="_gtk_text_btree_add_view"><return-type type="void"/></method><constructor cname="_gtk_text_btree_new"/><method name="mark_is_insert" cname="_gtk_text_btree_mark_is_insert"><return-type type="gboolean"/></method><method name="char_count" cname="_gtk_text_btree_char_count"><return-type type="gint"/></method><method name="get_mark_by_name" cname="_gtk_text_btree_get_mark_by_name"><return-type type="GtkTextMark*"/></method><method name="get_end_iter_line" cname="_gtk_text_btree_get_end_iter_line"><return-type type="GtkTextLine*"/></method><method name="get_buffer" cname="_gtk_text_btree_get_buffer"><return-type type="GtkTextBuffer*"/></method><method name="is_valid" cname="_gtk_text_btree_is_valid"><return-type type="gboolean"/></method><method name="get_iter_at_child_anchor" cname="_gtk_text_btree_get_iter_at_child_anchor"><return-type type="void"/></method><method name="check" cname="_gtk_text_btree_check"><return-type type="void"/></method><method name="ref" cname="_gtk_text_btree_ref"><return-type type="void"/></method><method name="get_iter_at_char" cname="_gtk_text_btree_get_iter_at_char"><return-type type="void"/></method><method name="get_line_no_last" cname="_gtk_text_btree_get_line_no_last"><return-type type="GtkTextLine*"/></method><method name="get_line_at_char" cname="_gtk_text_btree_get_line_at_char"><return-type type="GtkTextLine*"/></method><method name="find_line_top" cname="_gtk_text_btree_find_line_top"><return-type type="gint"/></method><method name="validate" cname="_gtk_text_btree_validate"><return-type type="gboolean"/></method><method name="get_iter_at_line_char" cname="_gtk_text_btree_get_iter_at_line_char"><return-type type="void"/></method><method name="invalidate_region" cname="_gtk_text_btree_invalidate_region"><return-type type="void"/></method><method name="get_line" cname="_gtk_text_btree_get_line"><return-type type="GtkTextLine*"/></method></struct><struct name="TextFont" cname="GtkTextFont"><field cname="gdk_font" type="GdkFont*"/><field cname="ref_count" type="guint"/><field cname="char_widths" array_len="256" type="gint16"/></struct><boxed name="TextIter" cname="GtkTextIter"><field cname="dummy1" type="gpointer"/><field cname="dummy2" type="gpointer"/><field cname="dummy3" type="gint"/><field cname="dummy4" type="gint"/><field cname="dummy5" type="gint"/><field cname="dummy6" type="gint"/><field cname="dummy7" type="gint"/><field cname="dummy8" type="gint"/><field cname="dummy9" type="gpointer"/><field cname="dummy10" type="gpointer"/><field cname="dummy11" type="gint"/><field cname="dummy12" type="gint"/><field cname="dummy13" type="gint"/><field cname="dummy14" type="gpointer"/><method name="forward_chars" cname="gtk_text_iter_forward_chars"><return-type type="gboolean"/></method><method name="forward_find_char" cname="gtk_text_iter_forward_find_char"><return-type type="gboolean"/></method><method name="set_line_offset" cname="gtk_text_iter_set_line_offset"><return-type type="void"/></method><method name="set_visible_line_offset" cname="gtk_text_iter_set_visible_line_offset"><return-type type="void"/></method><method name="forward_to_end" cname="gtk_text_iter_forward_to_end"><return-type type="void"/></method><method name="backward_sentence_start" cname="gtk_text_iter_backward_sentence_start"><return-type type="gboolean"/></method><method name="set_offset" cname="gtk_text_iter_set_offset"><return-type type="void"/></method><method name="forward_word_ends" cname="gtk_text_iter_forward_word_ends"><return-type type="gboolean"/></method><method name="backward_find_char" cname="gtk_text_iter_backward_find_char"><return-type type="gboolean"/></method><method name="backward_cursor_position" cname="gtk_text_iter_backward_cursor_position"><return-type type="gboolean"/></method><method name="forward_to_line_end" cname="gtk_text_iter_forward_to_line_end"><return-type type="gboolean"/></method><method name="set_visible_line_index" cname="gtk_text_iter_set_visible_line_index"><return-type type="void"/></method><method name="forward_line" cname="gtk_text_iter_forward_line"><return-type type="gboolean"/></method><method name="forward_cursor_position" cname="gtk_text_iter_forward_cursor_position"><return-type type="gboolean"/></method><method name="free" cname="gtk_text_iter_free"><return-type type="void"/></method><method name="forward_sentence_ends" cname="gtk_text_iter_forward_sentence_ends"><return-type type="gboolean"/></method><method name="forward_to_tag_toggle" cname="gtk_text_iter_forward_to_tag_toggle"><return-type type="gboolean"/></method><method name="forward_lines" cname="gtk_text_iter_forward_lines"><return-type type="gboolean"/></method><method name="backward_sentence_starts" cname="gtk_text_iter_backward_sentence_starts"><return-type type="gboolean"/></method><method name="backward_chars" cname="gtk_text_iter_backward_chars"><return-type type="gboolean"/></method><method name="backward_line" cname="gtk_text_iter_backward_line"><return-type type="gboolean"/></method><method name="order" cname="gtk_text_iter_order"><return-type type="void"/></method><method name="forward_sentence_end" cname="gtk_text_iter_forward_sentence_end"><return-type type="gboolean"/></method><method name="set_line_index" cname="gtk_text_iter_set_line_index"><return-type type="void"/></method><method name="set_line" cname="gtk_text_iter_set_line"><return-type type="void"/></method><method name="forward_char" cname="gtk_text_iter_forward_char"><return-type type="gboolean"/></method><method name="backward_word_starts" cname="gtk_text_iter_backward_word_starts"><return-type type="gboolean"/></method><method name="backward_word_start" cname="gtk_text_iter_backward_word_start"><return-type type="gboolean"/></method><method name="backward_cursor_positions" cname="gtk_text_iter_backward_cursor_positions"><return-type type="gboolean"/></method><method name="backward_to_tag_toggle" cname="gtk_text_iter_backward_to_tag_toggle"><return-type type="gboolean"/></method><method name="forward_word_end" cname="gtk_text_iter_forward_word_end"><return-type type="gboolean"/></method><method name="backward_char" cname="gtk_text_iter_backward_char"><return-type type="gboolean"/></method><method name="forward_cursor_positions" cname="gtk_text_iter_forward_cursor_positions"><return-type type="gboolean"/></method><method name="backward_lines" cname="gtk_text_iter_backward_lines"><return-type type="gboolean"/></method></boxed><struct name="TextLineSegment" cname="GtkTextLineSegment"><field cname="type" type="GtkTextLineSegmentClass*"/><field cname="next" type="GtkTextLineSegment*"/><field cname="char_count" type="int"/><field cname="byte_count" type="int"/><field cname="chars" array_len="4" type="union"/><field cname="toggle" type="GtkTextToggleBody"/><field cname="mark" type="GtkTextMarkBody"/><field cname="pixbuf" type="GtkTextPixbuf"/><field cname="child" type="GtkTextChildBody"/><field cname="body" type="}"/></struct><struct name="TextLineSegmentClass" cname="GtkTextLineSegmentClass"><field cname="name" type="char*"/><field cname="leftGravity" type="gboolean"/><field cname="splitFunc" type="GtkTextSegSplitFunc"/><field cname="deleteFunc" type="GtkTextSegDeleteFunc"/><field cname="cleanupFunc" type="GtkTextSegCleanupFunc"/><field cname="lineChangeFunc" type="GtkTextSegLineChangeFunc"/><field cname="checkFunc" type="GtkTextSegCheckFunc"/></struct><struct name="TextLogAttrCache" cname="GtkTextLogAttrCache"><field cname="chars_changed_stamp" type="gint"/><field cname="entries" array_len="ATTR_CACHE_SIZE" type="CacheEntry"/></struct><struct name="TextMarkBody" cname="GtkTextMarkBody"><field cname="obj" type="GtkTextMark*"/><field cname="name" type="gchar*"/><field cname="tree" type="GtkTextBTree*"/><field cname="line" type="GtkTextLine*"/><field cname="visible" bits="1" type="guint"/><field cname="not_deleteable" bits="1" type="guint"/></struct><struct name="TextPendingScroll" cname="GtkTextPendingScroll"><field cname="mark" type="GtkTextMark*"/><field cname="within_margin" type="gdouble"/><field cname="use_align" type="gboolean"/><field cname="xalign" type="gdouble"/><field cname="yalign" type="gdouble"/></struct><struct name="TextTagInfo" cname="GtkTextTagInfo"><field cname="tag" type="GtkTextTag*"/><field cname="tag_root" type="GtkTextBTreeNode*"/><field cname="toggle_count" type="gint"/></struct><struct name="TextToggleBody" cname="GtkTextToggleBody"><field cname="info" type="GtkTextTagInfo*"/><field cname="inNodeCounts" type="gboolean"/></struct><struct name="TextWindow" cname="GtkTextWindow"><field cname="type" type="GtkTextWindowType"/><field cname="widget" type="GtkWidget*"/><field cname="window" type="GdkWindow*"/><field cname="bin_window" type="GdkWindow*"/><field cname="requisition" type="GtkRequisition"/><field cname="allocation" type="GdkRectangle"/></struct><struct name="ToolbarChild" cname="GtkToolbarChild"><field cname="type" type="GtkToolbarChildType"/><field cname="widget" type="GtkWidget*"/><field cname="icon" type="GtkWidget*"/><field cname="label" type="GtkWidget*"/></struct><struct name="TooltipsData" cname="GtkTooltipsData"><field cname="tooltips" type="GtkTooltips*"/><field cname="widget" type="GtkWidget*"/><field cname="tip_text" type="gchar*"/><field cname="tip_private" type="gchar*"/></struct><struct name="TreeDataList" cname="GtkTreeDataList"><field cname="next" type="GtkTreeDataList*"/><field cname="{gint v_int" type="union"/><field cname="v_char" type="gint8"/><field cname="v_uchar" type="guint8"/><field cname="v_uint" type="guint"/><field cname="v_float" type="gfloat"/><field cname="v_double" type="gdouble"/><field cname="v_pointer" type="gpointer"/><field cname="data" type="}"/><method name="value_to_node" cname="_gtk_tree_data_list_value_to_node"><return-type type="void"/></method><method name="free" cname="_gtk_tree_data_list_free"><return-type type="void"/></method><method name="node_to_value" cname="_gtk_tree_data_list_node_to_value"><return-type type="void"/></method><method name="node_copy" cname="_gtk_tree_data_list_node_copy"><return-type type="GtkTreeDataList*"/></method></struct><boxed name="TreeIter" cname="GtkTreeIter"><field cname="stamp" type="gint"/><field cname="user_data" type="gpointer"/><field cname="user_data2" type="gpointer"/><field cname="user_data3" type="gpointer"/><method name="free" cname="gtk_tree_iter_free"><return-type type="void"/></method><method name="copy" cname="gtk_tree_iter_copy"><return-type type="GtkTreeIter*"/></method></boxed><boxed name="TreePath" cname="GtkTreePath"><field cname="depth" type="gint"/><field cname="indices" type="gint*"/><method name="prepend_index" cname="gtk_tree_path_prepend_index"><return-type type="void"/></method><constructor cname="gtk_tree_path_new_root"/><method name="copy" cname="gtk_tree_path_copy"><return-type type="GtkTreePath*"/></method><method name="append_index" cname="gtk_tree_path_append_index"><return-type type="void"/></method><method name="to_string" cname="gtk_tree_path_to_string"><return-type type="gchar*"/></method><method name="down" cname="gtk_tree_path_down"><return-type type="void"/></method><method name="get_depth" cname="gtk_tree_path_get_depth"><return-type type="gint"/></method><constructor cname="gtk_tree_path_new_from_string"/><constructor cname="gtk_tree_path_new"/><method name="up" cname="gtk_tree_path_up"><return-type type="gboolean"/></method><method name="is_ancestor" cname="gtk_tree_path_is_ancestor"><return-type type="gboolean"/></method><method name="next" cname="gtk_tree_path_next"><return-type type="void"/></method><method name="prev" cname="gtk_tree_path_prev"><return-type type="gboolean"/></method><method name="free" cname="gtk_tree_path_free"><return-type type="void"/></method><method name="is_descendant" cname="gtk_tree_path_is_descendant"><return-type type="gboolean"/></method><method name="get_indices" cname="gtk_tree_path_get_indices"><return-type type="gint*"/></method></boxed><struct name="TreeRowReference" cname="GtkTreeRowReference"><field cname="proxy" type="GObject*"/><field cname="model" type="GtkTreeModel*"/><field cname="path" type="GtkTreePath*"/><constructor cname="gtk_tree_row_reference_new_proxy"/><method name="valid" cname="gtk_tree_row_reference_valid"><return-type type="gboolean"/></method><constructor cname="gtk_tree_row_reference_new"/><method name="free" cname="gtk_tree_row_reference_free"><return-type type="void"/></method><method name="get_path" cname="gtk_tree_row_reference_get_path"><return-type type="GtkTreePath*"/></method></struct><struct name="TreeViewPrivate" cname="GtkTreeViewPrivate"><field cname="model" type="GtkTreeModel*"/><field cname="flags" type="guint"/><field cname="tree" type="GtkRBTree*"/><field cname="tab_offset" type="gint"/><field cname="button_pressed_node" type="GtkRBNode*"/><field cname="button_pressed_tree" type="GtkRBTree*"/><field cname="children" type="GList*"/><field cname="width" type="gint"/><field cname="height" type="gint"/><field cname="hadjustment" type="GtkAdjustment*"/><field cname="vadjustment" type="GtkAdjustment*"/><field cname="bin_window" type="GdkWindow*"/><field cname="header_window" type="GdkWindow*"/><field cname="drag_window" type="GdkWindow*"/><field cname="drag_highlight_window" type="GdkWindow*"/><field cname="drag_column" type="GtkTreeViewColumn*"/><field cname="dy" type="gint"/><field cname="drag_column_x" type="gint"/><field cname="expander_column" type="GtkTreeViewColumn*"/><field cname="edited_column" type="GtkTreeViewColumn*"/><field cname="presize_handler_timer" type="guint"/><field cname="validate_rows_timer" type="guint"/><field cname="focus_column" type="GtkTreeViewColumn*"/><field cname="anchor" type="GtkTreeRowReference*"/><field cname="cursor" type="GtkTreeRowReference*"/><field cname="drag_pos" type="gint"/><field cname="x_drag" type="gint"/><field cname="prelight_node" type="GtkRBNode*"/><field cname="prelight_tree" type="GtkRBTree*"/><field cname="expanded_collapsed_node" type="GtkRBNode*"/><field cname="expanded_collapsed_tree" type="GtkRBTree*"/><field cname="expand_collapse_timeout" type="guint"/><field cname="selection" type="GtkTreeSelection*"/><field cname="n_columns" type="gint"/><field cname="columns" type="GList*"/><field cname="header_height" type="gint"/><field cname="column_drop_func" type="GtkTreeViewColumnDropFunc"/><field cname="column_drop_func_data" type="gpointer"/><field cname="column_drop_func_data_destroy" type="GtkDestroyNotify"/><field cname="column_drag_info" type="GList*"/><field cname="cur_reorder" type="GtkTreeViewColumnReorder*"/><field cname="destroy_count_func" type="GtkTreeDestroyCountFunc"/><field cname="destroy_count_data" type="gpointer"/><field cname="destroy_count_destroy" type="GtkDestroyNotify"/><field cname="scroll_timeout" type="guint"/><field cname="drag_dest_row" type="GtkTreeRowReference*"/><field cname="drag_dest_pos" type="GtkTreeViewDropPosition"/><field cname="open_dest_timeout" type="guint"/><field cname="pressed_button" type="gint"/><field cname="press_start_x" type="gint"/><field cname="press_start_y" type="gint"/><field cname="scroll_to_path" type="GtkTreePath*"/><field cname="scroll_to_column" type="GtkTreeViewColumn*"/><field cname="scroll_to_row_align" type="gfloat"/><field cname="scroll_to_col_align" type="gfloat"/><field cname="scroll_to_use_align" bits="1" type="guint"/><field cname="reorderable" bits="1" type="guint"/><field cname="header_has_focus" bits="1" type="guint"/><field cname="drag_column_window_state" bits="3" type="guint"/><field cname="has_rules" bits="1" type="guint"/><field cname="mark_rows_col_dirty" bits="1" type="guint"/><field cname="enable_search" bits="1" type="guint"/><field cname="search_column" type="gint"/><field cname="search_dialog_position_func" type="GtkTreeViewSearchDialogPositionFunc"/><field cname="search_equal_func" type="GtkTreeViewSearchEqualFunc"/><field cname="search_user_data" type="gpointer"/><field cname="search_destroy" type="GtkDestroyNotify"/></struct><alias name="Type" cname="GtkType" type="GType			"/><struct name="WidgetAuxInfo" cname="GtkWidgetAuxInfo"><field cname="x" type="gint"/><field cname="y" type="gint"/><field cname="width" type="gint"/><field cname="height" type="gint"/><field cname="x_set" bits="1" type="guint"/><field cname="y_set" bits="1" type="guint"/></struct><struct name="WidgetShapeInfo" cname="GtkWidgetShapeInfo"><field cname="offset_x" type="gint16"/><field cname="offset_y" type="gint16"/><field cname="shape_mask" type="GdkBitmap*"/></struct><struct name="WindowGeometryInfo" cname="GtkWindowGeometryInfo"><field cname="geometry" type="*/GdkGeometry"/><field cname="mask" type="GdkWindowHints"/><field cname="widget" type="GtkWidget*"/><field cname="we should resize to this size.*/gint resize_width" type="*"/><field cname="resize_height" type="gint"/><field cname="only used if initial_pos_set*/gint initial_x" type="*"/><field cname="initial_y" type="gint"/><field cname="only if &gt; 0.*/gint default_width" type="*"/><field cname="default_height" type="gint"/><field cname="initial_pos_set" bits="1" type="guint"/><field cname="position_constraints_changed" bits="1" type="*"/><field cname="last" type="GtkWindowLastGeometryInfo"/></struct></namespace></api>
