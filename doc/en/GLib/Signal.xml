<Type Name="Signal" FullName="GLib.Signal">
  <TypeSignature Language="C#" Value="public class Signal" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>glib-sharp</AssemblyName>
    <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 71 EB 6C 55 75 52 9C BF 72 44 F7 A6 EA 05 62 84 F9 EA E0 3B CF F2 CC 13 2C 9C 49 0A B3 09 EA B0 B5 6B CE 44 9D F5 03 D9 C0 A8 1E 52 05 85 CD BE 70 E2 FB 90 43 4B AC 04 FA 62 22 A8 00 98 B7 A1 A7 B3 AF 99 1A 41 23 24 BB 43 25 F6 B8 65 BB 64 EB F6 D1 C2 06 D5 73 2D DF BC 70 A7 38 9E E5 3E 0C 24 6E 32 79 74 1A D0 05 03 E4 98 42 E1 9B F3 7B 19 8B 40 21 26 CB 36 89 C2 EA 64 96 A4 7C B4]</AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Signal Binding</summary>
    <remarks>Used by GLib.Object subclasses to bind events to native GObject properties.</remarks>
    <since version="Gtk# 2.4" />
  </Docs>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public static GLib.Signal Lookup (GLib.Object obj, string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>GLib.Signal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="GLib.Object" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Gets the signal marshaler for a property on an object.</summary>
        <param name="obj">a <see cref="T:GLib.Object" /></param>
        <param name="name">The signal name to look up.</param>
        <returns>a <see cref="T:GLib.Signal" /></returns>
        <remarks>This overload is used for <see cref="T:System.EventHandler" /> events, which are marshaled internally.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public static GLib.Signal Lookup (GLib.Object obj, string name, Delegate marshaler);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>GLib.Signal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="GLib.Object" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="marshaler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <summary>Gets the signal marshaler for a property on an object.</summary>
        <param name="obj">a <see cref="T:GLib.Object" /></param>
        <param name="name">The signal name to look up.</param>
        <param name="marshaler">The callback which marshals signal arguments and invokes handlers.</param>
        <returns>a <see cref="T:GLib.Signal" /></returns>
        <remarks>If the desired event is an <see cref="T:System.EventHandler" />, there is a convenience overload that doesn't require a marshaling callback.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDelegate">
      <MemberSignature Language="C#" Value="public void AddDelegate (Delegate d);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <summary>Adds a delegate to the signal.</summary>
        <param name="d">a <see cref="T:System.Delegate" /></param>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveDelegate">
      <MemberSignature Language="C#" Value="public void RemoveDelegate (Delegate d);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <summary>Removes a delegate from the signal.</summary>
        <param name="d">a <see cref="T:System.Delegate" /></param>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public Delegate Handler { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the handler to invoke for a signal.</summary>
        <value>a <see cref="T:System.Delegate" /></value>
        <remarks>Only use this property within a marshaling callback.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
