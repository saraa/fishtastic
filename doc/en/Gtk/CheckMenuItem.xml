<Type Name="CheckMenuItem" FullName="Gtk.CheckMenuItem">
  <TypeSignature Language="C#" Value="public class CheckMenuItem : Gtk.MenuItem, Implementor, IWrapper, IWrapper, IDisposable" Maintainer="Lee Mallabone" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>A menu item with a check box.</summary>
    <remarks>
      <para>A CheckMenuItem is a menu item that maintains the state of a boolean value in addition to a <see cref="T:Gtk.MenuItem" />'s usual role in activating application code.</para>
      <para>A check box indicating the state of the boolean value is displayed at the left side of the <see cref="T:Gtk.MenuItem" />. Activating the <see cref="T:Gtk.MenuItem" /> toggles the value.</para>
      <para>Whether the CheckMenuItem is 'on' or not can be determined with the <see cref="P:Gtk.CheckMenuItem.Active" /> property.</para>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gtk.MenuItem</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Atk.Implementor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Toggle">
      <MemberSignature Language="C#" Value="public void Toggle ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Toggles the state of the check box between active and inactive.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CheckMenuItem (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of CheckMenuItem, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CheckMenuItem ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Creates a CheckMenuItem with no label</summary>
        <returns>A new CheckMenuItem</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CheckMenuItem (string label);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Create a new CheckMenuItem with the specified <paramref name="label" />.</summary>
        <param name="label">The text to appear on the menu item.</param>
        <returns>A new CheckMenuItem</returns>
        <remarks>
          <para>The text label will be created using <see cref="M:Gtk.Label.NewWithNmemonic" />, so underscores in the label indicate the mnemonic for the menu item.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inconsistent">
      <MemberSignature Language="C#" Value="public bool Inconsistent { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Manages whether the CheckMenuItem is in the 'inconsistent' state.</summary>
        <param name="value">
          <see langword="true" /> to mark the check box as inconsistent, <see langword="false" /> otherwise.</param>
        <returns>
          <see langword="true" /> if this CheckMenuItem is in the inconsistent state, <see langword="false" /> otherwise.</returns>
        <remarks>
          <para>If the user has selected a range of elements (such as some text or spreadsheet cells) that are affected by a boolean setting, and the current values in that range are inconsistent, you may want to display the check in an "in between" state. This property turns on "in between" display.</para>
          <para>Normally you would turn off the inconsistent state again if the user explicitly selects a setting. This has to be done manually, this property only affects visual appearance, it doesn't affect the semantics of the widget.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public bool Active { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The 'active' state of the CheckMenuItem</summary>
        <param name="value">
          <see langword="true" /> if the menu item has been set active, <see langword="false" /> otherwise.</param>
        <returns />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Toggled">
      <MemberSignature Language="C#" Value="public event EventHandler Toggled;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>An event that is fired whenever the state of the CheckMenuItem is toggled.</summary>
        <remarks>
          <para>Connect to this event with a standard <see cref="T:System.EventHandler" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:GLib.GType" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideToggled">
      <MemberSignature Language="C#" Value="protected static void OverrideToggled (GLib.GType gtype);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToggled">
      <MemberSignature Language="C#" Value="protected virtual void OnToggled ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CheckMenuItem (GLib.GType gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <returns>a <see cref="T:Gtk.CheckMenuItem" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
  </Members>
</Type>