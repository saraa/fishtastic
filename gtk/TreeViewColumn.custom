// Gtk.TreeViewColumn.Custom - Gtk TreeViewColumn class customizations
//
// Author: Rachel Hestilow <hestilow@ximian.com> 
//
// Copyright (c) 2003 Rachel Hestilow 
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		public void SetAttributes (CellRenderer cell, params object[] attrs)
		{
			if (attrs.Length % 2 != 0)
				throw new ArgumentException ("attrs should contain pairs of attribute/col");

			ClearAttributes (cell);
			for (int i = 0; i < attrs.Length - 1; i += 2) {
				AddAttribute (cell, (string) attrs [i], (int) attrs [i + 1]);
			}
		}

		private void _NewWithAttributes (string title, Gtk.CellRenderer cell, Array attrs) {
			Title = title;
			PackStart (cell, true);
			for (int i = 0; (i + 1) < attrs.Length; i += 2) {
				AddAttribute (cell, (string) ((object[])attrs)[i], (int)((object[])attrs)[i + 1]);
			}
		}

		public TreeViewColumn (string title, Gtk.CellRenderer cell, Array attrs) : this ()
		{
			_NewWithAttributes (title, cell, attrs);
		}
		
		public TreeViewColumn (string title, Gtk.CellRenderer cell, params object[] attrs) : this ()
		{
			_NewWithAttributes (title, cell, attrs);
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_tree_view_column_get_cell_renderers (IntPtr raw);

		public CellRenderer[] CellRenderers {
			get {
				IntPtr raw_ret = gtk_tree_view_column_get_cell_renderers (Handle);
				if (raw_ret == IntPtr.Zero)
					return new CellRenderer [0];
				GLib.List list = new GLib.List (raw_ret);
				CellRenderer[] result = new CellRenderer [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as CellRenderer;
				return result;
			}
		}

		Hashtable cell_data_funcs;

		Hashtable CellDataFuncs {
			get {
				if (cell_data_funcs == null)
					cell_data_funcs = new Hashtable ();
				return cell_data_funcs;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_tree_view_column_set_cell_data_func(IntPtr raw, IntPtr cell_renderer, IntPtr func, IntPtr func_data, IntPtr destroy);

		private void ReleaseDataFunc (CellRenderer cell)
		{
			CellDataFuncs [cell.Handle] = null;
			gtk_tree_view_column_set_cell_data_func(Handle, cell.Handle, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_tree_view_column_set_cell_data_func(IntPtr raw, IntPtr cell_renderer, GtkSharp.TreeCellDataFuncNative func, IntPtr func_data, IntPtr destroy);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_tree_view_column_set_cell_data_func(IntPtr raw, IntPtr cell_renderer, GtkSharp.CellLayoutDataFuncNative func, IntPtr func_data, IntPtr destroy);

		public void SetCellDataFunc (CellRenderer cell_renderer, TreeCellDataFunc func) 
		{
			if (func == null) {
				ReleaseDataFunc (cell_renderer);
				return;
			}
;
			GtkSharp.TreeCellDataFuncWrapper wrapper = new GtkSharp.TreeCellDataFuncWrapper (func, this);
			CellDataFuncs [cell_renderer.Handle] = wrapper;
			gtk_tree_view_column_set_cell_data_func(Handle, cell_renderer.Handle, wrapper.NativeDelegate, IntPtr.Zero, IntPtr.Zero);
		}
		public void SetCellDataFunc (CellRenderer cell_renderer, CellLayoutDataFunc func) 
		{
			if (func == null) {
				ReleaseDataFunc (cell_renderer);
				return;
			}
;
			GtkSharp.CellLayoutDataFuncWrapper wrapper = new GtkSharp.CellLayoutDataFuncWrapper (func, this);
			CellDataFuncs [cell_renderer.Handle] = wrapper;
			gtk_tree_view_column_set_cell_data_func(Handle, cell_renderer.Handle, wrapper.NativeDelegate, IntPtr.Zero, IntPtr.Zero);
		}

		public void SetCellDataFunc (CellRenderer cell_renderer, NodeCellDataFunc func) 
		{
			if (func == null) {
				ReleaseDataFunc (cell_renderer);
				return;
			}
;
			NodeCellDataFuncWrapper wrapper = new NodeCellDataFuncWrapper (func, this);
			CellDataFuncs [cell_renderer.Handle] = wrapper;
			gtk_tree_view_column_set_cell_data_func(Handle, cell_renderer.Handle, wrapper.NativeDelegate, IntPtr.Zero, IntPtr.Zero);
		}

