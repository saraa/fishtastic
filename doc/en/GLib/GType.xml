<Type Name="GType" FullName="GLib.GType">
  <TypeSignature Language="C#" Value="public sealed struct GType" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>glib-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement />
  <Docs>
    <summary>The GLib Runtime type identification and management system. The GType API is the foundation of the GObject system. It provides the facilities for registering and managing all fundamental data types, user-defined object and interface types. </summary>
    <remarks>
      <example>
        <code lang="C#">
using System;
using Gtk;

public class MagrittesWindow : Window {
	static GLib.GType gtype;
	Button button;
	
	public static new GLib.GType GType
	{
		get
		{
			if (gtype == GLib.GType.Invalid)
				gtype = RegisterGType (typeof (MagrittesWindow));
			return gtype;
		}
	}
	
	public MagrittesWindow() : base (GType)
	{
		button = new Button("This is not a button");
		button.Clicked += new EventHandler(button_Clicked);
	
		this.Title = "This is not a Window";
		this.SetDefaultSize (400, 300);
		this.DeleteEvent += new DeleteEventHandler (MyWindow_Delete);
		this.Add(button);
		this.ShowAll ();
	}
	/* elided for brevity */
  </code>
      </example>
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes />
  <Members>
    <Member MemberName="Invalid">
      <MemberSignature Language="C#" Value="public static GLib.GType Invalid;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Invalid
</summary>
        <remarks>
          <example>
            <code lang="C#">
      public class MyWindow : Window {
     static GLib.GType gtype;
     Button button;
     
     public static new GLib.GType GType
     {
          get
          {
               if (gtype == GLib.GType.Invalid)
                    gtype = RegisterGType (typeof (MyWindow));
               return gtype;
          }
     }
/* Rest elided for clarity */
  </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static GLib.GType None;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.None</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="public static GLib.GType String;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.String</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Boolean">
      <MemberSignature Language="C#" Value="public static GLib.GType Boolean;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Boolean.</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static GLib.GType Int;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Int</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Double">
      <MemberSignature Language="C#" Value="public static GLib.GType Double;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Double</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Float">
      <MemberSignature Language="C#" Value="public static GLib.GType Float;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Float</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Char">
      <MemberSignature Language="C#" Value="public static GLib.GType Char;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Char</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UInt">
      <MemberSignature Language="C#" Value="public static GLib.GType UInt;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.UInt</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Object">
      <MemberSignature Language="C#" Value="public static GLib.GType Object;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Object</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pointer">
      <MemberSignature Language="C#" Value="public static GLib.GType Pointer;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Pointer</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Boxed">
      <MemberSignature Language="C#" Value="public static GLib.GType Boxed;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>A field of type GType.Boxed</summary>
        <remarks>Sample see: GLib.GType.Invalid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <summary>
          <para>Determines whether the current instance and a specified
   <see cref="T:System.Object" /> represent the same value.</para>
        </summary>
        <param name="o">a <see cref="T:System.Object" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a hash code for the current instance.</summary>
        <returns>a <see cref="T:System.Int32" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Manufactures a human-readable text string that describes an instance of the class.</summary>
        <returns>a <see cref="T:System.String" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GType (IntPtr val);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="val" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Constructor for GType. Primarily used in generated wrappers for gtk objects.</summary>
        <param name="val">a <see cref="T:System.IntPtr" /></param>
        <returns>a <see cref="T:GLib.GType" /></returns>
        <remarks>Generated code from gnome/generated/About.cs:

<example>
            <code lang="C#">
                [DllImport("gnomeui-2")]
                static extern IntPtr gnome_about_get_type();
                                                                                                                        
                public static new GLib.GType GType {
                        get {
                                IntPtr raw_ret = gnome_about_get_type();
                                GLib.GType ret = new GLib.GType(raw_ret);
                                return ret;
                        }
                }

  </code>
          </example></remarks>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public IntPtr Val { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Read only property retrieves the <see cref="T:System.IntPtr" /> representing the GType object in question.</summary>
        <returns>a <see cref="T:System.IntPtr" /></returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>