<Type Name="Icon" FullName="Gtk.Icon">
  <TypeSignature Language="C#" Value="public class Icon" Maintainer="Hector Gomez M" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Methods for handling icon properties.</summary>
    <remarks />
  </Docs>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName="SizeRegisterAlias">
      <MemberSignature Language="C#" Value="public static void SizeRegisterAlias (string alias, Gtk.IconSize target);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alias" Type="System.String" />
        <Parameter Name="target" Type="Gtk.IconSize" />
      </Parameters>
      <Docs>
        <summary>Registers <paramref name="alias" /> as another name for <paramref name="target" />.</summary>
        <param name="alias">An alias for <paramref name="name" />.</param>
        <param name="target">An existing icon size.</param>
        <remarks>
          <para>
	  Calling <see cref="M:Gtk.Icon.SizeFromName" /> with <paramref name="alias" /> as argument will return <paramref name="target" />.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeFromName">
      <MemberSignature Language="C#" Value="public static Gtk.IconSize SizeFromName (string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.IconSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Looks up the icon size associated with <paramref name="name" />.</summary>
        <param name="name">The name to look up.</param>
        <returns>The icon size with the given name.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SizeRegister">
      <MemberSignature Language="C#" Value="public static Gtk.IconSize SizeRegister (string name, int width, int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.IconSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <summary>Registers a new icon size.</summary>
        <param name="name">Name of the icon size.</param>
        <param name="width">The icon width.</param>
        <param name="height">The icon height.</param>
        <returns>Integer value representing the size.</returns>
        <remarks>
          <para>
	  Along the same lines as <see cref="F:Gtk.IconSize.Menu" />. Returns integer value for the size.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeGetName">
      <MemberSignature Language="C#" Value="public static string SizeGetName (Gtk.IconSize size);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="Gtk.IconSize" />
      </Parameters>
      <Docs>
        <summary>Obtains the canonical name of the given icon size.</summary>
        <param name="size">A <see cref="T:Gtk.IconSize" />.</param>
        <returns>The name of the given icon size.</returns>
        <remarks>
          <para>
	  The returned string is statically allocated and should not be freed.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Icon ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>A constructor.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SizeLookup">
      <MemberSignature Language="C#" Value="public static bool SizeLookup (Gtk.IconSize size, out int width, out int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="Gtk.IconSize" />
        <Parameter Name="width" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="height" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <summary>Obtains the pixel size of a semantic icon size, possibly modified by user preferences fot the default <see cref="T:Gtk.Settings" />.</summary>
        <param name="size">An icon size.</param>
        <param name="width">Location to store icon width.</param>
        <param name="height">Location to store icon height.</param>
        <returns>
          <see langword="true" /> if <paramref name="size" /> was a valid size.</returns>
        <remarks>
          <para>
 	  Normally size would be <see cref="F:Gtk.IconSize.Menu" />, <see cref="F:Gtk.IconSize.Button" />, etc. This method is not normally needed, <see cref="M:Gtk.Widget.RenderIcon" /> is the usual way to get an icon for rendering, then just look at the size of the rendered pixbuf. The rendered pixbuf may not even correspond to the width/height returned by <see cref="M:Gtk.Icon.SizeLookup" />, because themes are free to render the pixbuf however they like, including changing the usual size.
	 	</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeLookupForSettings">
      <MemberSignature Language="C#" Value="public static bool SizeLookupForSettings (Gtk.Settings settings, Gtk.IconSize size, out int width, out int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settings" Type="Gtk.Settings" />
        <Parameter Name="size" Type="Gtk.IconSize" />
        <Parameter Name="width" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="height" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <summary>Obtains the pixel size of a semantic icon size, possibly modified by user preferences for a particular <see cref="T:Gtk.Settings" />.</summary>
        <param name="settings">A <see cref="T:Gtk.Settings" /> object, used to determine which set of user preferences to use.</param>
        <param name="size">An icon size.</param>
        <param name="width">Location to store icon width.</param>
        <param name="height">Location to store icon height.</param>
        <returns>
          <see langword="true" /> if <paramref name="size" /> was a valid size.</returns>
        <remarks>
          <para>
	  Normally size would be <see cref="F:Gtk.IconSize.Menu" />, <see cref="F:Gtk.IconSize.Button" />, etc. This method is not normally needed, <see cref="M:Gtk.Widget.RenderIcon" /> is the usual way to get an icon for rendering, then just look at the size of the rendered pixbuf. The rendered pixbuf may not even correspond to the width/height returned by <see cref="M:Gtk.Icon.SizeLookup" />, because themes are free to render the pixbuf however they like, including changing the usual size.
		 </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
