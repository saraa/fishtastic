<Type Name="CanvasLine" FullName="Gnome.CanvasLine">
  <TypeSignature Language="C#" Value="public class CanvasLine : Gnome.CanvasItem, IWrapper, IDisposable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>gnome-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Line canvas item</summary>
    <remarks>
      A canvas item for drawing lines. This canvas item uses a
      <see cref="T:Gnome.CanvasPoints" /> structure so one or multiple joined lined
      segments can be drawn with a single <see cref="T:Gnome.CanvasLine" /> item.
    
<example>
        <code lang="C#">
// LineExample.cs - Displays triangle using gnome canvas 
// Compile: mcs -r gtk-sharp.dll -r gnome-sharp.dll LineExample.cs

namespace GnomeSamples {

    using System;
    using Gtk;
    using Gnome;

    public class LineExample  {

        public static int Main (string[] args) {
            Application.Init ();
                        
            Gtk.Window win = new Gtk.Window ("Canvas line example");
            win.DeleteEvent += new DeleteEventHandler (Window_Delete);
                    
            Canvas canvas = new Canvas ();
            win.Add (canvas);
            CanvasLine line = new CanvasLine (canvas.Root ());
            line.Points = new CanvasPoints (new double[]{40,0, 0,80, 80,80, 40,0});                                
                                    
            win.ShowAll ();
            Application.Run ();
            return 0;
        }

        static void Window_Delete (object obj, DeleteEventArgs args) {
            Application.Quit ();
            args.RetVal = true;
       }
    }
}

  </code>
      </example></remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gnome.CanvasItem</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanvasLine (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of CanvasLine, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanvasLine (Gnome.CanvasGroup group);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="group" Type="Gnome.CanvasGroup" />
      </Parameters>
      <Docs>
        <summary>Creates a new line</summary>
        <param name="group">
          The <see cref="T:Gnome.CanvasGroup" /> that this item
          belongs to.
        </param>
        <returns>the newly-created <see cref="T:Gnome.CanvasLine" /> object</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillStipple">
      <MemberSignature Language="C#" Value="public Gdk.Drawable FillStipple { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gdk.Drawable</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Stipple pattern for the line.</summary>
        <param name="value">Stipple pattern for the line.</param>
        <returns>Stipple pattern for the line.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrowShapeB">
      <MemberSignature Language="C#" Value="public double ArrowShapeB { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>
          Distance from tip of arrowhead to trailing point, measured
          along the shaft.
        </summary>
        <param name="value">Distance from tip of arrowhead to trailing point, measured along shaft.</param>
        <returns>Distance from tip of arrowhead to trailing point, measured along shaft.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrowShapeA">
      <MemberSignature Language="C#" Value="public double ArrowShapeA { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Distance from tip of arrowhead to center.</summary>
        <param name="value">Distance from tip of arrowhead to center.</param>
        <returns>Distance from tip of arrowhead to center.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Smooth">
      <MemberSignature Language="C#" Value="public bool Smooth { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Specifies whether to smooth the line using parabolic splines.</summary>
        <param name="value">
          <see langword="true" /> to smooth the line</param>
        <returns>Whether to smooth the line using parabolic splines</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStyle">
      <MemberSignature Language="C#" Value="public Gdk.LineStyle LineStyle { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gdk.LineStyle</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Line dash style.</summary>
        <param name="value">Line dash style</param>
        <returns>Line dash style</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Points">
      <MemberSignature Language="C#" Value="public Gnome.CanvasPoints Points { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gnome.CanvasPoints</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>a <see cref="T:Gnome.CanvasPoints" /> pointer. This
        can be created by a call to the <see cref="C:Gnome.CanvasPoints" /> constructor.
        </summary>
        <param name="value">a <see cref="T:Gnome.CanvasPoints" /> pointer.</param>
        <returns>a <see cref="T:Gnome.CanvasPoints" /> pointer.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstArrowhead">
      <MemberSignature Language="C#" Value="public bool FirstArrowhead { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Specifies whether to draw an arrowhead on the first point of the line.</summary>
        <param name="value">
          <see langword="true" /> to draw an arrowhead</param>
        <returns>whether to draw an arrowhead on the first point of the line.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplineSteps">
      <MemberSignature Language="C#" Value="public uint SplineSteps { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Specifies the number of steps to use when rendering curves.</summary>
        <param name="value">the number of steps to use when rendering curves.</param>
        <returns>the number of steps to use when rendering curves.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastArrowhead">
      <MemberSignature Language="C#" Value="public bool LastArrowhead { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Specifies whether to draw an arrowhead on the last point of the line.</summary>
        <param name="value">
          <see langword="true" /> to draw an arrowhead</param>
        <returns>whether to draw an arrowhead on the last point of the line.</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapStyle">
      <MemberSignature Language="C#" Value="public Gdk.CapStyle CapStyle { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gdk.CapStyle</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Determines how the ends of lines are drawn (the line cap style).</summary>
        <param name="value">the line cap style.</param>
        <returns>the line cap style</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinStyle">
      <MemberSignature Language="C#" Value="public Gdk.JoinStyle JoinStyle { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gdk.JoinStyle</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Vertex join style for line segments</summary>
        <param name="value">the vertext join style</param>
        <returns>Vertex join style</returns>
        <remarks>
          <para>
            (<see cref="F:Gdk.JoinStyle.Miter" /> to join by extending
            each line to meet at an angle, <see cref="F:Gdk.JoinStyle.Round" /> to join by a circular arc,
            and <see cref="F:Gdk.JoinStyle.Bevel" /> to join by a
            straight line which makes an equal angle with each line)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillColorRgba">
      <MemberSignature Language="C#" Value="public uint FillColorRgba { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Line color with an alpha component (in the format 0xRRGGBBAA).</summary>
        <param name="value">line color with alpha component</param>
        <returns>the line color</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillColorGdk">
      <MemberSignature Language="C#" Value="public Gdk.Color FillColorGdk { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gdk.Color</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The <see cref="T:Gdk.Color" /> to draw the line with.</summary>
        <param name="value">the line color</param>
        <returns>the line color</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthUnits">
      <MemberSignature Language="C#" Value="public double WidthUnits { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Width of the line in canvas units. The line width will be scaled when the canvas zoom factor changes.</summary>
        <param name="value">width of the line</param>
        <returns>width of the line in canvas units</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrowShapeC">
      <MemberSignature Language="C#" Value="public double ArrowShapeC { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Distance of arrowhead trailing points from outside edge of shaft.</summary>
        <param name="value">distance of the arrowing trailing points</param>
        <returns>Distance of arrowhead trailing points from outside edge of shaft.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthPixels">
      <MemberSignature Language="C#" Value="public uint WidthPixels { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Width of the line in pixels. The line width will not be scaled when the canvas zoom factor changes.</summary>
        <param name="value">width of the line</param>
        <returns>width of the line in pixels.</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillColor">
      <MemberSignature Language="C#" Value="public string FillColor { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>X color specification for line.</summary>
        <param name="value">X color specification for the line</param>
        <returns>X color specification for the line</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GType Property.</summary>
        <returns>a <see cref="T:GLib.GType" /></returns>
        <remarks>Returns the native <see cref="T:GLib.GType" /> value for <see cref="T:Gnome.CanvasLine" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CanvasLine (GLib.GType gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <returns>a <see cref="T:Gnome.CanvasLine" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CanvasLine ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:Gnome.CanvasLine" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
  </Members>
</Type>