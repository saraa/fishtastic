<Type Name="Druid" FullName="Gnome.Druid">
  <TypeSignature Language="C#" Value="public class Druid : Gtk.Container, Implementor, IWrapper, IDisposable" Maintainer="John Luke" />
  <AssemblyInfo>
    <AssemblyName>gnome-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Widget for sequentially stepping through some pages.</summary>
    <remarks>The widget which ultimately holds all of the druid's pages and information. This is the widget which the application developer then places inside an outer widget, such as a dialog box for ultimate display.</remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gtk.Container</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Atk.Implementor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="PrependPage">
      <MemberSignature Language="C#" Value="public void PrependPage (Gnome.DruidPage page);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="Gnome.DruidPage" />
      </Parameters>
      <Docs>
        <summary>
          <para>This will prepend a <see cref="T:Gnome.DruidPage" /> into the internal list of pages that the druid has.</para>
        </summary>
        <param name="page"> The page to be inserted.</param>
        <remarks>Since <see cref="T:Gnome.Druid" /> is just a container, you will need to also call Show() on the page, otherwise the page will not be shown.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertPage">
      <MemberSignature Language="C#" Value="public void InsertPage (Gnome.DruidPage back_page, Gnome.DruidPage page);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="back_page" Type="Gnome.DruidPage" />
        <Parameter Name="page" Type="Gnome.DruidPage" />
      </Parameters>
      <Docs>
        <summary>This will insert a page after back_page into the list of internal pages that the druid has.</summary>
        <param name="back_page"> The <see cref="T:Gnome.DruidPage" /> prior to the page to be inserted.</param>
        <param name="page">The <see cref="T:Gnome.DruidPage" /> to insert.</param>
        <remarks>
          <para>If back_page is not present in the list or null, page will be prepended to the list.</para>
          <para>Since <see cref="T:Gnome.Druid" /> is just a container, you will need to also call Show() on the page, otherwise the page will not be shown.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetButtonsSensitive">
      <MemberSignature Language="C#" Value="public void SetButtonsSensitive (bool back_sensitive, bool next_sensitive, bool cancel_sensitive, bool help_sensitive);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="back_sensitive" Type="System.Boolean" />
        <Parameter Name="next_sensitive" Type="System.Boolean" />
        <Parameter Name="cancel_sensitive" Type="System.Boolean" />
        <Parameter Name="help_sensitive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>Sets the sensitivity of druid's control-buttons.</summary>
        <param name="back_sensitive">true if the back button is sensitive.</param>
        <param name="next_sensitive">true if the next button is sensitive.</param>
        <param name="cancel_sensitive">true if the cancel button is sensitive.</param>
        <param name="help_sensitive">true if the help button is sensitive.</param>
        <remarks>If the variables are true, then the buttons will be clickable. This function is used primarily by the actual GnomeDruidPage widgets.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPage">
      <MemberSignature Language="C#" Value="public void AppendPage (Gnome.DruidPage page);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="Gnome.DruidPage" />
      </Parameters>
      <Docs>
        <summary>This will append a <see cref="T:Gnome.DruidPage" /> onto the end of the internal list.</summary>
        <param name="page"> The <see cref="T:Gnome.DruidPage" /> to be appended.</param>
        <remarks>
          <para>Since <see cref="T:Gnome.Druid" /> is just a container, you will need to also call Show() on the page, otherwise the page will not be shown.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructWithWindow">
      <MemberSignature Language="C#" Value="public void ConstructWithWindow (string title, Gtk.Window parent, bool close_on_cancel, Gtk.Widget window);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="parent" Type="Gtk.Window" />
        <Parameter Name="close_on_cancel" Type="System.Boolean" />
        <Parameter Name="window" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <summary>Creates a new toplevel window with the title of <paramref name="title" /> (which can be <see langword="null" />) and a parent of <paramref name="parent" /> (which also can be <see langword="null" />).</summary>
        <param name="title">an object of type <see cref="T:System.String" /></param>
        <param name="parent">an object of type <see cref="T:Gtk.Window" /></param>
        <param name="close_on_cancel">an object of type <see cref="T:System.Boolean" /></param>
        <param name="window">an object of type <see cref="T:Gtk.Widget" /></param>
        <remarks>The druid will be placed inside this window. The window and the druid will both be shown. If you need the window widget pointer you can optionally get it through the last argument. When the druid gets destroyed, so will the window that is created here.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Druid (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of Druid, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Druid ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Creates a new GnomeDruid widget.</summary>
        <returns>a new <see cref="T:Gnome.Druid" /> Widget.</returns>
        <remarks>You need to add this druid to a dialog yourself, it is not a dialog.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Druid (string title, Gtk.Window parent, bool close_on_cancel, Gtk.Widget window);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="parent" Type="Gtk.Window" />
        <Parameter Name="close_on_cancel" Type="System.Boolean" />
        <Parameter Name="window" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <summary>
          <para>Creates a new <see cref="T:Gnome.Druid" /> widget inside a new toplevel window.</para>
        </summary>
        <param name="title"> A title of the window.</param>
        <param name="parent"> The parent of this window (TransientFor).</param>
        <param name="close_on_cancel">Indicates if the window should be closed when cancel is pressed.</param>
        <param name="window"> Optional return of the <see cref="T:Gtk.Window" /> created.</param>
        <returns>a new <see cref="T:Gnome.Druid" /> Widget.</returns>
        <remarks>
          <para>Creates a new <see cref="T:Gnome.Druid" /> widget and a new toplevel window with the given title (which can be null) and a parent (which also can be null). The window and the druid will both be shown.</para>
          <para>When the druid gets destroyed, so will the window that is created here.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Page">
      <MemberSignature Language="C#" Value="public Gnome.DruidPage Page { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gnome.DruidPage</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>This will make <paramref name="page" /> the currently showing page in the druid.</summary>
        <param name="value">an object of type <see cref="T:Gnome.DruidPage" /></param>
        <returns>an object of type <see cref="T:Gnome.DruidPage" /></returns>
        <remarks>
          <paramref name="page" /> must already be in the druid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFinish">
      <MemberSignature Language="C#" Value="public bool ShowFinish { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>
          <para>This will make the given <see cref="T:Gnome.DruidPage" /> the currently showing page in the druid.</para>
        </summary>
        <param name="value">
          <para>The <see cref="T:Gnome.DruidPage" /> to be brought to the foreground.</para>
        </param>
        <returns>an object of type <see cref="T:System.Boolean" /></returns>
        <remarks>
          <para>The page must already be in the druid.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Used to specify if the druid is currently showing the last page of the sequence.</summary>
        <param name="value"> If true, then the "Next" button is changed to be "Finish".</param>
        <returns>an object of type <see cref="T:System.Boolean" /></returns>
        <remarks>If set to true, the druid will display "Finish", rather than "Next".</remarks>
      </Docs>
    </Member>
    <Member MemberName="Help">
      <MemberSignature Language="C#" Value="public event EventHandler Help;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Used to specify if the "Help" button on the druid is visible.</summary>
        <remarks>If set to true, the "Help" button is shown in the lower left corner of the widget.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public event EventHandler Cancel;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when the "Cancel" button of the druid is clicked.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>a <see cref="T:GLib.GType" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideCancel">
      <MemberSignature Language="C#" Value="protected static void OverrideCancel (GLib.GType gtype);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideHelp">
      <MemberSignature Language="C#" Value="protected static void OverrideHelp (GLib.GType gtype);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCancel">
      <MemberSignature Language="C#" Value="protected virtual void OnCancel ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Run when the druid is canceled.</summary>
        <remarks>Override this method if you want to add non-standard behaviour to occur when the druid is canceled</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHelp">
      <MemberSignature Language="C#" Value="protected virtual void OnHelp ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Run when the user requests help from the druid's interface.</summary>
        <remarks>Override this method to offer some help to the user when requested.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Druid (GLib.GType gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <returns>a <see cref="T:Gnome.Druid" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
  </Members>
</Type>