<Type Name="Select" FullName="Gda.Select">
  <TypeSignature Language="C#" Maintainer="auto" Value="public class Select : Gda.DataModelArray" />
  <AssemblyInfo>
    <AssemblyName>gda-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>
      <para>
Filtering data from <see cref="T:Gda.DataModel" />.
</para>
    </summary>
    <remarks>To be added</remarks>
  </Docs>
  <Base>
    <BaseTypeName>Gda.DataModelArray</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Members>
    
    <Member MemberName="AddSource">
      <MemberSignature Language="C#" Value="public void AddSource (string name, Gda.DataModel source);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="source" Type="Gda.DataModel" />
      </Parameters>
      <Docs>
        <summary>
          <para>
Adds a data model as a source of data for the Gda.Select object. 
</para>
        </summary>
        <param name="name">a <see cref="T:System.String" /></param>
        <param name="source">a <see cref="T:Gda.DataModel" /></param>
        <remarks>
          <para>
When the select object is run via <see cref="M:Gda.Select.Run" />, it will parse the SQL and get the required data from the source data models.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public bool Run ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>
Runs the query and fills in the Gda.Select object with the rows that matched the SQL command (which can be set with <see cref="M:Gda.Select.Sql" />) associated with this Gda.Select object.
</para>
        </summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>
          <para>
After calling this function, if everything is successful, the Gda.Select object will contain the matched rows, which can then be accessed like a normal <see cref="T:Gda.DataModel" />.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Select (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="raw">a <see cref="T:System.IntPtr" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Select ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>
          <para>
Creates a new Gda.Select object, which allows programs to filter <see cref="T:Gda.DataModel" />'s based on a given SQL SELECT command.
</para>
        </summary>
        <remarks>
          <para>
A GdaSelect is just another GdaDataModel-based class, so it can be used in the same way any other data model class is.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sql">
      <MemberSignature Language="C#" Value="public string Sql { set; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the SQL command to be used on the given Gda.Select object for filtering rows from the source data model.</summary>
        <value>a <see cref="T:System.String" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GType Property.</summary>
        <value>a <see cref="T:GLib.GType" /></value>
        <remarks>Returns the native <see cref="T:GLib.GType" /> value for <see cref="T:Gda.Select" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Select (GLib.GType gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <summary>Protected Constructor.</summary>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <remarks>Chain to this constructor if you have manually registered a native <see cref="T:GLib.GType" /> value for your subclass.</remarks>
      </Docs>
    <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete(Message=null, IsError=False)</AttributeName>
        </Attribute>
      </Attributes></Member>
  </Members>
</Type>
