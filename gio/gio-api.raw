<?xml version="1.0"?>
<api parser_version="1">
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="G" library="libgio-2.0-0.dll">
    <enum name="AppInfoCreateFlags" cname="GAppInfoCreateFlags" gtype="g_app_info_create_flags_get_type" type="flags">
      <member cname="G_APP_INFO_CREATE_NONE" name="None" />
      <member cname="G_APP_INFO_CREATE_NEEDS_TERMINAL" name="NeedsTerminal" value="1 &lt;&lt; 0" />
      <member cname="G_APP_INFO_CREATE_SUPPORTS_URIS" name="SupportsUris" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="AskPasswordFlags" cname="GAskPasswordFlags" gtype="g_ask_password_flags_get_type" type="flags">
      <member cname="G_ASK_PASSWORD_NEED_PASSWORD" name="NeedPassword" value="1 &lt;&lt; 0" />
      <member cname="G_ASK_PASSWORD_NEED_USERNAME" name="NeedUsername" value="1 &lt;&lt; 1" />
      <member cname="G_ASK_PASSWORD_NEED_DOMAIN" name="NeedDomain" value="1 &lt;&lt; 2" />
      <member cname="G_ASK_PASSWORD_SAVING_SUPPORTED" name="SavingSupported" value="1 &lt;&lt; 3" />
      <member cname="G_ASK_PASSWORD_ANONYMOUS_SUPPORTED" name="AnonymousSupported" value="1 &lt;&lt; 4" />
    </enum>
    <enum name="DataStreamByteOrder" cname="GDataStreamByteOrder" gtype="g_data_stream_byte_order_get_type" type="enum">
      <member cname="G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN" name="BigEndian" />
      <member cname="G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN" name="LittleEndian" />
      <member cname="G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN" name="HostEndian" />
    </enum>
    <enum name="DataStreamNewlineType" cname="GDataStreamNewlineType" gtype="g_data_stream_newline_type_get_type" type="enum">
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_LF" name="Lf" />
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_CR" name="Cr" />
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_CR_LF" name="CrLf" />
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_ANY" name="Any" />
    </enum>
    <enum name="EmblemOrigin" cname="GEmblemOrigin" gtype="g_emblem_origin_get_type" type="enum">
      <member cname="G_EMBLEM_ORIGIN_UNKNOWN" name="Unknown" />
      <member cname="G_EMBLEM_ORIGIN_DEVICE" name="Device" />
      <member cname="G_EMBLEM_ORIGIN_LIVEMETADATA" name="Livemetadata" />
      <member cname="G_EMBLEM_ORIGIN_TAG" name="Tag" />
    </enum>
    <enum name="FileAttributeInfoFlags" cname="GFileAttributeInfoFlags" gtype="g_file_attribute_info_flags_get_type" type="flags">
      <member cname="G_FILE_ATTRIBUTE_INFO_NONE" name="None" />
      <member cname="G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE" name="CopyWithFile" value="1 &lt;&lt; 0" />
      <member cname="G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED" name="CopyWhenMoved" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="FileAttributeStatus" cname="GFileAttributeStatus" gtype="g_file_attribute_status_get_type" type="enum">
      <member cname="G_FILE_ATTRIBUTE_STATUS_UNSET" name="Unset" />
      <member cname="G_FILE_ATTRIBUTE_STATUS_SET" name="Set" />
      <member cname="G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING" name="ErrorSetting" />
    </enum>
    <enum name="FileAttributeType" cname="GFileAttributeType" gtype="g_file_attribute_type_get_type" type="enum">
      <member cname="G_FILE_ATTRIBUTE_TYPE_INVALID" name="Invalid" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_STRING" name="String" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_BYTE_STRING" name="ByteString" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_BOOLEAN" name="Boolean" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_UINT32" name="Uint32" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_INT32" name="Int32" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_UINT64" name="Uint64" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_INT64" name="Int64" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_OBJECT" name="Object" />
    </enum>
    <enum name="FileCopyFlags" cname="GFileCopyFlags" gtype="g_file_copy_flags_get_type" type="flags">
      <member cname="G_FILE_COPY_NONE" name="None" />
      <member cname="G_FILE_COPY_OVERWRITE" name="Overwrite" value="1 &lt;&lt; 0" />
      <member cname="G_FILE_COPY_BACKUP" name="Backup" value="1 &lt;&lt; 1" />
      <member cname="G_FILE_COPY_NOFOLLOW_SYMLINKS" name="NofollowSymlinks" value="1 &lt;&lt; 2" />
      <member cname="G_FILE_COPY_ALL_METADATA" name="AllMetadata" value="1 &lt;&lt; 3" />
      <member cname="G_FILE_COPY_NO_FALLBACK_FOR_MOVE" name="NoFallbackForMove" value="1 &lt;&lt; 4" />
    </enum>
    <enum name="FileCreateFlags" cname="GFileCreateFlags" gtype="g_file_create_flags_get_type" type="flags">
      <member cname="G_FILE_CREATE_NONE" name="None" />
      <member cname="G_FILE_CREATE_PRIVATE" name="Private" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="FileMonitorEvent" cname="GFileMonitorEvent" gtype="g_file_monitor_event_get_type" type="enum">
      <member cname="G_FILE_MONITOR_EVENT_CHANGED" name="Changed" />
      <member cname="G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT" name="ChangesDoneHint" />
      <member cname="G_FILE_MONITOR_EVENT_DELETED" name="Deleted" />
      <member cname="G_FILE_MONITOR_EVENT_CREATED" name="Created" />
      <member cname="G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED" name="AttributeChanged" />
      <member cname="G_FILE_MONITOR_EVENT_PRE_UNMOUNT" name="PreUnmount" />
      <member cname="G_FILE_MONITOR_EVENT_UNMOUNTED" name="Unmounted" />
    </enum>
    <enum name="FileMonitorFlags" cname="GFileMonitorFlags" gtype="g_file_monitor_flags_get_type" type="flags">
      <member cname="G_FILE_MONITOR_NONE" name="None" />
      <member cname="G_FILE_MONITOR_WATCH_MOUNTS" name="WatchMounts" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="FileQueryInfoFlags" cname="GFileQueryInfoFlags" gtype="g_file_query_info_flags_get_type" type="flags">
      <member cname="G_FILE_QUERY_INFO_NONE" name="None" />
      <member cname="G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS" name="NofollowSymlinks" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="FileType" cname="GFileType" gtype="g_file_type_get_type" type="enum">
      <member cname="G_FILE_TYPE_UNKNOWN" name="Unknown" />
      <member cname="G_FILE_TYPE_REGULAR" name="Regular" />
      <member cname="G_FILE_TYPE_DIRECTORY" name="Directory" />
      <member cname="G_FILE_TYPE_SYMBOLIC_LINK" name="SymbolicLink" />
      <member cname="G_FILE_TYPE_SPECIAL" name="Special" />
      <member cname="G_FILE_TYPE_SHORTCUT" name="Shortcut" />
      <member cname="G_FILE_TYPE_MOUNTABLE" name="Mountable" />
    </enum>
    <enum name="FilesystemPreviewType" cname="GFilesystemPreviewType" gtype="g_filesystem_preview_type_get_type" type="enum">
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS" name="IfAlways" />
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL" name="IfLocal" />
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_NEVER" name="Never" />
    </enum>
    <enum name="IOErrorEnum" cname="GIOErrorEnum" type="enum">
      <member cname="G_IO_ERROR_FAILED" name="Failed" />
      <member cname="G_IO_ERROR_NOT_FOUND" name="NotFound" />
      <member cname="G_IO_ERROR_EXISTS" name="Exists" />
      <member cname="G_IO_ERROR_IS_DIRECTORY" name="IsDirectory" />
      <member cname="G_IO_ERROR_NOT_DIRECTORY" name="NotDirectory" />
      <member cname="G_IO_ERROR_NOT_EMPTY" name="NotEmpty" />
      <member cname="G_IO_ERROR_NOT_REGULAR_FILE" name="NotRegularFile" />
      <member cname="G_IO_ERROR_NOT_SYMBOLIC_LINK" name="NotSymbolicLink" />
      <member cname="G_IO_ERROR_NOT_MOUNTABLE_FILE" name="NotMountableFile" />
      <member cname="G_IO_ERROR_FILENAME_TOO_LONG" name="FilenameTooLong" />
      <member cname="G_IO_ERROR_INVALID_FILENAME" name="InvalidFilename" />
      <member cname="G_IO_ERROR_TOO_MANY_LINKS" name="TooManyLinks" />
      <member cname="G_IO_ERROR_NO_SPACE" name="NoSpace" />
      <member cname="G_IO_ERROR_INVALID_ARGUMENT" name="InvalidArgument" />
      <member cname="G_IO_ERROR_PERMISSION_DENIED" name="PermissionDenied" />
      <member cname="G_IO_ERROR_NOT_SUPPORTED" name="NotSupported" />
      <member cname="G_IO_ERROR_NOT_MOUNTED" name="NotMounted" />
      <member cname="G_IO_ERROR_ALREADY_MOUNTED" name="AlreadyMounted" />
      <member cname="G_IO_ERROR_CLOSED" name="Closed" />
      <member cname="G_IO_ERROR_CANCELLED" name="Cancelled" />
      <member cname="G_IO_ERROR_PENDING" name="Pending" />
      <member cname="G_IO_ERROR_READ_ONLY" name="ReadOnly" />
      <member cname="G_IO_ERROR_CANT_CREATE_BACKUP" name="CantCreateBackup" />
      <member cname="G_IO_ERROR_WRONG_ETAG" name="WrongEtag" />
      <member cname="G_IO_ERROR_TIMED_OUT" name="TimedOut" />
      <member cname="G_IO_ERROR_WOULD_RECURSE" name="WouldRecurse" />
      <member cname="G_IO_ERROR_BUSY" name="Busy" />
      <member cname="G_IO_ERROR_WOULD_BLOCK" name="WouldBlock" />
      <member cname="G_IO_ERROR_HOST_NOT_FOUND" name="HostNotFound" />
      <member cname="G_IO_ERROR_WOULD_MERGE" name="WouldMerge" />
      <member cname="G_IO_ERROR_FAILED_HANDLED" name="FailedHandled" />
    </enum>
    <enum name="MountMountFlags" cname="GMountMountFlags" gtype="g_mount_mount_flags_get_type" type="enum">
      <member cname="G_MOUNT_MOUNT_NONE" name="None" />
    </enum>
    <enum name="MountOperationResult" cname="GMountOperationResult" gtype="g_mount_operation_result_get_type" type="enum">
      <member cname="G_MOUNT_OPERATION_HANDLED" name="Handled" />
      <member cname="G_MOUNT_OPERATION_ABORTED" name="Aborted" />
      <member cname="G_MOUNT_OPERATION_UNHANDLED" name="Unhandled" />
    </enum>
    <enum name="MountUnmountFlags" cname="GMountUnmountFlags" gtype="g_mount_unmount_flags_get_type" type="flags">
      <member cname="G_MOUNT_UNMOUNT_NONE" name="None" />
      <member cname="G_MOUNT_UNMOUNT_FORCE" name="Force" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="OutputStreamSpliceFlags" cname="GOutputStreamSpliceFlags" gtype="g_output_stream_splice_flags_get_type" type="flags">
      <member cname="G_OUTPUT_STREAM_SPLICE_NONE" name="None" />
      <member cname="G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE" name="CloseSource" value="1 &lt;&lt; 0" />
      <member cname="G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET" name="CloseTarget" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="PasswordSave" cname="GPasswordSave" gtype="g_password_save_get_type" type="enum">
      <member cname="G_PASSWORD_SAVE_NEVER" name="Never" />
      <member cname="G_PASSWORD_SAVE_FOR_SESSION" name="ForSession" />
      <member cname="G_PASSWORD_SAVE_PERMANENTLY" name="Permanently" />
    </enum>
    <callback name="AsyncReadyCallback" cname="GAsyncReadyCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GObject*" name="source_object" />
        <parameter type="GAsyncResult*" name="res" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="FileProgressCallback" cname="GFileProgressCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="goffset" name="current_num_bytes" />
        <parameter type="goffset" name="total_num_bytes" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="FileReadMoreCallback" cname="GFileReadMoreCallback">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="const-char*" name="file_contents" />
        <parameter type="goffset" name="file_size" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="IOSchedulerJobFunc" cname="GIOSchedulerJobFunc">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="GIOSchedulerJob*" name="job" />
        <parameter type="GCancellable*" name="cancellable" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="ReallocFunc" cname="GReallocFunc">
      <return-type type="gpointer" />
      <parameters>
        <parameter type="gpointer" name="data" />
        <parameter type="gsize" name="size" />
      </parameters>
    </callback>
    <callback name="SimpleAsyncThreadFunc" cname="GSimpleAsyncThreadFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="GSimpleAsyncResult*" name="res" />
        <parameter type="GObject*" name="object" />
        <parameter type="GCancellable*" name="cancellable" />
      </parameters>
    </callback>
    <interface name="AppInfo" cname="GAppInfo">
      <virtual_method name="Dup" cname="dup">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
        </parameters>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo1" />
          <parameter type="GAppInfo*" name="appinfo2" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
        </parameters>
      </virtual_method>
      <virtual_method name="Launch" cname="launch">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
          <parameter type="GList*" name="filenames" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SupportsUris" cname="supports_uris">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
        </parameters>
      </virtual_method>
      <virtual_method name="SupportsFiles" cname="supports_files">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
        </parameters>
      </virtual_method>
      <virtual_method name="LaunchUris" cname="launch_uris">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
          <parameter type="GList*" name="uris" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ShouldShow" cname="should_show">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAsDefaultForType" cname="set_as_default_for_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAsDefaultForExtension" cname="set_as_default_for_extension">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
          <parameter type="const-char*" name="extension" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="AddSupportsType" cname="add_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanRemoveSupportsType" cname="can_remove_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
        </parameters>
      </virtual_method>
      <virtual_method name="RemoveSupportsType" cname="remove_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo" />
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="AddSupportsType" cname="g_app_info_add_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CanRemoveSupportsType" cname="g_app_info_can_remove_supports_type">
        <return-type type="gboolean" />
      </method>
      <method name="CreateFromCommandline" cname="g_app_info_create_from_commandline" shared="true">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="const-char*" name="commandline" />
          <parameter type="const-char*" name="application_name" />
          <parameter type="GAppInfoCreateFlags" name="flags" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Dup" cname="g_app_info_dup">
        <return-type type="GAppInfo*" />
      </method>
      <method name="Equal" cname="g_app_info_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo2" />
        </parameters>
      </method>
      <method name="GetAll" cname="g_app_info_get_all" shared="true">
        <return-type type="GList*" />
      </method>
      <method name="GetAllForType" cname="g_app_info_get_all_for_type" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
        </parameters>
      </method>
      <method name="GetDefaultForType" cname="g_app_info_get_default_for_type" shared="true">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="gboolean" name="must_support_uris" />
        </parameters>
      </method>
      <method name="GetDefaultForUriScheme" cname="g_app_info_get_default_for_uri_scheme" shared="true">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </method>
      <method name="GetDescription" cname="g_app_info_get_description">
        <return-type type="const-char*" />
      </method>
      <method name="GetExecutable" cname="g_app_info_get_executable">
        <return-type type="const-char*" />
      </method>
      <method name="GetIcon" cname="g_app_info_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetId" cname="g_app_info_get_id">
        <return-type type="const-char*" />
      </method>
      <method name="GetName" cname="g_app_info_get_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetType" cname="g_app_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Launch" cname="g_app_info_launch">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GList*" name="files" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LaunchDefaultForUri" cname="g_app_info_launch_default_for_uri" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="uri" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LaunchUris" cname="g_app_info_launch_uris">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GList*" name="uris" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="RemoveSupportsType" cname="g_app_info_remove_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAsDefaultForExtension" cname="g_app_info_set_as_default_for_extension">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="extension" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAsDefaultForType" cname="g_app_info_set_as_default_for_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ShouldShow" cname="g_app_info_should_show">
        <return-type type="gboolean" />
      </method>
      <method name="SupportsFiles" cname="g_app_info_supports_files">
        <return-type type="gboolean" />
      </method>
      <method name="SupportsUris" cname="g_app_info_supports_uris">
        <return-type type="gboolean" />
      </method>
    </interface>
    <interface name="AsyncResult" cname="GAsyncResult">
      <virtual_method name="GetUserData" cname="get_user_data">
        <return-type type="gpointer" />
        <parameters>
          <parameter type="GAsyncResult*" name="async_result" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetSourceObject" cname="get_source_object">
        <return-type type="GObject*" />
        <parameters>
          <parameter type="GAsyncResult*" name="async_result" />
        </parameters>
      </virtual_method>
      <method name="GetSourceObject" cname="g_async_result_get_source_object">
        <return-type type="GObject*" />
      </method>
      <method name="GetType" cname="g_async_result_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUserData" cname="g_async_result_get_user_data">
        <return-type type="gpointer" />
      </method>
    </interface>
    <interface name="DesktopAppInfoLookup" cname="GDesktopAppInfoLookup">
      <virtual_method name="GetDefaultForUriScheme" cname="get_default_for_uri_scheme">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="GDesktopAppInfoLookup*" name="lookup" />
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </virtual_method>
      <method name="GetDefaultForUriScheme" cname="g_desktop_app_info_lookup_get_default_for_uri_scheme">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </method>
      <method name="GetType" cname="g_desktop_app_info_lookup_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </interface>
    <interface name="Drive" cname="GDrive">
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="Disconnected" cname="disconnected" when="LAST" field_name="disconnected">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="EjectButton" cname="eject-button" when="LAST" field_name="eject_button">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="char*" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="HasVolumes" cname="has_volumes">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetVolumes" cname="get_volumes">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="IsMediaRemovable" cname="is_media_removable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="HasMedia" cname="has_media">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="IsMediaCheckAutomatic" cname="is_media_check_automatic">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanPollForMedia" cname="can_poll_for_media">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <virtual_method name="Eject" cname="eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="PollForMedia" cname="poll_for_media">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="PollForMediaFinish" cname="poll_for_media_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIdentifier" cname="get_identifier">
        <return-type type="char*" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
          <parameter type="const-char*" name="kind" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateIdentifiers" cname="enumerate_identifiers">
        <return-type type="char**" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </virtual_method>
      <method name="CanEject" cname="g_drive_can_eject">
        <return-type type="gboolean" />
      </method>
      <method name="CanPollForMedia" cname="g_drive_can_poll_for_media">
        <return-type type="gboolean" />
      </method>
      <method name="Eject" cname="g_drive_eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_drive_eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EnumerateIdentifiers" cname="g_drive_enumerate_identifiers">
        <return-type type="char**" />
      </method>
      <method name="GetIcon" cname="g_drive_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetIdentifier" cname="g_drive_get_identifier">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="kind" />
        </parameters>
      </method>
      <method name="GetName" cname="g_drive_get_name">
        <return-type type="char*" />
      </method>
      <method name="GetType" cname="g_drive_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVolumes" cname="g_drive_get_volumes">
        <return-type type="GList*" />
      </method>
      <method name="HasMedia" cname="g_drive_has_media">
        <return-type type="gboolean" />
      </method>
      <method name="HasVolumes" cname="g_drive_has_volumes">
        <return-type type="gboolean" />
      </method>
      <method name="IsMediaCheckAutomatic" cname="g_drive_is_media_check_automatic">
        <return-type type="gboolean" />
      </method>
      <method name="IsMediaRemovable" cname="g_drive_is_media_removable">
        <return-type type="gboolean" />
      </method>
      <method name="PollForMedia" cname="g_drive_poll_for_media">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="PollForMediaFinish" cname="g_drive_poll_for_media_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="File" cname="GFile">
      <virtual_method name="Dup" cname="dup">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="Hash" cname="hash">
        <return-type type="guint" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file1" />
          <parameter type="GFile*" name="file2" />
        </parameters>
      </virtual_method>
      <virtual_method name="IsNative" cname="is_native">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="HasUriScheme" cname="has_uri_scheme">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetUriScheme" cname="get_uri_scheme">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetBasename" cname="get_basename">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetPath" cname="get_path">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetUri" cname="get_uri">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetParseName" cname="get_parse_name">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetParent" cname="get_parent">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="PrefixMatches" cname="prefix_matches">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="prefix" />
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetRelativePath" cname="get_relative_path">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="parent" />
          <parameter type="GFile*" name="descendant" />
        </parameters>
      </virtual_method>
      <virtual_method name="ResolveRelativePath" cname="resolve_relative_path">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="relative_path" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetChildForDisplayName" cname="get_child_for_display_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="display_name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildren" cname="enumerate_children">
        <return-type type="GFileEnumerator*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildrenAsync" cname="enumerate_children_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildrenFinish" cname="enumerate_children_finish">
        <return-type type="GFileEnumerator*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfo" cname="query_filesystem_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfoAsync" cname="query_filesystem_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfoFinish" cname="query_filesystem_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMount" cname="find_enclosing_mount">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMountAsync" cname="find_enclosing_mount_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMountFinish" cname="find_enclosing_mount_finish">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayName" cname="set_display_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="display_name" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayNameAsync" cname="set_display_name_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="display_name" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayNameFinish" cname="set_display_name_finish">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QuerySettableAttributes" cname="query_settable_attributes">
        <return-type type="GFileAttributeInfoList*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QuerySettableAttributesAsync" cname="_query_settable_attributes_async">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="QuerySettableAttributesFinish" cname="_query_settable_attributes_finish">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="QueryWritableNamespaces" cname="query_writable_namespaces">
        <return-type type="GFileAttributeInfoList*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryWritableNamespacesAsync" cname="_query_writable_namespaces_async">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="QueryWritableNamespacesFinish" cname="_query_writable_namespaces_finish">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="SetAttribute" cname="set_attribute">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeType" name="type" />
          <parameter type="gpointer" name="value_p" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesFromInfo" cname="set_attributes_from_info">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesAsync" cname="set_attributes_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesFinish" cname="set_attributes_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GFileInfo**" name="info" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFn" cname="read_fn">
        <return-type type="GFileInputStream*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadAsync" cname="read_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFinish" cname="read_finish">
        <return-type type="GFileInputStream*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="AppendTo" cname="append_to">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="AppendToAsync" cname="append_to_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="AppendToFinish" cname="append_to_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Create" cname="create">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CreateAsync" cname="create_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CreateFinish" cname="create_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Replace" cname="replace">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceAsync" cname="replace_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceFinish" cname="replace_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="DeleteFile" cname="delete_file">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="DeleteFileAsync" cname="_delete_file_async">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="DeleteFileFinish" cname="_delete_file_finish">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="Trash" cname="trash">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="TrashAsync" cname="_trash_async">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="TrashFinish" cname="_trash_finish">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MakeDirectory" cname="make_directory">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MakeDirectoryAsync" cname="_make_directory_async">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MakeDirectoryFinish" cname="_make_directory_finish">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MakeSymbolicLink" cname="make_symbolic_link">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="const-char*" name="symlink_value" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MakeSymbolicLinkAsync" cname="_make_symbolic_link_async">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MakeSymbolicLinkFinish" cname="_make_symbolic_link_finish">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="Copy" cname="copy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="source" />
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CopyAsync" cname="copy_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="source" />
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CopyFinish" cname="copy_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Move" cname="move">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="source" />
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MoveAsync" cname="_move_async">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MoveFinish" cname="_move_finish">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MountMountable" cname="mount_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountMountableFinish" cname="mount_mountable_finish">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountable" cname="unmount_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountableFinish" cname="unmount_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountable" cname="eject_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountableFinish" cname="eject_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountEnclosingVolume" cname="mount_enclosing_volume">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="location" />
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountEnclosingVolumeFinish" cname="mount_enclosing_volume_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="location" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MonitorDir" cname="monitor_dir">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MonitorFile" cname="monitor_file">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="AppendTo" cname="g_file_append_to">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AppendToAsync" cname="g_file_append_to_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="AppendToFinish" cname="g_file_append_to_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Copy" cname="g_file_copy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CopyAsync" cname="g_file_copy_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CopyAttributes" cname="g_file_copy_attributes">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CopyFinish" cname="g_file_copy_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Create" cname="g_file_create">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CreateAsync" cname="g_file_create_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CreateFinish" cname="g_file_create_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Delete" cname="g_file_delete">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Dup" cname="g_file_dup">
        <return-type type="GFile*" />
      </method>
      <method name="EjectMountable" cname="g_file_eject_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectMountableFinish" cname="g_file_eject_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EnumerateChildren" cname="g_file_enumerate_children">
        <return-type type="GFileEnumerator*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EnumerateChildrenAsync" cname="g_file_enumerate_children_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EnumerateChildrenFinish" cname="g_file_enumerate_children_finish">
        <return-type type="GFileEnumerator*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Equal" cname="g_file_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file2" />
        </parameters>
      </method>
      <method name="FindEnclosingMount" cname="g_file_find_enclosing_mount">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="FindEnclosingMountAsync" cname="g_file_find_enclosing_mount_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="FindEnclosingMountFinish" cname="g_file_find_enclosing_mount_finish">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetBasename" cname="g_file_get_basename">
        <return-type type="char*" />
      </method>
      <method name="GetChild" cname="g_file_get_child">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="GetChildForDisplayName" cname="g_file_get_child_for_display_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetParent" cname="g_file_get_parent">
        <return-type type="GFile*" />
      </method>
      <method name="GetParseName" cname="g_file_get_parse_name">
        <return-type type="char*" />
      </method>
      <method name="GetPath" cname="g_file_get_path">
        <return-type type="char*" />
      </method>
      <method name="GetRelativePath" cname="g_file_get_relative_path">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="descendant" />
        </parameters>
      </method>
      <method name="GetType" cname="g_file_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUri" cname="g_file_get_uri">
        <return-type type="char*" />
      </method>
      <method name="GetUriScheme" cname="g_file_get_uri_scheme">
        <return-type type="char*" />
      </method>
      <method name="HasPrefix" cname="g_file_has_prefix">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="prefix" />
        </parameters>
      </method>
      <method name="HasUriScheme" cname="g_file_has_uri_scheme">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </method>
      <method name="Hash" cname="g_file_hash" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="gconstpointer" name="file" />
        </parameters>
      </method>
      <method name="IsNative" cname="g_file_is_native">
        <return-type type="gboolean" />
      </method>
      <method name="LoadContents" cname="g_file_load_contents">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="char**" name="contents" />
          <parameter type="gsize*" name="length" />
          <parameter type="char**" name="etag_out" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadContentsAsync" cname="g_file_load_contents_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LoadContentsFinish" cname="g_file_load_contents_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="contents" />
          <parameter type="gsize*" name="length" />
          <parameter type="char**" name="etag_out" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadPartialContentsAsync" cname="g_file_load_partial_contents_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileReadMoreCallback" name="read_more_callback" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LoadPartialContentsFinish" cname="g_file_load_partial_contents_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="contents" />
          <parameter type="gsize*" name="length" />
          <parameter type="char**" name="etag_out" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MakeDirectory" cname="g_file_make_directory">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MakeDirectoryWithParents" cname="g_file_make_directory_with_parents">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MakeSymbolicLink" cname="g_file_make_symbolic_link">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="symlink_value" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Monitor" cname="g_file_monitor">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MountEnclosingVolume" cname="g_file_mount_enclosing_volume">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="MountEnclosingVolumeFinish" cname="g_file_mount_enclosing_volume_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MountMountable" cname="g_file_mount_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="MountMountableFinish" cname="g_file_mount_mountable_finish">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Move" cname="g_file_move">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="g_file_new_for_commandline_arg">
        <parameters>
          <parameter type="const-char*" name="arg" />
        </parameters>
      </constructor>
      <constructor cname="g_file_new_for_path">
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </constructor>
      <constructor cname="g_file_new_for_uri">
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </constructor>
      <method name="ParseName" cname="g_file_parse_name" shared="true">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="parse_name" />
        </parameters>
      </method>
      <method name="QueryDefaultHandler" cname="g_file_query_default_handler">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryExists" cname="g_file_query_exists">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="QueryFileType" cname="g_file_query_file_type">
        <return-type type="GFileType" />
        <parameters>
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="QueryFilesystemInfo" cname="g_file_query_filesystem_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryFilesystemInfoAsync" cname="g_file_query_filesystem_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryFilesystemInfoFinish" cname="g_file_query_filesystem_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfo" cname="g_file_query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QuerySettableAttributes" cname="g_file_query_settable_attributes">
        <return-type type="GFileAttributeInfoList*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryWritableNamespaces" cname="g_file_query_writable_namespaces">
        <return-type type="GFileAttributeInfoList*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Read" cname="g_file_read">
        <return-type type="GFileInputStream*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadAsync" cname="g_file_read_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReadFinish" cname="g_file_read_finish">
        <return-type type="GFileInputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Replace" cname="g_file_replace">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReplaceAsync" cname="g_file_replace_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReplaceContents" cname="g_file_replace_contents">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="contents" />
          <parameter type="gsize" name="length" />
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="char**" name="new_etag" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReplaceContentsAsync" cname="g_file_replace_contents_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="contents" />
          <parameter type="gsize" name="length" />
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReplaceContentsFinish" cname="g_file_replace_contents_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="new_etag" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReplaceFinish" cname="g_file_replace_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ResolveRelativePath" cname="g_file_resolve_relative_path">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="relative_path" />
        </parameters>
      </method>
      <method name="SetAttribute" cname="g_file_set_attribute">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeType" name="type" />
          <parameter type="gpointer" name="value_p" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeByteString" cname="g_file_set_attribute_byte_string">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="const-char*" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeInt32" cname="g_file_set_attribute_int32">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gint32" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeInt64" cname="g_file_set_attribute_int64">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gint64" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeString" cname="g_file_set_attribute_string">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="const-char*" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeUint32" cname="g_file_set_attribute_uint32">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="guint32" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeUint64" cname="g_file_set_attribute_uint64">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="guint64" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributesAsync" cname="g_file_set_attributes_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SetAttributesFinish" cname="g_file_set_attributes_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GFileInfo**" name="info" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributesFromInfo" cname="g_file_set_attributes_from_info">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetDisplayName" cname="g_file_set_display_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetDisplayNameAsync" cname="g_file_set_display_name_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SetDisplayNameFinish" cname="g_file_set_display_name_finish">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Trash" cname="g_file_trash">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="UnmountMountable" cname="g_file_unmount_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="UnmountMountableFinish" cname="g_file_unmount_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="Icon" cname="GIcon">
      <virtual_method name="Hash" cname="hash">
        <return-type type="guint" />
        <parameters>
          <parameter type="GIcon*" name="icon" />
        </parameters>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GIcon*" name="icon1" />
          <parameter type="GIcon*" name="icon2" />
        </parameters>
      </virtual_method>
      <method name="Equal" cname="g_icon_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GIcon*" name="icon2" />
        </parameters>
      </method>
      <method name="GetType" cname="g_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Hash" cname="g_icon_hash" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="gconstpointer" name="icon" />
        </parameters>
      </method>
    </interface>
    <interface name="LoadableIcon" cname="GLoadableIcon">
      <virtual_method name="Load" cname="load">
        <return-type type="GInputStream*" />
        <parameters>
          <parameter type="GLoadableIcon*" name="icon" />
          <parameter type="int" name="size" />
          <parameter type="char**" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LoadAsync" cname="load_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GLoadableIcon*" name="icon" />
          <parameter type="int" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="LoadFinish" cname="load_finish">
        <return-type type="GInputStream*" />
        <parameters>
          <parameter type="GLoadableIcon*" name="icon" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_loadable_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Load" cname="g_loadable_icon_load">
        <return-type type="GInputStream*" />
        <parameters>
          <parameter type="int" name="size" />
          <parameter type="char**" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadAsync" cname="g_loadable_icon_load_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LoadFinish" cname="g_loadable_icon_load_finish">
        <return-type type="GInputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="Mount" cname="GMount">
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="Unmounted" cname="unmounted" when="LAST" field_name="unmounted">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <virtual_method name="GetRoot" cname="get_root">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="char*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetUuid" cname="get_uuid">
        <return-type type="char*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetVolume" cname="get_volume">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetDrive" cname="get_drive">
        <return-type type="GDrive*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanUnmount" cname="can_unmount">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </virtual_method>
      <virtual_method name="Unmount" cname="unmount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountFinish" cname="unmount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Eject" cname="eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Remount" cname="remount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="RemountFinish" cname="remount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GuessContentType" cname="guess_content_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="gboolean" name="force_rescan" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="GuessContentTypeFinish" cname="guess_content_type_finish">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GuessContentTypeSync" cname="guess_content_type_sync">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="gboolean" name="force_rescan" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="CanEject" cname="g_mount_can_eject">
        <return-type type="gboolean" />
      </method>
      <method name="CanUnmount" cname="g_mount_can_unmount">
        <return-type type="gboolean" />
      </method>
      <method name="Eject" cname="g_mount_eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_mount_eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetDrive" cname="g_mount_get_drive">
        <return-type type="GDrive*" />
      </method>
      <method name="GetIcon" cname="g_mount_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetName" cname="g_mount_get_name">
        <return-type type="char*" />
      </method>
      <method name="GetRoot" cname="g_mount_get_root">
        <return-type type="GFile*" />
      </method>
      <method name="GetType" cname="g_mount_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUuid" cname="g_mount_get_uuid">
        <return-type type="char*" />
      </method>
      <method name="GetVolume" cname="g_mount_get_volume">
        <return-type type="GVolume*" />
      </method>
      <method name="GuessContentType" cname="g_mount_guess_content_type">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="force_rescan" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="GuessContentTypeFinish" cname="g_mount_guess_content_type_finish">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GuessContentTypeSync" cname="g_mount_guess_content_type_sync">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="gboolean" name="force_rescan" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Remount" cname="g_mount_remount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="RemountFinish" cname="g_mount_remount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Unmount" cname="g_mount_unmount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="UnmountFinish" cname="g_mount_unmount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="Seekable" cname="GSeekable">
      <virtual_method name="Tell" cname="tell">
        <return-type type="goffset" />
        <parameters>
          <parameter type="GSeekable*" name="seekable" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSeekable*" name="seekable" />
        </parameters>
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSeekable*" name="seekable" />
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanTruncate" cname="can_truncate">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSeekable*" name="seekable" />
        </parameters>
      </virtual_method>
      <virtual_method name="TruncateFn" cname="truncate_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSeekable*" name="seekable" />
          <parameter type="goffset" name="offset" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="CanSeek" cname="g_seekable_can_seek">
        <return-type type="gboolean" />
      </method>
      <method name="CanTruncate" cname="g_seekable_can_truncate">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_seekable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Seek" cname="g_seekable_seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Tell" cname="g_seekable_tell">
        <return-type type="goffset" />
      </method>
      <method name="Truncate" cname="g_seekable_truncate">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="Volume" cname="GVolume">
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="Removed" cname="removed" when="LAST" field_name="removed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </signal>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="char*" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetUuid" cname="get_uuid">
        <return-type type="char*" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetDrive" cname="get_drive">
        <return-type type="GDrive*" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetMount" cname="get_mount">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanMount" cname="can_mount">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountFn" cname="mount_fn">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountFinish" cname="mount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Eject" cname="eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIdentifier" cname="get_identifier">
        <return-type type="char*" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
          <parameter type="const-char*" name="kind" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateIdentifiers" cname="enumerate_identifiers">
        <return-type type="char**" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="ShouldAutomount" cname="should_automount">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetActivationRoot" cname="get_activation_root">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </virtual_method>
      <method name="CanEject" cname="g_volume_can_eject">
        <return-type type="gboolean" />
      </method>
      <method name="CanMount" cname="g_volume_can_mount">
        <return-type type="gboolean" />
      </method>
      <method name="Eject" cname="g_volume_eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_volume_eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EnumerateIdentifiers" cname="g_volume_enumerate_identifiers">
        <return-type type="char**" />
      </method>
      <method name="GetActivationRoot" cname="g_volume_get_activation_root">
        <return-type type="GFile*" />
      </method>
      <method name="GetDrive" cname="g_volume_get_drive">
        <return-type type="GDrive*" />
      </method>
      <method name="GetIcon" cname="g_volume_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetIdentifier" cname="g_volume_get_identifier">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="kind" />
        </parameters>
      </method>
      <method name="GetMount" cname="g_volume_get_mount">
        <return-type type="GMount*" />
      </method>
      <method name="GetName" cname="g_volume_get_name">
        <return-type type="char*" />
      </method>
      <method name="GetType" cname="g_volume_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUuid" cname="g_volume_get_uuid">
        <return-type type="char*" />
      </method>
      <method name="Mount" cname="g_volume_mount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="MountFinish" cname="g_volume_mount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ShouldAutomount" cname="g_volume_should_automount">
        <return-type type="gboolean" />
      </method>
    </interface>
    <object name="IOModule" cname="GIOModule" parent="GTypeModule">
      <method name="GetType" cname="g_io_module_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Load" cname="g_io_module_load">
        <return-type type="void" />
      </method>
      <constructor cname="g_io_module_new">
        <parameters>
          <parameter type="const-gchar*" name="filename" />
        </parameters>
      </constructor>
      <method name="Unload" cname="g_io_module_unload">
        <return-type type="void" />
      </method>
    </object>
    <object name="AppLaunchContext" cname="GAppLaunchContext" parent="GObject">
      <field name="Priv" cname="priv" type="GAppLaunchContextPrivate*" />
      <virtual_method name="GetDisplay" cname="get_display">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAppLaunchContext*" name="context" />
          <parameter type="GAppInfo*" name="info" />
          <parameter type="GList*" name="files" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetStartupNotifyId" cname="get_startup_notify_id">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAppLaunchContext*" name="context" />
          <parameter type="GAppInfo*" name="info" />
          <parameter type="GList*" name="files" />
        </parameters>
      </virtual_method>
      <virtual_method name="LaunchFailed" cname="launch_failed">
        <return-type type="void" />
        <parameters>
          <parameter type="GAppLaunchContext*" name="context" />
          <parameter type="const-char*" name="startup_notify_id" />
        </parameters>
      </virtual_method>
      <method name="GetDisplay" cname="g_app_launch_context_get_display">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAppInfo*" name="info" />
          <parameter type="GList*" name="files" />
        </parameters>
      </method>
      <method name="GetStartupNotifyId" cname="g_app_launch_context_get_startup_notify_id">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAppInfo*" name="info" />
          <parameter type="GList*" name="files" />
        </parameters>
      </method>
      <method name="GetType" cname="g_app_launch_context_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LaunchFailed" cname="g_app_launch_context_launch_failed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="startup_notify_id" />
        </parameters>
      </method>
      <constructor cname="g_app_launch_context_new" />
    </object>
    <object name="BufferedInputStream" cname="GBufferedInputStream" parent="GFilterInputStream">
      <field name="Priv" cname="priv" type="GBufferedInputStreamPrivate*" />
      <property name="BufferSize" cname="buffer-size" type="guint" readable="true" writeable="true" construct="true" />
      <virtual_method name="Fill" cname="fill">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GBufferedInputStream*" name="stream" />
          <parameter type="gssize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="FillAsync" cname="fill_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GBufferedInputStream*" name="stream" />
          <parameter type="gssize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="FillFinish" cname="fill_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GBufferedInputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="Fill" cname="g_buffered_input_stream_fill">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gssize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="FillAsync" cname="g_buffered_input_stream_fill_async">
        <return-type type="void" />
        <parameters>
          <parameter type="gssize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="FillFinish" cname="g_buffered_input_stream_fill_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetAvailable" cname="g_buffered_input_stream_get_available">
        <return-type type="gsize" />
      </method>
      <method name="GetBufferSize" cname="g_buffered_input_stream_get_buffer_size">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_buffered_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_buffered_input_stream_new">
        <parameters>
          <parameter type="GInputStream*" name="base_stream" />
        </parameters>
      </constructor>
      <constructor cname="g_buffered_input_stream_new_sized">
        <parameters>
          <parameter type="GInputStream*" name="base_stream" />
          <parameter type="gsize" name="size" />
        </parameters>
      </constructor>
      <method name="Peek" cname="g_buffered_input_stream_peek">
        <return-type type="gsize" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="offset" />
          <parameter type="gsize" name="count" />
        </parameters>
      </method>
      <method name="PeekBuffer" cname="g_buffered_input_stream_peek_buffer">
        <return-type type="const-void*" />
        <parameters>
          <parameter type="gsize*" name="count" />
        </parameters>
      </method>
      <method name="ReadByte" cname="g_buffered_input_stream_read_byte">
        <return-type type="int" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetBufferSize" cname="g_buffered_input_stream_set_buffer_size">
        <return-type type="void" />
        <parameters>
          <parameter type="gsize" name="size" />
        </parameters>
      </method>
    </object>
    <object name="BufferedOutputStream" cname="GBufferedOutputStream" parent="GFilterOutputStream">
      <field name="Priv" cname="priv" type="GBufferedOutputStreamPrivate*" />
      <property name="BufferSize" cname="buffer-size" type="guint" readable="true" writeable="true" construct="true" />
      <property name="AutoGrow" cname="auto-grow" type="gboolean" readable="true" writeable="true" />
      <method name="GetAutoGrow" cname="g_buffered_output_stream_get_auto_grow">
        <return-type type="gboolean" />
      </method>
      <method name="GetBufferSize" cname="g_buffered_output_stream_get_buffer_size">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_buffered_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_buffered_output_stream_new">
        <parameters>
          <parameter type="GOutputStream*" name="base_stream" />
        </parameters>
      </constructor>
      <constructor cname="g_buffered_output_stream_new_sized">
        <parameters>
          <parameter type="GOutputStream*" name="base_stream" />
          <parameter type="gsize" name="size" />
        </parameters>
      </constructor>
      <method name="SetAutoGrow" cname="g_buffered_output_stream_set_auto_grow">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="auto_grow" />
        </parameters>
      </method>
      <method name="SetBufferSize" cname="g_buffered_output_stream_set_buffer_size">
        <return-type type="void" />
        <parameters>
          <parameter type="gsize" name="size" />
        </parameters>
      </method>
    </object>
    <object name="Cancellable" cname="GCancellable" parent="GObject">
      <signal name="Cancelled" cname="cancelled" when="LAST" field_name="cancelled">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </signal>
      <method name="Cancel" cname="g_cancellable_cancel">
        <return-type type="void" />
      </method>
      <method name="GetCurrent" cname="g_cancellable_get_current" shared="true">
        <return-type type="GCancellable*" />
      </method>
      <method name="GetFd" cname="g_cancellable_get_fd">
        <return-type type="int" />
      </method>
      <method name="GetType" cname="g_cancellable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsCancelled" cname="g_cancellable_is_cancelled">
        <return-type type="gboolean" />
      </method>
      <constructor cname="g_cancellable_new" />
      <method name="PopCurrent" cname="g_cancellable_pop_current">
        <return-type type="void" />
      </method>
      <method name="PushCurrent" cname="g_cancellable_push_current">
        <return-type type="void" />
      </method>
      <method name="Reset" cname="g_cancellable_reset">
        <return-type type="void" />
      </method>
      <method name="SetErrorIfCancelled" cname="g_cancellable_set_error_if_cancelled">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="DataInputStream" cname="GDataInputStream" parent="GBufferedInputStream">
      <field name="Priv" cname="priv" type="GDataInputStreamPrivate*" />
      <property name="ByteOrder" cname="byte-order" type="GDataStreamByteOrder" readable="true" writeable="true" />
      <property name="NewlineType" cname="newline-type" type="GDataStreamNewlineType" readable="true" writeable="true" />
      <method name="GetByteOrder" cname="g_data_input_stream_get_byte_order">
        <return-type type="GDataStreamByteOrder" />
      </method>
      <method name="GetNewlineType" cname="g_data_input_stream_get_newline_type">
        <return-type type="GDataStreamNewlineType" />
      </method>
      <method name="GetType" cname="g_data_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_data_input_stream_new">
        <parameters>
          <parameter type="GInputStream*" name="base_stream" />
        </parameters>
      </constructor>
      <method name="ReadByte" cname="g_data_input_stream_read_byte">
        <return-type type="guchar" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadInt16" cname="g_data_input_stream_read_int16">
        <return-type type="gint16" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadInt32" cname="g_data_input_stream_read_int32">
        <return-type type="gint32" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadInt64" cname="g_data_input_stream_read_int64">
        <return-type type="gint64" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadLine" cname="g_data_input_stream_read_line">
        <return-type type="char*" />
        <parameters>
          <parameter type="gsize*" name="length" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUint16" cname="g_data_input_stream_read_uint16">
        <return-type type="guint16" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUint32" cname="g_data_input_stream_read_uint32">
        <return-type type="guint32" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUint64" cname="g_data_input_stream_read_uint64">
        <return-type type="guint64" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUntil" cname="g_data_input_stream_read_until">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-gchar*" name="stop_chars" />
          <parameter type="gsize*" name="length" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetByteOrder" cname="g_data_input_stream_set_byte_order">
        <return-type type="void" />
        <parameters>
          <parameter type="GDataStreamByteOrder" name="order" />
        </parameters>
      </method>
      <method name="SetNewlineType" cname="g_data_input_stream_set_newline_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GDataStreamNewlineType" name="type" />
        </parameters>
      </method>
    </object>
    <object name="DataOutputStream" cname="GDataOutputStream" parent="GFilterOutputStream">
      <field name="Priv" cname="priv" type="GDataOutputStreamPrivate*" />
      <property name="ByteOrder" cname="byte-order" type="GDataStreamByteOrder" readable="true" writeable="true" />
      <method name="GetByteOrder" cname="g_data_output_stream_get_byte_order">
        <return-type type="GDataStreamByteOrder" />
      </method>
      <method name="GetType" cname="g_data_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_data_output_stream_new">
        <parameters>
          <parameter type="GOutputStream*" name="base_stream" />
        </parameters>
      </constructor>
      <method name="PutByte" cname="g_data_output_stream_put_byte">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guchar" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutInt16" cname="g_data_output_stream_put_int16">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint16" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutInt32" cname="g_data_output_stream_put_int32">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint32" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutInt64" cname="g_data_output_stream_put_int64">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint64" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutString" cname="g_data_output_stream_put_string">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="str" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutUint16" cname="g_data_output_stream_put_uint16">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint16" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutUint32" cname="g_data_output_stream_put_uint32">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint32" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutUint64" cname="g_data_output_stream_put_uint64">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint64" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetByteOrder" cname="g_data_output_stream_set_byte_order">
        <return-type type="void" />
        <parameters>
          <parameter type="GDataStreamByteOrder" name="order" />
        </parameters>
      </method>
    </object>
    <object name="DesktopAppInfo" cname="GDesktopAppInfo" parent="GObject">
      <implements>
        <interface cname="GAppInfo" />
      </implements>
      <method name="GetIsHidden" cname="g_desktop_app_info_get_is_hidden">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_desktop_app_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_desktop_app_info_new">
        <parameters>
          <parameter type="const-char*" name="desktop_id" />
        </parameters>
      </constructor>
      <constructor cname="g_desktop_app_info_new_from_filename">
        <parameters>
          <parameter type="const-char*" name="filename" />
        </parameters>
      </constructor>
      <constructor cname="g_desktop_app_info_new_from_keyfile">
        <parameters>
          <parameter type="GKeyFile*" name="key_file" />
        </parameters>
      </constructor>
      <method name="SetDesktopEnv" cname="g_desktop_app_info_set_desktop_env" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="desktop_env" />
        </parameters>
      </method>
    </object>
    <object name="Emblem" cname="GEmblem" parent="GObject">
      <property name="Origin" cname="origin" type="GEmblemOrigin" readable="true" writeable="true" construct-only="true" />
      <property name="Icon" cname="icon" type="GObject" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GIcon" />
      </implements>
      <method name="GetIcon" cname="g_emblem_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetOrigin" cname="g_emblem_get_origin">
        <return-type type="GEmblemOrigin" />
      </method>
      <method name="GetType" cname="g_emblem_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_emblem_new">
        <parameters>
          <parameter type="GIcon*" name="icon" />
        </parameters>
      </constructor>
      <constructor cname="g_emblem_new_with_origin">
        <parameters>
          <parameter type="GIcon*" name="icon" />
          <parameter type="GEmblemOrigin" name="origin" />
        </parameters>
      </constructor>
    </object>
    <object name="EmblemedIcon" cname="GEmblemedIcon" parent="GObject">
      <implements>
        <interface cname="GIcon" />
      </implements>
      <method name="AddEmblem" cname="g_emblemed_icon_add_emblem">
        <return-type type="void" />
        <parameters>
          <parameter type="GEmblem*" name="emblem" />
        </parameters>
      </method>
      <method name="GetEmblems" cname="g_emblemed_icon_get_emblems">
        <return-type type="GList*" />
      </method>
      <method name="GetIcon" cname="g_emblemed_icon_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetType" cname="g_emblemed_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_emblemed_icon_new">
        <parameters>
          <parameter type="GIcon*" name="icon" />
          <parameter type="GEmblem*" name="emblem" />
        </parameters>
      </constructor>
    </object>
    <object name="FilenameCompleter" cname="GFilenameCompleter" parent="GObject">
      <signal name="GotCompletionData" cname="got-completion-data" when="LAST" field_name="got_completion_data">
        <return-type type="void" />
        <parameters>
          <parameter type="GFilenameCompleter*" name="filename_completer" />
        </parameters>
      </signal>
      <method name="GetCompletionSuffix" cname="g_filename_completer_get_completion_suffix">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="initial_text" />
        </parameters>
      </method>
      <method name="GetCompletions" cname="g_filename_completer_get_completions">
        <return-type type="char**" />
        <parameters>
          <parameter type="const-char*" name="initial_text" />
        </parameters>
      </method>
      <method name="GetType" cname="g_filename_completer_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_filename_completer_new" />
      <method name="SetDirsOnly" cname="g_filename_completer_set_dirs_only">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="dirs_only" />
        </parameters>
      </method>
    </object>
    <object name="FileEnumerator" cname="GFileEnumerator" parent="GObject">
      <field name="Priv" cname="priv" type="GFileEnumeratorPrivate*" />
      <property name="Container" cname="container" type="GFile" writeable="true" construct-only="true" />
      <virtual_method name="NextFile" cname="next_file">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFileEnumerator*" name="enumerator" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileEnumerator*" name="enumerator" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="NextFilesAsync" cname="next_files_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileEnumerator*" name="enumerator" />
          <parameter type="int" name="num_files" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="NextFilesFinish" cname="next_files_finish">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GFileEnumerator*" name="enumerator" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileEnumerator*" name="enumerator" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileEnumerator*" name="enumerator" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="Close" cname="g_file_enumerator_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_file_enumerator_close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_file_enumerator_close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetContainer" cname="g_file_enumerator_get_container">
        <return-type type="GFile*" />
      </method>
      <method name="GetType" cname="g_file_enumerator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasPending" cname="g_file_enumerator_has_pending">
        <return-type type="gboolean" />
      </method>
      <method name="IsClosed" cname="g_file_enumerator_is_closed">
        <return-type type="gboolean" />
      </method>
      <method name="NextFile" cname="g_file_enumerator_next_file">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="NextFilesAsync" cname="g_file_enumerator_next_files_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="num_files" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="NextFilesFinish" cname="g_file_enumerator_next_files_finish">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetPending" cname="g_file_enumerator_set_pending">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="pending" />
        </parameters>
      </method>
    </object>
    <object name="FileIcon" cname="GFileIcon" parent="GObject">
      <property name="File" cname="file" type="GFile" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GIcon" />
        <interface cname="GLoadableIcon" />
      </implements>
      <method name="GetFile" cname="g_file_icon_get_file">
        <return-type type="GFile*" />
      </method>
      <method name="GetType" cname="g_file_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_file_icon_new">
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </constructor>
    </object>
    <object name="FileInfo" cname="GFileInfo" parent="GObject">
      <method name="ClearStatus" cname="g_file_info_clear_status">
        <return-type type="void" />
      </method>
      <method name="CopyInto" cname="g_file_info_copy_into">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileInfo*" name="dest_info" />
        </parameters>
      </method>
      <method name="Dup" cname="g_file_info_dup">
        <return-type type="GFileInfo*" />
      </method>
      <method name="GetAttributeAsString" cname="g_file_info_get_attribute_as_string">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeBoolean" cname="g_file_info_get_attribute_boolean">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeByteString" cname="g_file_info_get_attribute_byte_string">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeData" cname="g_file_info_get_attribute_data">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeType*" name="type" />
          <parameter type="gpointer*" name="value_pp" />
          <parameter type="GFileAttributeStatus*" name="status" />
        </parameters>
      </method>
      <method name="GetAttributeInt32" cname="g_file_info_get_attribute_int32">
        <return-type type="gint32" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeInt64" cname="g_file_info_get_attribute_int64">
        <return-type type="gint64" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeObject" cname="g_file_info_get_attribute_object">
        <return-type type="GObject*" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeStatus" cname="g_file_info_get_attribute_status">
        <return-type type="GFileAttributeStatus" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeString" cname="g_file_info_get_attribute_string">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeType" cname="g_file_info_get_attribute_type">
        <return-type type="GFileAttributeType" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeUint32" cname="g_file_info_get_attribute_uint32">
        <return-type type="guint32" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeUint64" cname="g_file_info_get_attribute_uint64">
        <return-type type="guint64" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetContentType" cname="g_file_info_get_content_type">
        <return-type type="const-char*" />
      </method>
      <method name="GetDisplayName" cname="g_file_info_get_display_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetEditName" cname="g_file_info_get_edit_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetEtag" cname="g_file_info_get_etag">
        <return-type type="const-char*" />
      </method>
      <method name="GetFileType" cname="g_file_info_get_file_type">
        <return-type type="GFileType" />
      </method>
      <method name="GetIcon" cname="g_file_info_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetIsBackup" cname="g_file_info_get_is_backup">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsHidden" cname="g_file_info_get_is_hidden">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsSymlink" cname="g_file_info_get_is_symlink">
        <return-type type="gboolean" />
      </method>
      <method name="GetModificationTime" cname="g_file_info_get_modification_time">
        <return-type type="void" />
        <parameters>
          <parameter type="GTimeVal*" name="result" />
        </parameters>
      </method>
      <method name="GetName" cname="g_file_info_get_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetSize" cname="g_file_info_get_size">
        <return-type type="goffset" />
      </method>
      <method name="GetSortOrder" cname="g_file_info_get_sort_order">
        <return-type type="gint32" />
      </method>
      <method name="GetSymlinkTarget" cname="g_file_info_get_symlink_target">
        <return-type type="const-char*" />
      </method>
      <method name="GetType" cname="g_file_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasAttribute" cname="g_file_info_has_attribute">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="ListAttributes" cname="g_file_info_list_attributes">
        <return-type type="char**" />
        <parameters>
          <parameter type="const-char*" name="name_space" />
        </parameters>
      </method>
      <constructor cname="g_file_info_new" />
      <method name="RemoveAttribute" cname="g_file_info_remove_attribute">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="SetAttribute" cname="g_file_info_set_attribute">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeType" name="type" />
          <parameter type="gpointer" name="value_p" />
        </parameters>
      </method>
      <method name="SetAttributeBoolean" cname="g_file_info_set_attribute_boolean">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gboolean" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeByteString" cname="g_file_info_set_attribute_byte_string">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="const-char*" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeInt32" cname="g_file_info_set_attribute_int32">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gint32" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeInt64" cname="g_file_info_set_attribute_int64">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gint64" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeMask" cname="g_file_info_set_attribute_mask">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileAttributeMatcher*" name="mask" />
        </parameters>
      </method>
      <method name="SetAttributeObject" cname="g_file_info_set_attribute_object">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GObject*" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeString" cname="g_file_info_set_attribute_string">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="const-char*" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeUint32" cname="g_file_info_set_attribute_uint32">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="guint32" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeUint64" cname="g_file_info_set_attribute_uint64">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="guint64" name="attr_value" />
        </parameters>
      </method>
      <method name="SetContentType" cname="g_file_info_set_content_type">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
        </parameters>
      </method>
      <method name="SetDisplayName" cname="g_file_info_set_display_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
        </parameters>
      </method>
      <method name="SetEditName" cname="g_file_info_set_edit_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="edit_name" />
        </parameters>
      </method>
      <method name="SetFileType" cname="g_file_info_set_file_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileType" name="type" />
        </parameters>
      </method>
      <method name="SetIcon" cname="g_file_info_set_icon">
        <return-type type="void" />
        <parameters>
          <parameter type="GIcon*" name="icon" />
        </parameters>
      </method>
      <method name="SetIsHidden" cname="g_file_info_set_is_hidden">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="is_hidden" />
        </parameters>
      </method>
      <method name="SetIsSymlink" cname="g_file_info_set_is_symlink">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="is_symlink" />
        </parameters>
      </method>
      <method name="SetModificationTime" cname="g_file_info_set_modification_time">
        <return-type type="void" />
        <parameters>
          <parameter type="GTimeVal*" name="mtime" />
        </parameters>
      </method>
      <method name="SetName" cname="g_file_info_set_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="SetSize" cname="g_file_info_set_size">
        <return-type type="void" />
        <parameters>
          <parameter type="goffset" name="size" />
        </parameters>
      </method>
      <method name="SetSortOrder" cname="g_file_info_set_sort_order">
        <return-type type="void" />
        <parameters>
          <parameter type="gint32" name="sort_order" />
        </parameters>
      </method>
      <method name="SetSymlinkTarget" cname="g_file_info_set_symlink_target">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="symlink_target" />
        </parameters>
      </method>
      <method name="UnsetAttributeMask" cname="g_file_info_unset_attribute_mask">
        <return-type type="void" />
      </method>
    </object>
    <object name="FileInputStream" cname="GFileInputStream" parent="GInputStream">
      <field name="Priv" cname="priv" type="GFileInputStreamPrivate*" />
      <virtual_method name="Tell" cname="tell">
        <return-type type="goffset" />
        <parameters>
          <parameter type="GFileInputStream*" name="stream" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileInputStream*" name="stream" />
        </parameters>
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileInputStream*" name="stream" />
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFileInputStream*" name="stream" />
          <parameter type="char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileInputStream*" name="stream" />
          <parameter type="char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFileInputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="GetType" cname="g_file_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="QueryInfo" cname="g_file_input_stream_query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_input_stream_query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_input_stream_query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="FileMonitor" cname="GFileMonitor" parent="GObject">
      <field name="Priv" cname="priv" type="GFileMonitorPrivate*" />
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileMonitor*" name="monitor" />
          <parameter type="GFile*" name="file" />
          <parameter type="GFile*" name="other_file" />
          <parameter type="GFileMonitorEvent" name="event_type" />
        </parameters>
      </signal>
      <virtual_method name="Cancel" cname="cancel">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileMonitor*" name="monitor" />
        </parameters>
      </virtual_method>
      <property name="RateLimit" cname="rate-limit" type="gint" readable="true" writeable="true" />
      <property name="Cancelled" cname="cancelled" type="gboolean" readable="true" />
      <method name="Cancel" cname="g_file_monitor_cancel">
        <return-type type="gboolean" />
      </method>
      <method name="Directory" cname="g_file_monitor_directory" shared="true">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EmitEvent" cname="g_file_monitor_emit_event">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="child" />
          <parameter type="GFile*" name="other_file" />
          <parameter type="GFileMonitorEvent" name="event_type" />
        </parameters>
      </method>
      <method name="File" cname="g_file_monitor_file" shared="true">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="g_file_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsCancelled" cname="g_file_monitor_is_cancelled">
        <return-type type="gboolean" />
      </method>
      <method name="SetRateLimit" cname="g_file_monitor_set_rate_limit">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="limit_msecs" />
        </parameters>
      </method>
    </object>
    <object name="FileOutputStream" cname="GFileOutputStream" parent="GOutputStream">
      <field name="Priv" cname="priv" type="GFileOutputStreamPrivate*" />
      <virtual_method name="Tell" cname="tell">
        <return-type type="goffset" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
        </parameters>
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanTruncate" cname="can_truncate">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
        </parameters>
      </virtual_method>
      <virtual_method name="TruncateFn" cname="truncate_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
          <parameter type="goffset" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
          <parameter type="char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
          <parameter type="char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetEtag" cname="get_etag">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFileOutputStream*" name="stream" />
        </parameters>
      </virtual_method>
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="GetEtag" cname="g_file_output_stream_get_etag">
        <return-type type="char*" />
      </method>
      <method name="GetType" cname="g_file_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="QueryInfo" cname="g_file_output_stream_query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_output_stream_query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_output_stream_query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="FilterInputStream" cname="GFilterInputStream" parent="GInputStream">
      <field name="BaseStream" cname="base_stream" type="GInputStream*" />
      <property name="BaseStream" cname="base-stream" type="GInputStream" readable="true" writeable="true" construct-only="true" />
      <method name="GetBaseStream" cname="g_filter_input_stream_get_base_stream">
        <return-type type="GInputStream*" />
      </method>
      <method name="GetType" cname="g_filter_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="FilterOutputStream" cname="GFilterOutputStream" parent="GOutputStream">
      <field name="BaseStream" cname="base_stream" type="GOutputStream*" />
      <property name="BaseStream" cname="base-stream" type="GOutputStream" readable="true" writeable="true" construct-only="true" />
      <method name="GetBaseStream" cname="g_filter_output_stream_get_base_stream">
        <return-type type="GOutputStream*" />
      </method>
      <method name="GetType" cname="g_filter_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="InputStream" cname="GInputStream" parent="GObject">
      <field name="Priv" cname="priv" type="GInputStreamPrivate*" />
      <virtual_method name="ReadFn" cname="read_fn">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Skip" cname="skip">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadAsync" cname="read_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFinish" cname="read_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SkipAsync" cname="skip_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="SkipFinish" cname="skip_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="ClearPending" cname="g_input_stream_clear_pending">
        <return-type type="void" />
      </method>
      <method name="Close" cname="g_input_stream_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_input_stream_close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_input_stream_close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="g_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasPending" cname="g_input_stream_has_pending">
        <return-type type="gboolean" />
      </method>
      <method name="IsClosed" cname="g_input_stream_is_closed">
        <return-type type="gboolean" />
      </method>
      <method name="Read" cname="g_input_stream_read">
        <return-type type="gssize" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadAll" cname="g_input_stream_read_all">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="gsize*" name="bytes_read" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadAsync" cname="g_input_stream_read_async">
        <return-type type="void" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReadFinish" cname="g_input_stream_read_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetPending" cname="g_input_stream_set_pending">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Skip" cname="g_input_stream_skip">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SkipAsync" cname="g_input_stream_skip_async">
        <return-type type="void" />
        <parameters>
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SkipFinish" cname="g_input_stream_skip_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="LocalDirectoryMonitor" cname="GLocalDirectoryMonitor" parent="GFileMonitor">
      <field name="Dirname" cname="dirname" type="gchar*" />
      <field name="MountMonitor" cname="mount_monitor" type="GUnixMountMonitor*" />
      <field name="WasMounted" cname="was_mounted" type="gboolean" />
      <property name="Dirname" cname="dirname" type="gchar*" writeable="true" construct-only="true" />
      <virtual_method name="IsSupported" cname="is_supported">
        <return-type type="gboolean" />
      </virtual_method>
      <method name="GetType" cname="g_local_directory_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="LocalFileEnumerator" cname="GLocalFileEnumerator" parent="GFileEnumerator" />
    <object name="MemoryInputStream" cname="GMemoryInputStream" parent="GInputStream">
      <field name="Priv" cname="priv" type="GMemoryInputStreamPrivate*" />
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="AddData" cname="g_memory_input_stream_add_data">
        <return-type type="void" />
        <parameters>
          <parameter type="const-void*" name="data" />
          <parameter type="gssize" name="len" />
          <parameter type="GDestroyNotify" name="destroy" />
        </parameters>
      </method>
      <method name="GetType" cname="g_memory_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_memory_input_stream_new" />
      <constructor cname="g_memory_input_stream_new_from_data">
        <parameters>
          <parameter type="const-void*" name="data" />
          <parameter type="gssize" name="len" />
          <parameter type="GDestroyNotify" name="destroy" />
        </parameters>
      </constructor>
    </object>
    <object name="MemoryOutputStream" cname="GMemoryOutputStream" parent="GOutputStream">
      <field name="Priv" cname="priv" type="GMemoryOutputStreamPrivate*" />
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="GetData" cname="g_memory_output_stream_get_data">
        <return-type type="gpointer" />
      </method>
      <method name="GetDataSize" cname="g_memory_output_stream_get_data_size">
        <return-type type="gsize" />
      </method>
      <method name="GetSize" cname="g_memory_output_stream_get_size">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_memory_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_memory_output_stream_new">
        <parameters>
          <parameter type="gpointer" name="data" />
          <parameter type="gsize" name="len" />
          <parameter type="GReallocFunc" name="realloc_fn" />
          <parameter type="GDestroyNotify" name="destroy" />
        </parameters>
      </constructor>
    </object>
    <object name="MountOperation" cname="GMountOperation" parent="GObject">
      <field name="Priv" cname="priv" type="GMountOperationPrivate*" />
      <signal name="AskPassword" cname="ask-password" when="LAST" field_name="ask_password">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountOperation*" name="op" />
          <parameter type="const-char*" name="message" />
          <parameter type="const-char*" name="default_user" />
          <parameter type="const-char*" name="default_domain" />
          <parameter type="GAskPasswordFlags" name="flags" />
        </parameters>
      </signal>
      <signal name="AskQuestion" cname="ask-question" when="LAST" field_name="ask_question">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountOperation*" name="op" />
          <parameter type="const-char*" name="message" />
          <parameter type="const-char*" array="true" name="choices" />
        </parameters>
      </signal>
      <signal name="Reply" cname="reply" when="LAST" field_name="reply">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountOperation*" name="op" />
          <parameter type="GMountOperationResult" name="result" />
        </parameters>
      </signal>
      <property name="Username" cname="username" type="gchar*" readable="true" writeable="true" />
      <property name="Password" cname="password" type="gchar*" readable="true" writeable="true" />
      <property name="Anonymous" cname="anonymous" type="gboolean" readable="true" writeable="true" />
      <property name="Domain" cname="domain" type="gchar*" readable="true" writeable="true" />
      <property name="PasswordSave" cname="password-save" type="GPasswordSave" readable="true" writeable="true" />
      <property name="Choice" cname="choice" type="gint" readable="true" writeable="true" />
      <method name="GetAnonymous" cname="g_mount_operation_get_anonymous">
        <return-type type="gboolean" />
      </method>
      <method name="GetChoice" cname="g_mount_operation_get_choice">
        <return-type type="int" />
      </method>
      <method name="GetDomain" cname="g_mount_operation_get_domain">
        <return-type type="const-char*" />
      </method>
      <method name="GetPassword" cname="g_mount_operation_get_password">
        <return-type type="const-char*" />
      </method>
      <method name="GetPasswordSave" cname="g_mount_operation_get_password_save">
        <return-type type="GPasswordSave" />
      </method>
      <method name="GetType" cname="g_mount_operation_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUsername" cname="g_mount_operation_get_username">
        <return-type type="const-char*" />
      </method>
      <constructor cname="g_mount_operation_new" />
      <method name="Reply" cname="g_mount_operation_reply">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountOperationResult" name="result" />
        </parameters>
      </method>
      <method name="SetAnonymous" cname="g_mount_operation_set_anonymous">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="anonymous" />
        </parameters>
      </method>
      <method name="SetChoice" cname="g_mount_operation_set_choice">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="choice" />
        </parameters>
      </method>
      <method name="SetDomain" cname="g_mount_operation_set_domain">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="domain" />
        </parameters>
      </method>
      <method name="SetPassword" cname="g_mount_operation_set_password">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="password" />
        </parameters>
      </method>
      <method name="SetPasswordSave" cname="g_mount_operation_set_password_save">
        <return-type type="void" />
        <parameters>
          <parameter type="GPasswordSave" name="save" />
        </parameters>
      </method>
      <method name="SetUsername" cname="g_mount_operation_set_username">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="username" />
        </parameters>
      </method>
    </object>
    <object name="NativeVolumeMonitor" cname="GNativeVolumeMonitor" parent="GVolumeMonitor">
      <virtual_method name="GetMountForMountPath" cname="get_mount_for_mount_path">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="const-char*" name="mount_path" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_native_volume_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="OutputStream" cname="GOutputStream" parent="GObject">
      <field name="Priv" cname="priv" type="GOutputStreamPrivate*" />
      <virtual_method name="WriteFn" cname="write_fn">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Splice" cname="splice">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GInputStream*" name="source" />
          <parameter type="GOutputStreamSpliceFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Flush" cname="flush">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="WriteAsync" cname="write_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="WriteFinish" cname="write_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SpliceAsync" cname="splice_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GInputStream*" name="source" />
          <parameter type="GOutputStreamSpliceFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </virtual_method>
      <virtual_method name="SpliceFinish" cname="splice_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="FlushAsync" cname="flush_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="FlushFinish" cname="flush_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="ClearPending" cname="g_output_stream_clear_pending">
        <return-type type="void" />
      </method>
      <method name="Close" cname="g_output_stream_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_output_stream_close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_output_stream_close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Flush" cname="g_output_stream_flush">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="FlushAsync" cname="g_output_stream_flush_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="FlushFinish" cname="g_output_stream_flush_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="g_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasPending" cname="g_output_stream_has_pending">
        <return-type type="gboolean" />
      </method>
      <method name="IsClosed" cname="g_output_stream_is_closed">
        <return-type type="gboolean" />
      </method>
      <method name="SetPending" cname="g_output_stream_set_pending">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Splice" cname="g_output_stream_splice">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GInputStream*" name="source" />
          <parameter type="GOutputStreamSpliceFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SpliceAsync" cname="g_output_stream_splice_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GInputStream*" name="source" />
          <parameter type="GOutputStreamSpliceFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SpliceFinish" cname="g_output_stream_splice_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Write" cname="g_output_stream_write">
        <return-type type="gssize" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="WriteAll" cname="g_output_stream_write_all">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="gsize*" name="bytes_written" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="WriteAsync" cname="g_output_stream_write_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="WriteFinish" cname="g_output_stream_write_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="SimpleAsyncResult" cname="GSimpleAsyncResult" parent="GObject">
      <implements>
        <interface cname="GAsyncResult" />
      </implements>
      <method name="Complete" cname="g_simple_async_result_complete">
        <return-type type="void" />
      </method>
      <method name="CompleteInIdle" cname="g_simple_async_result_complete_in_idle">
        <return-type type="void" />
      </method>
      <method name="GetOpResGboolean" cname="g_simple_async_result_get_op_res_gboolean">
        <return-type type="gboolean" />
      </method>
      <method name="GetOpResGpointer" cname="g_simple_async_result_get_op_res_gpointer">
        <return-type type="gpointer" />
      </method>
      <method name="GetOpResGssize" cname="g_simple_async_result_get_op_res_gssize">
        <return-type type="gssize" />
      </method>
      <method name="GetSourceTag" cname="g_simple_async_result_get_source_tag">
        <return-type type="gpointer" />
      </method>
      <method name="GetType" cname="g_simple_async_result_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_simple_async_result_new">
        <parameters>
          <parameter type="GObject*" name="source_object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="gpointer" name="source_tag" />
        </parameters>
      </constructor>
      <constructor cname="g_simple_async_result_new_error">
        <parameters>
          <parameter type="GObject*" name="source_object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-char*" name="format" printf_format="true" />
          <parameter ellipsis="true" printf_format_args="true" />
        </parameters>
      </constructor>
      <constructor cname="g_simple_async_result_new_from_error">
        <parameters>
          <parameter type="GObject*" name="source_object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GError*" name="error" />
        </parameters>
      </constructor>
      <method name="PropagateError" cname="g_simple_async_result_propagate_error">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="dest" />
        </parameters>
      </method>
      <method name="RunInThread" cname="g_simple_async_result_run_in_thread">
        <return-type type="void" />
        <parameters>
          <parameter type="GSimpleAsyncThreadFunc" name="func" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="SetError" cname="g_simple_async_result_set_error">
        <return-type type="void" />
        <parameters>
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-char*" name="format" printf_format="true" />
          <parameter ellipsis="true" printf_format_args="true" />
        </parameters>
      </method>
      <method name="SetErrorVa" cname="g_simple_async_result_set_error_va">
        <return-type type="void" />
        <parameters>
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-char*" name="format" />
          <parameter type="va_list" name="args" />
        </parameters>
      </method>
      <method name="SetFromError" cname="g_simple_async_result_set_from_error">
        <return-type type="void" />
        <parameters>
          <parameter type="GError*" name="error" />
        </parameters>
      </method>
      <method name="SetHandleCancellation" cname="g_simple_async_result_set_handle_cancellation">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="handle_cancellation" />
        </parameters>
      </method>
      <method name="SetOpResGboolean" cname="g_simple_async_result_set_op_res_gboolean">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="op_res" />
        </parameters>
      </method>
      <method name="SetOpResGpointer" cname="g_simple_async_result_set_op_res_gpointer">
        <return-type type="void" />
        <parameters>
          <parameter type="gpointer" name="op_res" />
          <parameter type="GDestroyNotify" name="destroy_op_res" />
        </parameters>
      </method>
      <method name="SetOpResGssize" cname="g_simple_async_result_set_op_res_gssize">
        <return-type type="void" />
        <parameters>
          <parameter type="gssize" name="op_res" />
        </parameters>
      </method>
    </object>
    <object name="ThemedIcon" cname="GThemedIcon" parent="GObject">
      <property name="Name" cname="name" type="gchar*" writeable="true" construct-only="true" />
      <property name="Names" cname="names" type="GStrv" readable="true" writeable="true" construct-only="true" />
      <property name="UseDefaultFallbacks" cname="use-default-fallbacks" type="gboolean" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GIcon" />
      </implements>
      <method name="AppendName" cname="g_themed_icon_append_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="iconname" />
        </parameters>
      </method>
      <method name="GetNames" cname="g_themed_icon_get_names">
        <return-type type="const-char**" />
      </method>
      <method name="GetType" cname="g_themed_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_themed_icon_new">
        <parameters>
          <parameter type="const-char*" name="iconname" />
        </parameters>
      </constructor>
      <constructor cname="g_themed_icon_new_from_names">
        <parameters>
          <parameter type="char**" name="iconnames" />
          <parameter type="int" name="len" />
        </parameters>
      </constructor>
      <constructor cname="g_themed_icon_new_with_default_fallbacks">
        <parameters>
          <parameter type="const-char*" name="iconname" />
        </parameters>
      </constructor>
      <method name="PrependName" cname="g_themed_icon_prepend_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="iconname" />
        </parameters>
      </method>
    </object>
    <object name="Vfs" cname="GVfs" parent="GObject">
      <virtual_method name="IsActive" cname="is_active">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GVfs*" name="vfs" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetFileForPath" cname="get_file_for_path">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GVfs*" name="vfs" />
          <parameter type="const-char*" name="path" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetFileForUri" cname="get_file_for_uri">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GVfs*" name="vfs" />
          <parameter type="const-char*" name="uri" />
        </parameters>
      </virtual_method>
      <virtual_method name="ParseName" cname="parse_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GVfs*" name="vfs" />
          <parameter type="const-char*" name="parse_name" />
        </parameters>
      </virtual_method>
      <method name="GetDefault" cname="g_vfs_get_default" shared="true">
        <return-type type="GVfs*" />
      </method>
      <method name="GetFileForPath" cname="g_vfs_get_file_for_path">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </method>
      <method name="GetFileForUri" cname="g_vfs_get_file_for_uri">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </method>
      <method name="GetLocal" cname="g_vfs_get_local" shared="true">
        <return-type type="GVfs*" />
      </method>
      <method name="GetSupportedUriSchemes" cname="g_vfs_get_supported_uri_schemes">
        <return-type type="const-gchar**" />
      </method>
      <method name="GetType" cname="g_vfs_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsActive" cname="g_vfs_is_active">
        <return-type type="gboolean" />
      </method>
      <method name="ParseName" cname="g_vfs_parse_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="parse_name" />
        </parameters>
      </method>
    </object>
    <object name="VolumeMonitor" cname="GVolumeMonitor" parent="GObject">
      <field name="Priv" cname="priv" type="gpointer" />
      <signal name="VolumeAdded" cname="volume-added" when="LAST" field_name="volume_added">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="VolumeRemoved" cname="volume-removed" when="LAST" field_name="volume_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="VolumeChanged" cname="volume-changed" when="LAST" field_name="volume_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="MountAdded" cname="mount-added" when="LAST" field_name="mount_added">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="MountRemoved" cname="mount-removed" when="LAST" field_name="mount_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="MountPreUnmount" cname="mount-pre-unmount" when="LAST" field_name="mount_pre_unmount">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="MountChanged" cname="mount-changed" when="LAST" field_name="mount_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="DriveConnected" cname="drive-connected" when="LAST" field_name="drive_connected">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="DriveDisconnected" cname="drive-disconnected" when="LAST" field_name="drive_disconnected">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="DriveChanged" cname="drive-changed" when="LAST" field_name="drive_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <virtual_method name="IsSupported" cname="is_supported">
        <return-type type="gboolean" />
      </virtual_method>
      <virtual_method name="GetConnectedDrives" cname="get_connected_drives">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetVolumes" cname="get_volumes">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetMounts" cname="get_mounts">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetVolumeForUuid" cname="get_volume_for_uuid">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="const-char*" name="uuid" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetMountForUuid" cname="get_mount_for_uuid">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="const-char*" name="uuid" />
        </parameters>
      </virtual_method>
      <virtual_method name="AdoptOrphanMount" cname="adopt_orphan_mount">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
        </parameters>
      </virtual_method>
      <signal name="DriveEjectButton" cname="drive-eject-button" when="LAST" field_name="drive_eject_button">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <method name="AdoptOrphanMount" cname="g_volume_monitor_adopt_orphan_mount" shared="true">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </method>
      <method name="Get" cname="g_volume_monitor_get" shared="true">
        <return-type type="GVolumeMonitor*" />
      </method>
      <method name="GetConnectedDrives" cname="g_volume_monitor_get_connected_drives">
        <return-type type="GList*" />
      </method>
      <method name="GetMountForUuid" cname="g_volume_monitor_get_mount_for_uuid">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="const-char*" name="uuid" />
        </parameters>
      </method>
      <method name="GetMounts" cname="g_volume_monitor_get_mounts">
        <return-type type="GList*" />
      </method>
      <method name="GetType" cname="g_volume_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVolumeForUuid" cname="g_volume_monitor_get_volume_for_uuid">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="const-char*" name="uuid" />
        </parameters>
      </method>
      <method name="GetVolumes" cname="g_volume_monitor_get_volumes">
        <return-type type="GList*" />
      </method>
    </object>
    <struct name="FileAttributeInfo" cname="GFileAttributeInfo">
      <field name="Name" cname="name" type="char*" />
      <field name="Type" cname="type" type="GFileAttributeType" />
      <field name="Flags" cname="flags" type="GFileAttributeInfoFlags" />
    </struct>
    <struct name="FileAttributeInfoList" cname="GFileAttributeInfoList" opaque="true">
      <field name="Infos" cname="infos" type="GFileAttributeInfo*" access="public" writeable="true" />
      <field name="NInfos" cname="n_infos" type="int" access="public" writeable="true" />
      <method name="Add" cname="g_file_attribute_info_list_add">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="name" />
          <parameter type="GFileAttributeType" name="type" />
          <parameter type="GFileAttributeInfoFlags" name="flags" />
        </parameters>
      </method>
      <method name="Dup" cname="g_file_attribute_info_list_dup">
        <return-type type="GFileAttributeInfoList*" />
      </method>
      <method name="Lookup" cname="g_file_attribute_info_list_lookup">
        <return-type type="const-GFileAttributeInfo*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <constructor cname="g_file_attribute_info_list_new" />
      <method name="Ref" cname="g_file_attribute_info_list_ref">
        <return-type type="GFileAttributeInfoList*" />
      </method>
      <method name="Unref" cname="g_file_attribute_info_list_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="FileAttributeMatcher" cname="GFileAttributeMatcher" opaque="true">
      <method name="EnumerateNamespace" cname="g_file_attribute_matcher_enumerate_namespace">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="ns" />
        </parameters>
      </method>
      <method name="EnumerateNext" cname="g_file_attribute_matcher_enumerate_next">
        <return-type type="const-char*" />
      </method>
      <method name="Matches" cname="g_file_attribute_matcher_matches">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="MatchesOnly" cname="g_file_attribute_matcher_matches_only">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <constructor cname="g_file_attribute_matcher_new">
        <parameters>
          <parameter type="const-char*" name="attributes" />
        </parameters>
      </constructor>
      <method name="Ref" cname="g_file_attribute_matcher_ref">
        <return-type type="GFileAttributeMatcher*" />
      </method>
      <method name="Unref" cname="g_file_attribute_matcher_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="IOExtension" cname="GIOExtension" opaque="true">
      <method name="GetName" cname="g_io_extension_get_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetPriority" cname="g_io_extension_get_priority">
        <return-type type="gint" />
      </method>
      <method name="GetType" cname="g_io_extension_get_type">
        <return-type type="GType" />
      </method>
      <method name="RefClass" cname="g_io_extension_ref_class">
        <return-type type="GTypeClass*" />
      </method>
    </struct>
    <struct name="IOExtensionPoint" cname="GIOExtensionPoint" opaque="true">
      <method name="GetExtensionByName" cname="g_io_extension_point_get_extension_by_name">
        <return-type type="GIOExtension*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="GetExtensions" cname="g_io_extension_point_get_extensions">
        <return-type type="GList*" />
      </method>
      <method name="GetRequiredType" cname="g_io_extension_point_get_required_type">
        <return-type type="GType" />
      </method>
      <method name="Implement" cname="g_io_extension_point_implement" shared="true">
        <return-type type="GIOExtension*" />
        <parameters>
          <parameter type="const-char*" name="extension_point_name" />
          <parameter type="GType" name="type" />
          <parameter type="const-char*" name="extension_name" />
          <parameter type="gint" name="priority" />
        </parameters>
      </method>
      <method name="Lookup" cname="g_io_extension_point_lookup" shared="true">
        <return-type type="GIOExtensionPoint*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="Register" cname="g_io_extension_point_register" shared="true">
        <return-type type="GIOExtensionPoint*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="SetRequiredType" cname="g_io_extension_point_set_required_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GType" name="type" />
        </parameters>
      </method>
    </struct>
    <struct name="IOSchedulerJob" cname="GIOSchedulerJob" opaque="true">
      <method name="SendToMainloop" cname="g_io_scheduler_job_send_to_mainloop">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSourceFunc" name="func" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
        </parameters>
      </method>
      <method name="SendToMainloopAsync" cname="g_io_scheduler_job_send_to_mainloop_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GSourceFunc" name="func" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
        </parameters>
      </method>
    </struct>
    <class name="Content" cname="GContent_">
      <method name="TypeCanBeExecutable" cname="g_content_type_can_be_executable" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="type" />
        </parameters>
      </method>
      <method name="TypeEquals" cname="g_content_type_equals" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="type1" />
          <parameter type="const-char*" name="type2" />
        </parameters>
      </method>
      <method name="TypeFromMimeType" cname="g_content_type_from_mime_type" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="mime_type" />
        </parameters>
      </method>
      <method name="TypeGetDescription" cname="g_content_type_get_description" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="type" />
        </parameters>
      </method>
      <method name="TypeGetIcon" cname="g_content_type_get_icon" shared="true">
        <return-type type="GIcon*" />
        <parameters>
          <parameter type="const-char*" name="type" />
        </parameters>
      </method>
      <method name="TypeGetMimeType" cname="g_content_type_get_mime_type" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="type" />
        </parameters>
      </method>
      <method name="TypeGuess" cname="g_content_type_guess" shared="true">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="filename" />
          <parameter type="const-guchar*" name="data" />
          <parameter type="gsize" name="data_size" />
          <parameter type="gboolean*" name="result_uncertain" />
        </parameters>
      </method>
      <method name="TypeGuessForTree" cname="g_content_type_guess_for_tree" shared="true">
        <return-type type="char**" />
        <parameters>
          <parameter type="GFile*" name="root" />
        </parameters>
      </method>
      <method name="TypeIsA" cname="g_content_type_is_a" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="type" />
          <parameter type="const-char*" name="supertype" />
        </parameters>
      </method>
      <method name="TypeIsUnknown" cname="g_content_type_is_unknown" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="type" />
        </parameters>
      </method>
      <method name="TypesGetRegistered" cname="g_content_types_get_registered" shared="true">
        <return-type type="GList*" />
      </method>
    </class>
    <class name="Io" cname="GIo_">
      <method name="ErrorFromErrno" cname="g_io_error_from_errno" shared="true">
        <return-type type="GIOErrorEnum" />
        <parameters>
          <parameter type="gint" name="err_no" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="g_io_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="ModulesLoadAllInDirectory" cname="g_io_modules_load_all_in_directory" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="dirname" />
        </parameters>
      </method>
      <method name="SchedulerCancelAllJobs" cname="g_io_scheduler_cancel_all_jobs" shared="true">
        <return-type type="void" />
      </method>
      <method name="SchedulerPushJob" cname="g_io_scheduler_push_job" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GIOSchedulerJobFunc" name="job_func" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
          <parameter type="gint" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
    </class>
    <class name="Simple" cname="GSimple_">
      <method name="AsyncReportErrorInIdle" cname="g_simple_async_report_error_in_idle" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GObject*" name="object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-char*" name="format" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
      <method name="AsyncReportGerrorInIdle" cname="g_simple_async_report_gerror_in_idle" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GObject*" name="object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GError*" name="error" />
        </parameters>
      </method>
    </class>
  </namespace>
</api>