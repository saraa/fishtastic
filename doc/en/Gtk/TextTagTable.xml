<Type Name="TextTagTable" FullName="Gtk.TextTagTable">
  <TypeSignature Language="C#" Value="public class TextTagTable : GLib.Object, IWrapper, IDisposable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>
      A tag table defines a set of tags
    </summary>
    <remarks>
      A tag table defines a set of <see cref="T:Gtk.TextTag" /> tags that can be used
      together. Each buffer has one tag table associated with it; only
      tags from that tag table can be used with the buffer. A single
      tag table can be shared between multiple buffers, however.
    </remarks>
  </Docs>
  <Base>
    <BaseTypeName>GLib.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (Gtk.TextTag tag);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="tag" Type="Gtk.TextTag" />
	</Parameters>
      <Docs>
        <summary>Remove a tag from the table.</summary>
        <param name="tag">the tag to be removed</param>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Gtk.TextTag tag);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="tag" Type="Gtk.TextTag" />
	</Parameters>
      <Docs>
        <summary>Add a tag to the table. The tag is assigned the highest priority in the table.</summary>
        <param name="tag">the tag to be added</param>
        <remarks>
          <para>
            Add a tag to the table. The tag is assigned the highest
            priority in the table.
          </para>
          <para>
            <see paramref="tag" /> must not be in a tag table already,
            and may not have the same name as an already-added tag.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public Gtk.TextTag Lookup (string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.TextTag</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="name" Type="System.String" />
	</Parameters>
      <Docs>
        <summary>Finds a <see cref="T:Gtk.TextTag" /> by its name</summary>
        <param name="name">the name of a tag</param>
        <returns>The tag, or <see langword="null" /> if none by that name is in the table.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Foreach">
      <MemberSignature Language="C#" Value="public void Foreach (Gtk.TextTagTableForeach func);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
		<Parameter Name="func" Type="Gtk.TextTagTableForeach" />
	</Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="func">To be added: an object of type 'Gtk.TextTagTableForeach'</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected virtual void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTagTable (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
		<Parameter Name="raw" Type="System.IntPtr" />
	</Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of TextTagTable, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTagTable ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'Gtk.TextTagTable'</returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The GLib Type for Gtk.TextTagTable</summary>
        <returns>The GLib Type for the Gtk.TextTagTable class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of the table</summary>
        <returns>The number of the tags in this table</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TagRemoved">
      <MemberSignature Language="C#" Value="public event GtkSharp.TagRemovedHandler TagRemoved;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.TagRemovedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a tag is removed from the table</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TagChanged">
      <MemberSignature Language="C#" Value="public event GtkSharp.TagChangedHandler TagChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.TagChangedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a tag in the table is changed</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TagAdded">
      <MemberSignature Language="C#" Value="public event GtkSharp.TagAddedHandler TagAdded;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>GtkSharp.TagAddedHandler</ReturnType></ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a tag is added to the table</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextTagTable (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
		<Parameter Name="gtype" Type="GLib.Type" />
	</Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="gtype">GLib type for the type</param>
        <returns>Creates a new instance of TextTagTable, using the GLib-provided type</returns>
        <remarks>
          <para>This is a constructor used by derivative types of <see cref="T:Gtk.TextTagTable" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
