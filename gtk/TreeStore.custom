// Gtk.TreeStore.Custom - Gtk TreeStore class customizations
//
// Author: Kristian Rietveld <kris@gtk.org>
//
// (c) 2002 Kristian Rietveld
//
// This code is inserted after the automatically generated code.


		/// <summary>
		///	Appends a row.
		/// </summary>
		///
		/// <remarks>
		///	Appends a row to the root level of the TreeStore.
		/// </remarks>

		[DllImport ("libgtk-win32-2.0-0.dll")]
		static extern void gtk_tree_store_append (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent);

		public void Append (out Gtk.TreeIter iter) {
			gtk_tree_store_append (Handle, out iter, IntPtr.Zero);
		}

		/// <summary>
		///	Inserts a row.
		/// </summary>
		///
		/// <remarks>
		///	Inserts a row in the root level of the TreeStore at
		///	the given position.
		/// </remarks>

		[DllImport ("libgtk-win32-2.0-0.dll")]
		static extern void gtk_tree_store_insert (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent, int position);

		public void Insert (out Gtk.TreeIter iter, int position) {
			gtk_tree_store_insert (Handle, out iter, IntPtr.Zero, position);
		}

		/// <summary>
		///	Prepends a row.
		/// </summary>
		///
		/// <remarks>
		///	Prepends a row to the root level of the TreeStore.
		/// </remarks>

		[DllImport ("libgtk-win32-2.0-0.dll")]
		static extern void gtk_tree_store_prepend (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent);

		public void Prepend (out Gtk.TreeIter iter) {
			gtk_tree_store_append (Handle, out iter, IntPtr.Zero);
		}

		/// <summary>
		///	Inserts a row.
		/// </summary>
		///
		/// <remarks>
		///	Inserts a row in the root level of TreeStore before the
		///	given sibling.
		/// </remarks>

		[DllImport ("libgtk-win32-2.0-0.dll")]
		static extern void gtk_tree_store_insert_before (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent, ref Gtk.TreeIter sibling);

		public void InsertBefore (out Gtk.TreeIter iter, Gtk.TreeIter sibling) {
			gtk_tree_store_insert_before (Handle, out iter, IntPtr.Zero, ref sibling);
		}

		/// <summary>
		///	Inserts a row.
		/// </summary>
		///
		/// <remarks>
		///	Inserts a row in the root level of TreeStore before the
		///	given sibling.
		/// </remarks>

		[DllImport ("libgtk-win32-2.0-0.dll")]
		static extern void gtk_tree_store_insert_after (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent, ref Gtk.TreeIter sibling);

		public void InsertAfter (out Gtk.TreeIter iter, Gtk.TreeIter sibling) {
			gtk_tree_store_insert_after (Handle, out iter, IntPtr.Zero, ref sibling);
		}


		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern bool gtk_tree_model_iter_children (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent);
		public bool IterChildren (out Gtk.TreeIter iter) {
			bool raw_ret = gtk_tree_model_iter_children (Handle, out iter, IntPtr.Zero);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern int gtk_tree_model_iter_n_children (IntPtr raw, IntPtr iter);
		public int IterNChildren () {
			int raw_ret = gtk_tree_model_iter_n_children (Handle, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern bool gtk_tree_model_iter_nth_child (IntPtr raw, out Gtk.TreeIter iter, IntPtr parent, int n);
		public bool IterNthChild (out Gtk.TreeIter iter, int n) {
			bool raw_ret = gtk_tree_model_iter_nth_child (Handle, out iter, IntPtr.Zero, n);
			bool ret = raw_ret;
			return ret;
		}

		public void SetValue (Gtk.TreeIter iter, int column, bool value) {
			SetValue (iter, column, new GLib.Value (value));
		}

		public void SetValue (Gtk.TreeIter iter, int column, double value) {
			SetValue (iter, column, new GLib.Value (value));
		}

		public void SetValue (Gtk.TreeIter iter, int column, int value) {
			SetValue (iter, column, new GLib.Value (value));
		}

		public void SetValue (Gtk.TreeIter iter, int column, string value) {
			SetValue (iter, column, new GLib.Value (value));
		}

		public void SetValue (Gtk.TreeIter iter, int column, float value) {
			SetValue (iter, column, new GLib.Value (value));
		}

		public void SetValue (Gtk.TreeIter iter, int column, uint value) {
			SetValue (iter, column, new GLib.Value (value));
		}
		
		public void SetValue (Gtk.TreeIter iter, int column, object value) {
			SetValue (iter, column, new GLib.Value (value));
		}

		private void _AppendValues (Gtk.TreeIter iter, Array values) {
			int col = 0;
			foreach (object value in values) {
				if (value != null)
					SetValue (iter, col, new GLib.Value (value));
				col++;
			}
		}

		public Gtk.TreeIter AppendValues (Gtk.TreeIter parent, Array values) {
			Gtk.TreeIter iter = Append (parent);
			_AppendValues (iter, values);
			return iter;
		}
		
		public Gtk.TreeIter AppendValues (Gtk.TreeIter parent, params object[] values) {
			return AppendValues (parent, (Array) values);
		}

		public Gtk.TreeIter AppendValues (Array values) {
			Gtk.TreeIter iter;
			Append (out iter);
			_AppendValues (iter, values);
			return iter;
		}
		
		public Gtk.TreeIter AppendValues (params object[] values) {
			return AppendValues ((Array) values);
		}

		public TreeStore (params Type[] types)
		{
			IntPtr[] ctypes = new IntPtr[types.Length];
			int i = 0;
			foreach (Type type in types) {
				GLib.GType ctype = GLibSharp.TypeConverter.LookupType (type);
				if (ctype == GLib.GType.None) {
					ctypes[i] = GLibSharp.ManagedValue.GType.Val;
				} else if (ctype == GLib.GType.Invalid) {
					throw new Exception ("Unknown type");
				} else {
					ctypes[i] = ctype.Val;
				}
				i++;
			}
			
			Raw = gtk_tree_store_newv (ctypes.Length, ctypes);
		}

		public object GetValue (Gtk.TreeIter iter, int column) {
			GLib.Value val = new GLib.Value ();
			GetValue (iter, column, val);
			object ret = val.Val;
			val.Dispose ();
			return ret;
		}


