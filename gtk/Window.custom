// Gtk.Window.custom - Gtk Window class customizations
//
// Author: Mike Kestner <mkestner@ximian.com>
//
// Copyright (c) 2001 Mike Kestner
// Copyright (c) 2004 Novell, Inc.
//
// This code is inserted after the automatically generated code.


		[DllImport("libgobject-2.0-0.dll")]
		private static extern void g_object_ref (IntPtr raw);

		protected override IntPtr Raw {
			get {
				return base.Raw;
			}
			set {
				base.Raw = value;
				g_object_ref (value);
			}
		}

		public Window (String title) : this (WindowType.Toplevel)
		{
			this.Title = title;
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_window_get_default_icon_list();

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_window_set_default_icon_list(IntPtr list);

		public static Gdk.Pixbuf[] DefaultIconList {
			get {
				IntPtr raw_ret = gtk_window_get_default_icon_list();
				if (raw_ret == IntPtr.Zero)
					return new Gdk.Pixbuf [0];
				GLib.List list = new GLib.List(raw_ret);
				Gdk.Pixbuf[] result = new Gdk.Pixbuf [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as Gdk.Pixbuf;
				return result;
			}
			set {
				GLib.List list = new GLib.List(IntPtr.Zero);
				foreach (Gdk.Pixbuf val in value)
					list.Append (val.Handle);
				gtk_window_set_default_icon_list(list.Handle);
			}
		}

		public System.Drawing.Size DefaultSize {
			get {
				return new System.Drawing.Size (
						DefaultWidth, DefaultHeight);
			}
			set {
				DefaultWidth = value.Width;
				DefaultHeight = value.Height;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_window_get_icon_list(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern void gtk_window_set_icon_list(IntPtr raw, IntPtr list);

		public Gdk.Pixbuf[] IconList {
			get {
				IntPtr raw_ret = gtk_window_get_icon_list(Handle);
				if (raw_ret == IntPtr.Zero)
					return new Gdk.Pixbuf [0];
				GLib.List list = new GLib.List(raw_ret);
				Gdk.Pixbuf[] result = new Gdk.Pixbuf [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as Gdk.Pixbuf;
				return result;
			}
			set {
				GLib.List list = new GLib.List(IntPtr.Zero);
				foreach (Gdk.Pixbuf val in value)
					list.Append (val.Handle);
				gtk_window_set_icon_list(Handle, list.Handle);
			}
		}

		public System.Drawing.Size Position {
			get {
				int x, y;
				GetPosition (out x, out y);
				
				return new System.Drawing.Size (
						x, y);
			}
		}

		public System.Drawing.Size Size {
			get {
				int x, y;
				GetSize (out x, out y);
				
				return new System.Drawing.Size (
						x, y);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll")]
		static extern IntPtr gtk_window_list_toplevels();

		public static Window[] ListToplevels ()
		{
			IntPtr raw_ret = gtk_window_list_toplevels();
			if (raw_ret == IntPtr.Zero)
				return new Window [0];

			GLib.List list = new GLib.List(raw_ret);
			Window[] result = new Window [list.Count];
			for (int i = 0; i < list.Count; i++)
				result [i] = list [i] as Window;
			return result;
		}
