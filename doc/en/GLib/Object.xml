<Type Name="Object" FullName="GLib.Object">
  <TypeSignature Language="C#" Value="public class Object : IWrapper, IDisposable" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>glib-sharp</AssemblyName>
    <AssemblyPublicKey></AssemblyPublicKey>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyCulture>neutral</AssemblyCulture>
    <Attributes />
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>To be added</summary>
    <remarks>To be added</remarks>
  </Docs>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes />
  <Members>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public void SetProperty (string name, GLib.Value val);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="val" Type="GLib.Value" />
      </Parameters>
      <Docs>
        <summary>Accesses a <see cref="T:GLib.Value" /> Property.</summary>
        <param name="name">an object of type an object of type <see cref="T:System.String" /></param>
        <param name="val">an object of type <see cref="T:GLib.Value" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public void GetProperty (string name, GLib.Value val);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="val" Type="GLib.Value" />
      </Parameters>
      <Docs>
        <summary>Accesses a <see cref="T:GLib.Value" /> Property.</summary>
        <param name="name">an object of type an object of type <see cref="T:System.String" /></param>
        <param name="val">an object of type <see cref="T:GLib.Value" /></param>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGType">
      <MemberSignature Language="C#" Value="public uint GetGType ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the GType of this object.</summary>
        <returns>an object of type <see cref="T:System.UInt32" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes of the raw object.</summary>
        <remarks>Only override this if the Raw object should not be unreferenced when the object is garbage collected.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="protected override void Finalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the resources associated with the object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Object (IntPtr raw);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <summary>Internal constructor</summary>
        <param name="raw">Pointer to the C object.</param>
        <returns>An instance of Object, wrapping the C object.</returns>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static uint GType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:GLib.Type" /> for <see cref="T:GLib.Object" /></summary>
        <returns>The <see cref="T:GLib.Type" /> for the <see cref="T:GLib.Object" /> class.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RefCount">
      <MemberSignature Language="C#" Value="public int RefCount { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added</summary>
        <returns>an object of type <see cref="T:System.Int32" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The raw GObject reference associated with this object.</summary>
        <returns>an object of type <see cref="T:System.IntPtr" /></returns>
        <remarks>Subclasses can use Raw property for read/write access.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Raw">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Raw { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters></Parameters>
      <Docs>
        <summary>The raw GObject reference associated with this wrapper.</summary>
        <param name="value">an object of type <see cref="T:System.IntPtr" /></param>
        <returns>an object of type <see cref="T:System.IntPtr" /></returns>
        <remarks>	Only subclasses of Object can access this read/write property.  For public read-only access, use the Handle property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterGType">
      <MemberSignature Language="C#" Value="public static GLib.Type RegisterGType (Type t);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>GLib.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <summary>Shared method to register types with the GType system.</summary>
        <param name="t">an object of type <see cref="T:System.Type" /></param>
        <returns>an object of type <see cref="T:GLib.Type" /></returns>
        <remarks>This method should be called from the class constructor of subclasses.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Collections.Hashtable Data { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stores and Accesses arbitrary data on the Object.</summary>
        <returns>a <see cref="T:System.Collections.Hashtable" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="EventList">
      <MemberSignature Language="C#" Value="protected System.ComponentModel.EventHandlerList EventList { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.ComponentModel.EventHandlerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A list object containing all the events for this object indexed by the Gtk signal name.</summary>
        <returns>a <see cref="T:System.ComponentModel.EventHandlerList" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static GLib.Object GetObject (IntPtr o, bool owned_ref);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>GLib.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.IntPtr" />
        <Parameter Name="owned_ref" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <summary>Used to obtain a CLI typed object associated with a given raw object pointer.</summary>
        <param name="o">a <see cref="T:System.IntPtr" /></param>
        <param name="owned_ref">a <see cref="T:System.Boolean" /></param>
        <returns>a <see cref="T:GLib.Object" /></returns>
        <remarks>This method is primarily used to wrap object references that are returned by either the signal system or raw class methods that return GObject references.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Object ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Creates a new <see cref="T:GLib.Object" /> instance.</summary>
        <returns>a <see cref="T:GLib.Object" /></returns>
        <remarks>This is a constructor used by derivative types of <see cref="T:GLib.Object" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Object (GLib.Type gtype);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.Type" />
      </Parameters>
      <Docs>
        <summary>Creates a new <see cref="T:GLib.Object" /> instance, using the GLib-provided type.</summary>
        <param name="gtype">a <see cref="T:GLib.Type" /></param>
        <returns>a <see cref="T:GLib.Object" /></returns>
        <remarks>This is a constructor used by derivative types of <see cref="T:GLib.Object" /> that would have their own GLib type assigned to it.  This is not typically used by C# code.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calculates a hashing value.</summary>
        <returns>an object of type <see cref="T:System.Int32" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>